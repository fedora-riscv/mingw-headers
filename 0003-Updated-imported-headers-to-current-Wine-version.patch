From 1f1867e59a5bf7b7f7d292e2123a173c5bb460aa Mon Sep 17 00:00:00 2001
From: Jacek Caban <cjacek@gmail.com>
Date: Tue, 25 Feb 2014 11:57:58 +0000
Subject: [PATCH 03/25] Updated imported headers to current Wine version.

git-svn-id: svn+ssh://svn.code.sf.net/p/mingw-w64/code/trunk@6499 4407c894-4637-0410-b4f5-ada5f102cad1
---
 mingw-w64-headers/direct-x/include/d3d10_1.h     |  2 +
 mingw-w64-headers/direct-x/include/d3d10_1.idl   |  3 ++
 mingw-w64-headers/direct-x/include/d3d9.h        |  1 +
 mingw-w64-headers/direct-x/include/d3dx9core.h   |  2 +
 mingw-w64-headers/direct-x/include/d3dx9shader.h | 51 ++++++++++++++++++++++++
 mingw-w64-headers/direct-x/include/dxgi.h        |  2 +
 mingw-w64-headers/direct-x/include/dxgi.idl      |  1 +
 7 files changed, 62 insertions(+)

diff --git a/mingw-w64-headers/direct-x/include/d3d10_1.h b/mingw-w64-headers/direct-x/include/d3d10_1.h
index 9437787..46b4c52 100644
--- a/mingw-w64-headers/direct-x/include/d3d10_1.h
+++ b/mingw-w64-headers/direct-x/include/d3d10_1.h
@@ -1416,6 +1416,8 @@ void __RPC_STUB ID3D10Device1_GetFeatureLevel_Stub(
 
 #define D3D10_1_SDK_VERSION (0x20)
 
+HRESULT WINAPI D3D10CreateDevice1(IDXGIAdapter*,D3D10_DRIVER_TYPE,
+    HMODULE,UINT,D3D10_FEATURE_LEVEL1,UINT,ID3D10Device1**);
 /* Begin additional prototypes for all interfaces */
 
 
diff --git a/mingw-w64-headers/direct-x/include/d3d10_1.idl b/mingw-w64-headers/direct-x/include/d3d10_1.idl
index 3b6e624..bfae754 100644
--- a/mingw-w64-headers/direct-x/include/d3d10_1.idl
+++ b/mingw-w64-headers/direct-x/include/d3d10_1.idl
@@ -124,3 +124,6 @@ interface ID3D10Device1 : ID3D10Device
 }
 
 const UINT D3D10_1_SDK_VERSION = 0x20;
+
+cpp_quote("HRESULT WINAPI D3D10CreateDevice1(IDXGIAdapter*,D3D10_DRIVER_TYPE,")
+cpp_quote("    HMODULE,UINT,D3D10_FEATURE_LEVEL1,UINT,ID3D10Device1**);")
diff --git a/mingw-w64-headers/direct-x/include/d3d9.h b/mingw-w64-headers/direct-x/include/d3d9.h
index ec20200..ed6cadd 100644
--- a/mingw-w64-headers/direct-x/include/d3d9.h
+++ b/mingw-w64-headers/direct-x/include/d3d9.h
@@ -2098,6 +2098,7 @@ void        WINAPI D3DPERF_SetRegion(D3DCOLOR,LPCWSTR);
 
 /* Define the main entrypoint as well */
 IDirect3D9* WINAPI Direct3DCreate9(UINT SDKVersion);
+HRESULT WINAPI Direct3DCreate9Ex(UINT SDKVersion, IDirect3D9Ex**);
 
 #ifdef __cplusplus
 } /* extern "C" */
diff --git a/mingw-w64-headers/direct-x/include/d3dx9core.h b/mingw-w64-headers/direct-x/include/d3dx9core.h
index 5a0ca4b..477642f 100644
--- a/mingw-w64-headers/direct-x/include/d3dx9core.h
+++ b/mingw-w64-headers/direct-x/include/d3dx9core.h
@@ -29,7 +29,9 @@
 /* D3DX_VERSION will be completely ignored since we are
     implementing all dlls from d3dx9_24 to d3dx9_36 */
 #define D3DX_VERSION 0x0902
+#ifndef D3DX_SDK_VERSION
 #define D3DX_SDK_VERSION 36
+#endif
 #define D3DXSPRITE_DONOTSAVESTATE          0x00000001
 #define D3DXSPRITE_DONOTMODIFY_RENDERSTATE 0x00000002
 #define D3DXSPRITE_OBJECTSPACE             0x00000004
diff --git a/mingw-w64-headers/direct-x/include/d3dx9shader.h b/mingw-w64-headers/direct-x/include/d3dx9shader.h
index ee7786d..6dd9f62 100644
--- a/mingw-w64-headers/direct-x/include/d3dx9shader.h
+++ b/mingw-w64-headers/direct-x/include/d3dx9shader.h
@@ -2,6 +2,7 @@
 #undef INTERFACE
 /*
  * Copyright 2008 Luis Busquets
+ * Copyright 2014 Kai Tietz
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -44,7 +45,10 @@
 
 #define D3DXSHADER_USE_LEGACY_D3DX9_31_DLL        0x10000
 
+#define D3DXCONSTTABLE_LARGEADDRESSAWARE          0x20000
+
 typedef const char *D3DXHANDLE;
+typedef D3DXHANDLE *LPD3DXHANDLE;
 
 typedef enum _D3DXREGISTER_SET
 {
@@ -114,7 +118,11 @@ typedef struct _D3DXCONSTANT_DESC
     const void *DefaultValue;
 } D3DXCONSTANT_DESC, *LPD3DXCONSTANT_DESC;
 
+#if D3DX_SDK_VERSION < 43
 DEFINE_GUID(IID_ID3DXConstantTable, 0x9dca3190, 0x38b9, 0x4fc3, 0x92, 0xe3, 0x39, 0xc6, 0xdd, 0xfb, 0x35, 0x8b);
+#else
+DEFINE_GUID(IID_ID3DXConstantTable, 0xab3c758f, 0x093e, 0x4356, 0xb7, 0x62, 0x4d, 0xb1, 0x8f, 0x1b, 0x3a, 0x01);
+#endif
 
 #undef INTERFACE
 #define INTERFACE ID3DXConstantTable
@@ -230,6 +238,42 @@ DECLARE_INTERFACE_(ID3DXConstantTable, ID3DXBuffer)
 
 typedef struct ID3DXConstantTable *LPD3DXCONSTANTTABLE;
 
+typedef interface ID3DXTextureShader *LPD3DXTEXTURESHADER;
+
+DEFINE_GUID(IID_ID3DXTextureShader, 0x3e3d67f8, 0xaa7a, 0x405d, 0xa8, 0x57, 0xba, 0x1, 0xd4, 0x75, 0x84, 0x26);
+
+#define INTERFACE ID3DXTextureShader
+DECLARE_INTERFACE_(ID3DXTextureShader, IUnknown)
+{
+    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppv) PURE;
+    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
+    STDMETHOD_(ULONG, Release)(THIS) PURE;
+    STDMETHOD(GetFunction)(THIS_ struct ID3DXBuffer **ppFunction) PURE;
+    STDMETHOD(GetConstantBuffer)(THIS_ struct ID3DXBuffer **ppConstantBuffer) PURE;
+    STDMETHOD(GetDesc)(THIS_ D3DXCONSTANTTABLE_DESC *pDesc) PURE;
+    STDMETHOD(GetConstantDesc)(THIS_ D3DXHANDLE hConstant, D3DXCONSTANT_DESC *pConstantDesc, UINT *pCount) PURE;
+    STDMETHOD_(D3DXHANDLE, GetConstant)(THIS_ D3DXHANDLE hConstant, UINT Index) PURE;
+    STDMETHOD_(D3DXHANDLE, GetConstantByName)(THIS_ D3DXHANDLE hConstant, const char *pName) PURE;
+    STDMETHOD_(D3DXHANDLE, GetConstantElement)(THIS_ D3DXHANDLE hConstant, UINT Index) PURE;
+    STDMETHOD(SetDefaults)(THIS) PURE;
+    STDMETHOD(SetValue)(THIS_ D3DXHANDLE hConstant, const void *pData, UINT Bytes) PURE;
+    STDMETHOD(SetBool)(THIS_ D3DXHANDLE hConstant, WINBOOL b) PURE;
+    STDMETHOD(SetBoolArray)(THIS_ D3DXHANDLE hConstant, const WINBOOL *pb, UINT Count) PURE;
+    STDMETHOD(SetInt)(THIS_ D3DXHANDLE hConstant, INT n) PURE;
+    STDMETHOD(SetIntArray)(THIS_ D3DXHANDLE hConstant, const INT *pn, UINT Count) PURE;
+    STDMETHOD(SetFloat)(THIS_ D3DXHANDLE hConstant, FLOAT f) PURE;
+    STDMETHOD(SetFloatArray)(THIS_ D3DXHANDLE hConstant, const FLOAT *pf, UINT Count) PURE;
+    STDMETHOD(SetVector)(THIS_ D3DXHANDLE hConstant, const D3DXVECTOR4 *pVector) PURE;
+    STDMETHOD(SetVectorArray)(THIS_ D3DXHANDLE hConstant, const D3DXVECTOR4 *pVector, UINT Count) PURE;
+    STDMETHOD(SetMatrix)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX *pMatrix) PURE;
+    STDMETHOD(SetMatrixArray)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX *pMatrix, UINT Count) PURE;
+    STDMETHOD(SetMatrixPointerArray)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX **ppMatrix, UINT Count) PURE;
+    STDMETHOD(SetMatrixTranspose)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX *pMatrix) PURE;
+    STDMETHOD(SetMatrixTransposeArray)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX *pMatrix, UINT Count) PURE;
+    STDMETHOD(SetMatrixTransposePointerArray)(THIS_ D3DXHANDLE hConstant, const D3DXMATRIX **ppMatrix, UINT Count) PURE;
+};
+#undef INTERFACE
+
 typedef struct _D3DXMACRO
 {
     const char *Name;
@@ -293,6 +337,8 @@ HRESULT WINAPI D3DXCompileShader(const char *src_data, UINT data_len, const D3DX
         ID3DXInclude *include, const char *function_name, const char *profile, DWORD flags,
         ID3DXBuffer **shader, ID3DXBuffer **error_messages, ID3DXConstantTable **constant_table);
 
+HRESULT WINAPI D3DXDisassembleShader(const DWORD *pShader, WINBOOL EnableColorCode, const char *pComments, struct ID3DXBuffer **ppDisassembly);
+
 HRESULT WINAPI D3DXCompileShaderFromFileA(const char *filename, const D3DXMACRO *defines,
         ID3DXInclude *include, const char *entrypoint, const char *profile, DWORD flags,
         ID3DXBuffer **shader, ID3DXBuffer **error_messages, ID3DXConstantTable **constant_table);
@@ -328,6 +374,11 @@ HRESULT WINAPI D3DXGetShaderConstantTableEx(const DWORD *byte_code, DWORD flags,
 
 HRESULT WINAPI D3DXGetShaderConstantTable(const DWORD *byte_code, ID3DXConstantTable **constant_table);
 
+HRESULT WINAPI D3DXGetShaderInputSemantics(const DWORD *pFunction, D3DXSEMANTIC *pSemantics, UINT *pCount);
+HRESULT WINAPI D3DXGetShaderOutputSemantics(const DWORD *pFunction, D3DXSEMANTIC *pSemantics, UINT *pCount);
+
+HRESULT WINAPI D3DXCreateTextureShader(const DWORD *pFunction, ID3DXTextureShader **ppTextureShader);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/mingw-w64-headers/direct-x/include/dxgi.h b/mingw-w64-headers/direct-x/include/dxgi.h
index eec52b8..94521c0 100644
--- a/mingw-w64-headers/direct-x/include/dxgi.h
+++ b/mingw-w64-headers/direct-x/include/dxgi.h
@@ -2086,6 +2086,8 @@ void __RPC_STUB IDXGIFactory_CreateSoftwareAdapter_Stub(
 
 HRESULT __stdcall  CreateDXGIFactory(REFIID riid,void **factory);
 
+HRESULT __stdcall  CreateDXGIFactory1(REFIID riid,void **factory);
+
 /*****************************************************************************
  * IDXGIDevice interface
  */
diff --git a/mingw-w64-headers/direct-x/include/dxgi.idl b/mingw-w64-headers/direct-x/include/dxgi.idl
index d87a72c..ea7f3d1 100644
--- a/mingw-w64-headers/direct-x/include/dxgi.idl
+++ b/mingw-w64-headers/direct-x/include/dxgi.idl
@@ -372,6 +372,7 @@ interface IDXGIFactory : IDXGIObject
 }
 
 [local] HRESULT __stdcall CreateDXGIFactory(REFIID riid, void **factory);
+[local] HRESULT __stdcall CreateDXGIFactory1(REFIID riid, void **factory);
 
 [
     object,
-- 
2.1.0

