From 63d50cc50e8ab3d654f3e191bb2cf761cdabd108 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Thu, 4 Sep 2014 10:56:53 +0200
Subject: [PATCH 18/25] Updated imported headers to current Wine version.

---
 mingw-w64-headers/direct-x/include/d3d10_1.h   |   3 +
 mingw-w64-headers/direct-x/include/d3d10_1.idl |   3 +
 mingw-w64-headers/direct-x/include/d3d11.h     |  30 +++
 mingw-w64-headers/direct-x/include/d3d11.idl   |  22 ++
 mingw-w64-headers/include/comadmin.h           |   2 +-
 mingw-w64-headers/include/msctf.h              | 326 +++++++++++++++++++++++++
 mingw-w64-headers/include/msctf.idl            |  45 ++++
 7 files changed, 430 insertions(+), 1 deletion(-)

diff --git a/mingw-w64-headers/direct-x/include/d3d10_1.h b/mingw-w64-headers/direct-x/include/d3d10_1.h
index aaeb30e..eb06757 100644
--- a/mingw-w64-headers/direct-x/include/d3d10_1.h
+++ b/mingw-w64-headers/direct-x/include/d3d10_1.h
@@ -42,6 +42,8 @@ typedef interface ID3D10Device1 ID3D10Device1;
 extern "C" {
 #endif
 
+#ifndef _D3D10_1_CONSTANTS
+#define _D3D10_1_CONSTANTS
 #define D3D10_1_DEFAULT_SAMPLE_MASK (0xffffffff)
 
 #define D3D10_1_GS_INPUT_REGISTER_COUNT (32)
@@ -80,6 +82,7 @@ extern "C" {
 
 #define D3D10_1_VS_OUTPUT_REGISTER_COUNT (32)
 
+#endif
 #define D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP      (0.6)
 #define D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP (0.6f)
 #include <d3d10_1shader.h>
diff --git a/mingw-w64-headers/direct-x/include/d3d10_1.idl b/mingw-w64-headers/direct-x/include/d3d10_1.idl
index d0e02d4..ba5517b 100644
--- a/mingw-w64-headers/direct-x/include/d3d10_1.idl
+++ b/mingw-w64-headers/direct-x/include/d3d10_1.idl
@@ -19,6 +19,8 @@
 import "oaidl.idl";
 import "ocidl.idl";
 
+cpp_quote("#ifndef _D3D10_1_CONSTANTS")
+cpp_quote("#define _D3D10_1_CONSTANTS")
 const UINT D3D10_1_DEFAULT_SAMPLE_MASK                     = 0xffffffff;
 const UINT D3D10_1_GS_INPUT_REGISTER_COUNT                 = 32;
 const UINT D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT     = 32;
@@ -38,6 +40,7 @@ const UINT D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT           = 32;
 const UINT D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT           = 8;
 const UINT D3D10_1_VS_INPUT_REGISTER_COUNT                 = 32;
 const UINT D3D10_1_VS_OUTPUT_REGISTER_COUNT                = 32;
+cpp_quote("#endif")
 
 cpp_quote("#define D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP      (0.6)")
 cpp_quote("#define D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP (0.6f)")
diff --git a/mingw-w64-headers/direct-x/include/d3d11.h b/mingw-w64-headers/direct-x/include/d3d11.h
index e08c5e0..552ab5f 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.h
+++ b/mingw-w64-headers/direct-x/include/d3d11.h
@@ -450,6 +450,36 @@ typedef RECT D3D11_RECT;
 
 #define D3D11_SO_STREAM_COUNT (4)
 
+#define D3D11_SPEC_DATE_DAY (16)
+
+#define D3D11_SPEC_DATE_MONTH (5)
+
+#define D3D11_SPEC_DATE_YEAR (2011)
+
+#define D3D11_SPEC_VERSION                   (1.07)
+#define D3D11_SRGB_GAMMA                     (2.2f)
+#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_1    (12.92f)
+#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_2    (1.055f)
+#define D3D11_SRGB_TO_FLOAT_EXPONENT         (2.4f)
+#define D3D11_SRGB_TO_FLOAT_OFFSET           (0.055f)
+#define D3D11_SRGB_TO_FLOAT_THRESHOLD        (0.04045f)
+#define D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP (0.5f)
+#define D3D11_STANDARD_COMPONENT_BIT_COUNT (32)
+
+#define D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED (64)
+
+#define D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE (4)
+
+#define D3D11_STANDARD_PIXEL_COMPONENT_COUNT (128)
+
+#define D3D11_STANDARD_PIXEL_ELEMENT_COUNT (32)
+
+#define D3D11_STANDARD_VECTOR_SIZE (4)
+
+#define D3D11_STANDARD_VERTEX_ELEMENT_COUNT (32)
+
+#define D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT (64)
+
 #if !defined(D3D11_NO_HELPERS) && defined(__cplusplus)
 struct CD3D11_DEFAULT {};
 extern const DECLSPEC_SELECTANY CD3D11_DEFAULT D3D11_DEFAULT;
diff --git a/mingw-w64-headers/direct-x/include/d3d11.idl b/mingw-w64-headers/direct-x/include/d3d11.idl
index d03ffd3..a08a32b 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.idl
+++ b/mingw-w64-headers/direct-x/include/d3d11.idl
@@ -176,6 +176,28 @@ const UINT D3D11_SO_NO_RASTERIZED_STREAM               = 0xffffffff;
 const UINT D3D11_SO_OUTPUT_COMPONENT_COUNT             = 128;
 const UINT D3D11_SO_STREAM_COUNT                       = 4;
 
+const UINT D3D11_SPEC_DATE_DAY   = 16;
+const UINT D3D11_SPEC_DATE_MONTH = 05;
+const UINT D3D11_SPEC_DATE_YEAR  = 2011;
+
+cpp_quote("#define D3D11_SPEC_VERSION                   (1.07)")
+cpp_quote("#define D3D11_SRGB_GAMMA                     (2.2f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_1    (12.92f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_2    (1.055f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_EXPONENT         (2.4f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_OFFSET           (0.055f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_THRESHOLD        (0.04045f)")
+cpp_quote("#define D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP (0.5f)")
+
+const UINT D3D11_STANDARD_COMPONENT_BIT_COUNT                     = 32;
+const UINT D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED             = 64;
+const UINT D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
+const UINT D3D11_STANDARD_PIXEL_COMPONENT_COUNT                   = 128;
+const UINT D3D11_STANDARD_PIXEL_ELEMENT_COUNT                     = 32;
+const UINT D3D11_STANDARD_VECTOR_SIZE                             = 4;
+const UINT D3D11_STANDARD_VERTEX_ELEMENT_COUNT                    = 32;
+const UINT D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT            = 64;
+
 cpp_quote("#if !defined(D3D11_NO_HELPERS) && defined(__cplusplus)")
 cpp_quote("struct CD3D11_DEFAULT {};")
 cpp_quote("extern const DECLSPEC_SELECTANY CD3D11_DEFAULT D3D11_DEFAULT;")
diff --git a/mingw-w64-headers/include/comadmin.h b/mingw-w64-headers/include/comadmin.h
index 54b5a4f..a84a1a5 100644
--- a/mingw-w64-headers/include/comadmin.h
+++ b/mingw-w64-headers/include/comadmin.h
@@ -1,4 +1,4 @@
-/*** Autogenerated by WIDL 1.6 from comadmin.idl - Do not edit ***/
+/*** Autogenerated by WIDL 1.6 from include/comadmin.idl - Do not edit ***/
 
 #ifndef __REQUIRED_RPCNDR_H_VERSION__
 #define __REQUIRED_RPCNDR_H_VERSION__ 475
diff --git a/mingw-w64-headers/include/msctf.h b/mingw-w64-headers/include/msctf.h
index 15cc6a6..5bed0a2 100644
--- a/mingw-w64-headers/include/msctf.h
+++ b/mingw-w64-headers/include/msctf.h
@@ -242,6 +242,21 @@ typedef interface ITfThreadFocusSink ITfThreadFocusSink;
 typedef interface ITfInputProcessorProfileActivationSink ITfInputProcessorProfileActivationSink;
 #endif
 
+#ifndef __ITfMouseSink_FWD_DEFINED__
+#define __ITfMouseSink_FWD_DEFINED__
+typedef interface ITfMouseSink ITfMouseSink;
+#endif
+
+#ifndef __ITfMouseTracker_FWD_DEFINED__
+#define __ITfMouseTracker_FWD_DEFINED__
+typedef interface ITfMouseTracker ITfMouseTracker;
+#endif
+
+#ifndef __ITfMouseTrackerACP_FWD_DEFINED__
+#define __ITfMouseTrackerACP_FWD_DEFINED__
+typedef interface ITfMouseTrackerACP ITfMouseTrackerACP;
+#endif
+
 /* Headers for imported files */
 
 #include <oaidl.h>
@@ -8893,6 +8908,317 @@ void __RPC_STUB ITfInputProcessorProfileActivationSink_OnActivated_Stub(
 
 #endif  /* __ITfInputProcessorProfileActivationSink_INTERFACE_DEFINED__ */
 
+/*****************************************************************************
+ * ITfMouseSink interface
+ */
+#ifndef __ITfMouseSink_INTERFACE_DEFINED__
+#define __ITfMouseSink_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_ITfMouseSink, 0xa1adaaa2, 0x3a24, 0x449d, 0xac,0x96, 0x51,0x83,0xe7,0xf5,0xc2,0x17);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("a1adaaa2-3a24-449d-ac96-5183e7f5c217")
+ITfMouseSink : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE OnMouseEvent(
+        ULONG uEdge,
+        ULONG uQuadrant,
+        DWORD dwBtnStatus,
+        WINBOOL *pfEaten) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ITfMouseSink, 0xa1adaaa2, 0x3a24, 0x449d, 0xac,0x96, 0x51,0x83,0xe7,0xf5,0xc2,0x17)
+#endif
+#else
+typedef struct ITfMouseSinkVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ITfMouseSink* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ITfMouseSink* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ITfMouseSink* This);
+
+    /*** ITfMouseSink methods ***/
+    HRESULT (STDMETHODCALLTYPE *OnMouseEvent)(
+        ITfMouseSink* This,
+        ULONG uEdge,
+        ULONG uQuadrant,
+        DWORD dwBtnStatus,
+        WINBOOL *pfEaten);
+
+    END_INTERFACE
+} ITfMouseSinkVtbl;
+interface ITfMouseSink {
+    CONST_VTBL ITfMouseSinkVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define ITfMouseSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define ITfMouseSink_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define ITfMouseSink_Release(This) (This)->lpVtbl->Release(This)
+/*** ITfMouseSink methods ***/
+#define ITfMouseSink_OnMouseEvent(This,uEdge,uQuadrant,dwBtnStatus,pfEaten) (This)->lpVtbl->OnMouseEvent(This,uEdge,uQuadrant,dwBtnStatus,pfEaten)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ITfMouseSink_QueryInterface(ITfMouseSink* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ITfMouseSink_AddRef(ITfMouseSink* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ITfMouseSink_Release(ITfMouseSink* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** ITfMouseSink methods ***/
+static FORCEINLINE HRESULT ITfMouseSink_OnMouseEvent(ITfMouseSink* This,ULONG uEdge,ULONG uQuadrant,DWORD dwBtnStatus,WINBOOL *pfEaten) {
+    return This->lpVtbl->OnMouseEvent(This,uEdge,uQuadrant,dwBtnStatus,pfEaten);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE ITfMouseSink_OnMouseEvent_Proxy(
+    ITfMouseSink* This,
+    ULONG uEdge,
+    ULONG uQuadrant,
+    DWORD dwBtnStatus,
+    WINBOOL *pfEaten);
+void __RPC_STUB ITfMouseSink_OnMouseEvent_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __ITfMouseSink_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * ITfMouseTracker interface
+ */
+#ifndef __ITfMouseTracker_INTERFACE_DEFINED__
+#define __ITfMouseTracker_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_ITfMouseTracker, 0x09d146cd, 0xa544, 0x4132, 0x92,0x5b, 0x7a,0xfa,0x8e,0xf3,0x22,0xd0);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("09d146cd-a544-4132-925b-7afa8ef322d0")
+ITfMouseTracker : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE AdviseMouseSink(
+        ITfRange *range,
+        ITfMouseSink *pSink,
+        DWORD *pdwCookie) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE UnadviseMouseSink(
+        DWORD dwCookie) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ITfMouseTracker, 0x09d146cd, 0xa544, 0x4132, 0x92,0x5b, 0x7a,0xfa,0x8e,0xf3,0x22,0xd0)
+#endif
+#else
+typedef struct ITfMouseTrackerVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ITfMouseTracker* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ITfMouseTracker* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ITfMouseTracker* This);
+
+    /*** ITfMouseTracker methods ***/
+    HRESULT (STDMETHODCALLTYPE *AdviseMouseSink)(
+        ITfMouseTracker* This,
+        ITfRange *range,
+        ITfMouseSink *pSink,
+        DWORD *pdwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *UnadviseMouseSink)(
+        ITfMouseTracker* This,
+        DWORD dwCookie);
+
+    END_INTERFACE
+} ITfMouseTrackerVtbl;
+interface ITfMouseTracker {
+    CONST_VTBL ITfMouseTrackerVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define ITfMouseTracker_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define ITfMouseTracker_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define ITfMouseTracker_Release(This) (This)->lpVtbl->Release(This)
+/*** ITfMouseTracker methods ***/
+#define ITfMouseTracker_AdviseMouseSink(This,range,pSink,pdwCookie) (This)->lpVtbl->AdviseMouseSink(This,range,pSink,pdwCookie)
+#define ITfMouseTracker_UnadviseMouseSink(This,dwCookie) (This)->lpVtbl->UnadviseMouseSink(This,dwCookie)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ITfMouseTracker_QueryInterface(ITfMouseTracker* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ITfMouseTracker_AddRef(ITfMouseTracker* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ITfMouseTracker_Release(ITfMouseTracker* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** ITfMouseTracker methods ***/
+static FORCEINLINE HRESULT ITfMouseTracker_AdviseMouseSink(ITfMouseTracker* This,ITfRange *range,ITfMouseSink *pSink,DWORD *pdwCookie) {
+    return This->lpVtbl->AdviseMouseSink(This,range,pSink,pdwCookie);
+}
+static FORCEINLINE HRESULT ITfMouseTracker_UnadviseMouseSink(ITfMouseTracker* This,DWORD dwCookie) {
+    return This->lpVtbl->UnadviseMouseSink(This,dwCookie);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE ITfMouseTracker_AdviseMouseSink_Proxy(
+    ITfMouseTracker* This,
+    ITfRange *range,
+    ITfMouseSink *pSink,
+    DWORD *pdwCookie);
+void __RPC_STUB ITfMouseTracker_AdviseMouseSink_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ITfMouseTracker_UnadviseMouseSink_Proxy(
+    ITfMouseTracker* This,
+    DWORD dwCookie);
+void __RPC_STUB ITfMouseTracker_UnadviseMouseSink_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __ITfMouseTracker_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * ITfMouseTrackerACP interface
+ */
+#ifndef __ITfMouseTrackerACP_INTERFACE_DEFINED__
+#define __ITfMouseTrackerACP_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_ITfMouseTrackerACP, 0x3bdd78e2, 0xc16e, 0x47fd, 0xb8,0x83, 0xce,0x6f,0xac,0xc1,0xa2,0x08);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("3bdd78e2-c16e-47fd-b883-ce6facc1a208")
+ITfMouseTrackerACP : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE AdviseMouseSink(
+        ITfRangeACP *range,
+        ITfMouseSink *pSink,
+        DWORD *pdwCookie) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE UnadviseMouseSink(
+        DWORD dwCookie) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ITfMouseTrackerACP, 0x3bdd78e2, 0xc16e, 0x47fd, 0xb8,0x83, 0xce,0x6f,0xac,0xc1,0xa2,0x08)
+#endif
+#else
+typedef struct ITfMouseTrackerACPVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ITfMouseTrackerACP* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ITfMouseTrackerACP* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ITfMouseTrackerACP* This);
+
+    /*** ITfMouseTrackerACP methods ***/
+    HRESULT (STDMETHODCALLTYPE *AdviseMouseSink)(
+        ITfMouseTrackerACP* This,
+        ITfRangeACP *range,
+        ITfMouseSink *pSink,
+        DWORD *pdwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *UnadviseMouseSink)(
+        ITfMouseTrackerACP* This,
+        DWORD dwCookie);
+
+    END_INTERFACE
+} ITfMouseTrackerACPVtbl;
+interface ITfMouseTrackerACP {
+    CONST_VTBL ITfMouseTrackerACPVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define ITfMouseTrackerACP_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define ITfMouseTrackerACP_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define ITfMouseTrackerACP_Release(This) (This)->lpVtbl->Release(This)
+/*** ITfMouseTrackerACP methods ***/
+#define ITfMouseTrackerACP_AdviseMouseSink(This,range,pSink,pdwCookie) (This)->lpVtbl->AdviseMouseSink(This,range,pSink,pdwCookie)
+#define ITfMouseTrackerACP_UnadviseMouseSink(This,dwCookie) (This)->lpVtbl->UnadviseMouseSink(This,dwCookie)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ITfMouseTrackerACP_QueryInterface(ITfMouseTrackerACP* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ITfMouseTrackerACP_AddRef(ITfMouseTrackerACP* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ITfMouseTrackerACP_Release(ITfMouseTrackerACP* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** ITfMouseTrackerACP methods ***/
+static FORCEINLINE HRESULT ITfMouseTrackerACP_AdviseMouseSink(ITfMouseTrackerACP* This,ITfRangeACP *range,ITfMouseSink *pSink,DWORD *pdwCookie) {
+    return This->lpVtbl->AdviseMouseSink(This,range,pSink,pdwCookie);
+}
+static FORCEINLINE HRESULT ITfMouseTrackerACP_UnadviseMouseSink(ITfMouseTrackerACP* This,DWORD dwCookie) {
+    return This->lpVtbl->UnadviseMouseSink(This,dwCookie);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_AdviseMouseSink_Proxy(
+    ITfMouseTrackerACP* This,
+    ITfRangeACP *range,
+    ITfMouseSink *pSink,
+    DWORD *pdwCookie);
+void __RPC_STUB ITfMouseTrackerACP_AdviseMouseSink_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_UnadviseMouseSink_Proxy(
+    ITfMouseTrackerACP* This,
+    DWORD dwCookie);
+void __RPC_STUB ITfMouseTrackerACP_UnadviseMouseSink_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __ITfMouseTrackerACP_INTERFACE_DEFINED__ */
+
 /* Begin additional prototypes for all interfaces */
 
 ULONG           __RPC_USER HWND_UserSize     (ULONG *, ULONG, HWND *);
diff --git a/mingw-w64-headers/include/msctf.idl b/mingw-w64-headers/include/msctf.idl
index e4b54e4..d7a257f 100644
--- a/mingw-w64-headers/include/msctf.idl
+++ b/mingw-w64-headers/include/msctf.idl
@@ -1543,3 +1543,48 @@ interface ITfInputProcessorProfileActivationSink : IUnknown
         [in] HKL hkl,
         [in] DWORD dwFlags);
 }
+
+[
+    object,
+    local,
+    uuid(a1adaaa2-3a24-449d-ac96-5183e7f5c217),
+    pointer_default(unique)
+]
+interface ITfMouseSink : IUnknown
+{
+    HRESULT OnMouseEvent(
+        [in] ULONG uEdge,
+        [in] ULONG uQuadrant,
+        [in] DWORD dwBtnStatus,
+        [out] BOOL *pfEaten);
+}
+
+[
+    object,
+    uuid(09d146cd-a544-4132-925b-7afa8ef322d0),
+    pointer_default(unique)
+]
+interface ITfMouseTracker : IUnknown
+{
+    HRESULT AdviseMouseSink(
+        [in] ITfRange *range,
+        [in] ITfMouseSink *pSink,
+        [out] DWORD *pdwCookie);
+
+    HRESULT UnadviseMouseSink([in] DWORD dwCookie);
+}
+
+[
+    object,
+    uuid(3bdd78e2-c16e-47fd-b883-ce6facc1a208),
+    pointer_default(unique)
+]
+interface ITfMouseTrackerACP : IUnknown
+{
+    HRESULT AdviseMouseSink(
+        [in] ITfRangeACP *range,
+        [in] ITfMouseSink *pSink,
+        [out] DWORD *pdwCookie);
+
+    HRESULT UnadviseMouseSink([in] DWORD dwCookie);
+}
-- 
2.1.0

