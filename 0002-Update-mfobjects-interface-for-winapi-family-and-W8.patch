From 70da0148b4006a81e14a5b8f7b4967937eda9fb4 Mon Sep 17 00:00:00 2001
From: Kai Tietz <ktietz70@googlemail.com>
Date: Tue, 10 Dec 2013 13:55:25 +0000
Subject: [PATCH 02/25] Update mfobjects interface for winapi-family and W8

git-svn-id: svn+ssh://svn.code.sf.net/p/mingw-w64/code/trunk@6407 4407c894-4637-0410-b4f5-ada5f102cad1
---
 mingw-w64-headers/include/mfobjects.h   | 2119 +++++++++++++++++++++++++++----
 mingw-w64-headers/include/mfobjects.idl | 1223 +++++++++++-------
 2 files changed, 2649 insertions(+), 693 deletions(-)

diff --git a/mingw-w64-headers/include/mfobjects.h b/mingw-w64-headers/include/mfobjects.h
index 96a57b8..e3cc403 100644
--- a/mingw-w64-headers/include/mfobjects.h
+++ b/mingw-w64-headers/include/mfobjects.h
@@ -1,4 +1,4 @@
-/*** Autogenerated by WIDL 1.5.25 from include/mfobjects.idl - Do not edit ***/
+/*** Autogenerated by WIDL 1.6 from mfobjects.idl - Do not edit ***/
 
 #ifndef __REQUIRED_RPCNDR_H_VERSION__
 #define __REQUIRED_RPCNDR_H_VERSION__ 475
@@ -37,6 +37,16 @@ typedef interface IMFSample IMFSample;
 typedef interface IMF2DBuffer IMF2DBuffer;
 #endif
 
+#ifndef __IMF2DBuffer2_FWD_DEFINED__
+#define __IMF2DBuffer2_FWD_DEFINED__
+typedef interface IMF2DBuffer2 IMF2DBuffer2;
+#endif
+
+#ifndef __IMFDXGIBuffer_FWD_DEFINED__
+#define __IMFDXGIBuffer_FWD_DEFINED__
+typedef interface IMFDXGIBuffer IMFDXGIBuffer;
+#endif
+
 #ifndef __IMFMediaType_FWD_DEFINED__
 #define __IMFMediaType_FWD_DEFINED__
 typedef interface IMFMediaType IMFMediaType;
@@ -62,9 +72,9 @@ typedef interface IMFAsyncResult IMFAsyncResult;
 typedef interface IMFAsyncCallback IMFAsyncCallback;
 #endif
 
-#ifndef __IMFRemoteAsyncCallback_FWD_DEFINED__
-#define __IMFRemoteAsyncCallback_FWD_DEFINED__
-typedef interface IMFRemoteAsyncCallback IMFRemoteAsyncCallback;
+#ifndef __IMFAsyncCallbackLogging_FWD_DEFINED__
+#define __IMFAsyncCallbackLogging_FWD_DEFINED__
+typedef interface IMFAsyncCallbackLogging IMFAsyncCallbackLogging;
 #endif
 
 #ifndef __IMFMediaEvent_FWD_DEFINED__
@@ -77,16 +87,36 @@ typedef interface IMFMediaEvent IMFMediaEvent;
 typedef interface IMFMediaEventGenerator IMFMediaEventGenerator;
 #endif
 
+#ifndef __IMFRemoteAsyncCallback_FWD_DEFINED__
+#define __IMFRemoteAsyncCallback_FWD_DEFINED__
+typedef interface IMFRemoteAsyncCallback IMFRemoteAsyncCallback;
+#endif
+
 #ifndef __IMFByteStream_FWD_DEFINED__
 #define __IMFByteStream_FWD_DEFINED__
 typedef interface IMFByteStream IMFByteStream;
 #endif
 
+#ifndef __IMFByteStreamProxyClassFactory_FWD_DEFINED__
+#define __IMFByteStreamProxyClassFactory_FWD_DEFINED__
+typedef interface IMFByteStreamProxyClassFactory IMFByteStreamProxyClassFactory;
+#endif
+
+#ifndef __IMFSampleOutputStream_FWD_DEFINED__
+#define __IMFSampleOutputStream_FWD_DEFINED__
+typedef interface IMFSampleOutputStream IMFSampleOutputStream;
+#endif
+
 #ifndef __IMFCollection_FWD_DEFINED__
 #define __IMFCollection_FWD_DEFINED__
 typedef interface IMFCollection IMFCollection;
 #endif
 
+#ifndef __IMFMediaEventQueue_FWD_DEFINED__
+#define __IMFMediaEventQueue_FWD_DEFINED__
+typedef interface IMFMediaEventQueue IMFMediaEventQueue;
+#endif
+
 #ifndef __IMFActivate_FWD_DEFINED__
 #define __IMFActivate_FWD_DEFINED__
 typedef interface IMFActivate IMFActivate;
@@ -97,6 +127,16 @@ typedef interface IMFActivate IMFActivate;
 typedef interface IMFPluginControl IMFPluginControl;
 #endif
 
+#ifndef __IMFPluginControl2_FWD_DEFINED__
+#define __IMFPluginControl2_FWD_DEFINED__
+typedef interface IMFPluginControl2 IMFPluginControl2;
+#endif
+
+#ifndef __IMFDXGIDeviceManager_FWD_DEFINED__
+#define __IMFDXGIDeviceManager_FWD_DEFINED__
+typedef interface IMFDXGIDeviceManager IMFDXGIDeviceManager;
+#endif
+
 /* Headers for imported files */
 
 #include <unknwn.h>
@@ -107,6 +147,16 @@ typedef interface IMFPluginControl IMFPluginControl;
 extern "C" {
 #endif
 
+/**
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within this package.
+ */
+
+#include <winapifamily.h>
+
+
+typedef ULONGLONG QWORD;
+
 #include <mmreg.h>
 #if 0
 typedef struct tWAVEFORMATEX {
@@ -122,7 +172,7 @@ typedef struct tWAVEFORMATEX {
 typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
 typedef struct tWAVEFORMATEX *NPWAVEFORMATEX;
 typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
-typedef struct __WIDL_mmreg_h_generated_name_00000000 {
+typedef struct __WIDL_mfobjects_generated_name_00000013 {
     WORD wFormatTag;
     WORD nChannels;
     DWORD nSamplesPerSec;
@@ -134,9 +184,10 @@ typedef struct __WIDL_mmreg_h_generated_name_00000000 {
     DWORD dwChannelMask;
     GUID SubFormat;
 } WAVEFORMATEXTENSIBLE;
-typedef struct __WIDL_mmreg_h_generated_name_00000000 *PWAVEFORMATEXTENSIBLE;
+typedef struct __WIDL_mfobjects_generated_name_00000013 *PWAVEFORMATEXTENSIBLE;
 #endif
-typedef ULONGLONG QWORD;
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 typedef enum _MF_ATTRIBUTE_TYPE {
     MF_ATTRIBUTE_UINT32 = VT_UI4,
     MF_ATTRIBUTE_UINT64 = VT_UI8,
@@ -146,6 +197,7 @@ typedef enum _MF_ATTRIBUTE_TYPE {
     MF_ATTRIBUTE_BLOB = VT_VECTOR | VT_UI1,
     MF_ATTRIBUTE_IUNKNOWN = VT_UNKNOWN
 } MF_ATTRIBUTE_TYPE;
+
 typedef enum _MF_ATTRIBUTES_MATCH_TYPE {
     MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0,
     MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1,
@@ -153,6 +205,7 @@ typedef enum _MF_ATTRIBUTES_MATCH_TYPE {
     MF_ATTRIBUTES_MATCH_INTERSECTION = 3,
     MF_ATTRIBUTES_MATCH_SMALLER = 4
 } MF_ATTRIBUTES_MATCH_TYPE;
+
 /*****************************************************************************
  * IMFAttributes interface
  */
@@ -887,10 +940,15 @@ void __RPC_STUB IMFAttributes_CopyAllItems_Stub(
 
 #endif  /* __IMFAttributes_INTERFACE_DEFINED__ */
 
+
 enum MF_ATTRIBUTE_SERIALIZE_OPTIONS {
     MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 0x1
 };
 
+
+STDAPI MFSerializeAttributesToStream(IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm);
+STDAPI MFDeserializeAttributesFromStream(IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm);
+
 /*****************************************************************************
  * IMFMediaBuffer interface
  */
@@ -1055,6 +1113,7 @@ void __RPC_STUB IMFMediaBuffer_GetMaxLength_Stub(
 
 #endif  /* __IMFMediaBuffer_INTERFACE_DEFINED__ */
 
+
 /*****************************************************************************
  * IMFSample interface
  */
@@ -1662,6 +1721,7 @@ void __RPC_STUB IMFSample_CopyToBuffer_Stub(
 
 #endif  /* __IMFSample_INTERFACE_DEFINED__ */
 
+
 /*****************************************************************************
  * IMF2DBuffer interface
  */
@@ -1674,7 +1734,7 @@ MIDL_INTERFACE("7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb")
 IMF2DBuffer : public IUnknown
 {
     virtual HRESULT STDMETHODCALLTYPE Lock2D(
-        BYTE **pbScanline0,
+        BYTE **ppbScanline0,
         LONG *plPitch) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Unlock2D(
@@ -1721,7 +1781,7 @@ typedef struct IMF2DBufferVtbl {
     /*** IMF2DBuffer methods ***/
     HRESULT (STDMETHODCALLTYPE *Lock2D)(
         IMF2DBuffer* This,
-        BYTE **pbScanline0,
+        BYTE **ppbScanline0,
         LONG *plPitch);
 
     HRESULT (STDMETHODCALLTYPE *Unlock2D)(
@@ -1763,7 +1823,7 @@ interface IMF2DBuffer {
 #define IMF2DBuffer_AddRef(This) (This)->lpVtbl->AddRef(This)
 #define IMF2DBuffer_Release(This) (This)->lpVtbl->Release(This)
 /*** IMF2DBuffer methods ***/
-#define IMF2DBuffer_Lock2D(This,pbScanline0,plPitch) (This)->lpVtbl->Lock2D(This,pbScanline0,plPitch)
+#define IMF2DBuffer_Lock2D(This,ppbScanline0,plPitch) (This)->lpVtbl->Lock2D(This,ppbScanline0,plPitch)
 #define IMF2DBuffer_Unlock2D(This) (This)->lpVtbl->Unlock2D(This)
 #define IMF2DBuffer_GetScanline0AndPitch(This,pbScanline0,plPitch) (This)->lpVtbl->GetScanline0AndPitch(This,pbScanline0,plPitch)
 #define IMF2DBuffer_IsContiguousFormat(This,pfIsContiguous) (This)->lpVtbl->IsContiguousFormat(This,pfIsContiguous)
@@ -1782,8 +1842,8 @@ static FORCEINLINE ULONG IMF2DBuffer_Release(IMF2DBuffer* This) {
     return This->lpVtbl->Release(This);
 }
 /*** IMF2DBuffer methods ***/
-static FORCEINLINE HRESULT IMF2DBuffer_Lock2D(IMF2DBuffer* This,BYTE **pbScanline0,LONG *plPitch) {
-    return This->lpVtbl->Lock2D(This,pbScanline0,plPitch);
+static FORCEINLINE HRESULT IMF2DBuffer_Lock2D(IMF2DBuffer* This,BYTE **ppbScanline0,LONG *plPitch) {
+    return This->lpVtbl->Lock2D(This,ppbScanline0,plPitch);
 }
 static FORCEINLINE HRESULT IMF2DBuffer_Unlock2D(IMF2DBuffer* This) {
     return This->lpVtbl->Unlock2D(This);
@@ -1810,7 +1870,7 @@ static FORCEINLINE HRESULT IMF2DBuffer_ContiguousCopyFrom(IMF2DBuffer* This,cons
 
 HRESULT STDMETHODCALLTYPE IMF2DBuffer_Lock2D_Proxy(
     IMF2DBuffer* This,
-    BYTE **pbScanline0,
+    BYTE **ppbScanline0,
     LONG *plPitch);
 void __RPC_STUB IMF2DBuffer_Lock2D_Stub(
     IRpcStubBuffer* This,
@@ -1870,6 +1930,347 @@ void __RPC_STUB IMF2DBuffer_ContiguousCopyFrom_Stub(
 
 #endif  /* __IMF2DBuffer_INTERFACE_DEFINED__ */
 
+
+typedef enum _MF2DBuffer_LockFlags {
+    MF2DBuffer_LockFlags_LockTypeMask = (0x1 | 0x2) | 0x3,
+    MF2DBuffer_LockFlags_Read = 0x1,
+    MF2DBuffer_LockFlags_Write = 0x2,
+    MF2DBuffer_LockFlags_ReadWrite = 0x3,
+    MF2DBuffer_LockFlags_ForceDWORD = 0x7fffffff
+} MF2DBuffer_LockFlags;
+
+/*****************************************************************************
+ * IMF2DBuffer2 interface
+ */
+#ifndef __IMF2DBuffer2_INTERFACE_DEFINED__
+#define __IMF2DBuffer2_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMF2DBuffer2, 0x33ae5ea6, 0x4316, 0x436f, 0x8d,0xdd, 0xd7,0x3d,0x22,0xf8,0x29,0xec);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("33ae5ea6-4316-436f-8ddd-d73d22f829ec")
+IMF2DBuffer2 : public IMF2DBuffer
+{
+    virtual HRESULT STDMETHODCALLTYPE Lock2DSize(
+        MF2DBuffer_LockFlags lockFlags,
+        BYTE **ppbScanline0,
+        LONG *plPitch,
+        BYTE **ppbBufferStart,
+        DWORD *pcbBufferLength) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Copy2DTo(
+        IMF2DBuffer2 *pDestBuffer) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMF2DBuffer2, 0x33ae5ea6, 0x4316, 0x436f, 0x8d,0xdd, 0xd7,0x3d,0x22,0xf8,0x29,0xec)
+#endif
+#else
+typedef struct IMF2DBuffer2Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMF2DBuffer2* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMF2DBuffer2* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMF2DBuffer2* This);
+
+    /*** IMF2DBuffer methods ***/
+    HRESULT (STDMETHODCALLTYPE *Lock2D)(
+        IMF2DBuffer2* This,
+        BYTE **ppbScanline0,
+        LONG *plPitch);
+
+    HRESULT (STDMETHODCALLTYPE *Unlock2D)(
+        IMF2DBuffer2* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetScanline0AndPitch)(
+        IMF2DBuffer2* This,
+        BYTE **pbScanline0,
+        LONG *plPitch);
+
+    HRESULT (STDMETHODCALLTYPE *IsContiguousFormat)(
+        IMF2DBuffer2* This,
+        WINBOOL *pfIsContiguous);
+
+    HRESULT (STDMETHODCALLTYPE *GetContiguousLength)(
+        IMF2DBuffer2* This,
+        DWORD *pcbLength);
+
+    HRESULT (STDMETHODCALLTYPE *ContiguousCopyTo)(
+        IMF2DBuffer2* This,
+        BYTE *pbDestBuffer,
+        DWORD cbDestBuffer);
+
+    HRESULT (STDMETHODCALLTYPE *ContiguousCopyFrom)(
+        IMF2DBuffer2* This,
+        const BYTE *pbSrcBuffer,
+        DWORD cbSrcBuffer);
+
+    /*** IMF2DBuffer2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *Lock2DSize)(
+        IMF2DBuffer2* This,
+        MF2DBuffer_LockFlags lockFlags,
+        BYTE **ppbScanline0,
+        LONG *plPitch,
+        BYTE **ppbBufferStart,
+        DWORD *pcbBufferLength);
+
+    HRESULT (STDMETHODCALLTYPE *Copy2DTo)(
+        IMF2DBuffer2* This,
+        IMF2DBuffer2 *pDestBuffer);
+
+    END_INTERFACE
+} IMF2DBuffer2Vtbl;
+interface IMF2DBuffer2 {
+    CONST_VTBL IMF2DBuffer2Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMF2DBuffer2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMF2DBuffer2_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMF2DBuffer2_Release(This) (This)->lpVtbl->Release(This)
+/*** IMF2DBuffer methods ***/
+#define IMF2DBuffer2_Lock2D(This,ppbScanline0,plPitch) (This)->lpVtbl->Lock2D(This,ppbScanline0,plPitch)
+#define IMF2DBuffer2_Unlock2D(This) (This)->lpVtbl->Unlock2D(This)
+#define IMF2DBuffer2_GetScanline0AndPitch(This,pbScanline0,plPitch) (This)->lpVtbl->GetScanline0AndPitch(This,pbScanline0,plPitch)
+#define IMF2DBuffer2_IsContiguousFormat(This,pfIsContiguous) (This)->lpVtbl->IsContiguousFormat(This,pfIsContiguous)
+#define IMF2DBuffer2_GetContiguousLength(This,pcbLength) (This)->lpVtbl->GetContiguousLength(This,pcbLength)
+#define IMF2DBuffer2_ContiguousCopyTo(This,pbDestBuffer,cbDestBuffer) (This)->lpVtbl->ContiguousCopyTo(This,pbDestBuffer,cbDestBuffer)
+#define IMF2DBuffer2_ContiguousCopyFrom(This,pbSrcBuffer,cbSrcBuffer) (This)->lpVtbl->ContiguousCopyFrom(This,pbSrcBuffer,cbSrcBuffer)
+/*** IMF2DBuffer2 methods ***/
+#define IMF2DBuffer2_Lock2DSize(This,lockFlags,ppbScanline0,plPitch,ppbBufferStart,pcbBufferLength) (This)->lpVtbl->Lock2DSize(This,lockFlags,ppbScanline0,plPitch,ppbBufferStart,pcbBufferLength)
+#define IMF2DBuffer2_Copy2DTo(This,pDestBuffer) (This)->lpVtbl->Copy2DTo(This,pDestBuffer)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMF2DBuffer2_QueryInterface(IMF2DBuffer2* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMF2DBuffer2_AddRef(IMF2DBuffer2* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMF2DBuffer2_Release(IMF2DBuffer2* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMF2DBuffer methods ***/
+static FORCEINLINE HRESULT IMF2DBuffer2_Lock2D(IMF2DBuffer2* This,BYTE **ppbScanline0,LONG *plPitch) {
+    return This->lpVtbl->Lock2D(This,ppbScanline0,plPitch);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_Unlock2D(IMF2DBuffer2* This) {
+    return This->lpVtbl->Unlock2D(This);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_GetScanline0AndPitch(IMF2DBuffer2* This,BYTE **pbScanline0,LONG *plPitch) {
+    return This->lpVtbl->GetScanline0AndPitch(This,pbScanline0,plPitch);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_IsContiguousFormat(IMF2DBuffer2* This,WINBOOL *pfIsContiguous) {
+    return This->lpVtbl->IsContiguousFormat(This,pfIsContiguous);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_GetContiguousLength(IMF2DBuffer2* This,DWORD *pcbLength) {
+    return This->lpVtbl->GetContiguousLength(This,pcbLength);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_ContiguousCopyTo(IMF2DBuffer2* This,BYTE *pbDestBuffer,DWORD cbDestBuffer) {
+    return This->lpVtbl->ContiguousCopyTo(This,pbDestBuffer,cbDestBuffer);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_ContiguousCopyFrom(IMF2DBuffer2* This,const BYTE *pbSrcBuffer,DWORD cbSrcBuffer) {
+    return This->lpVtbl->ContiguousCopyFrom(This,pbSrcBuffer,cbSrcBuffer);
+}
+/*** IMF2DBuffer2 methods ***/
+static FORCEINLINE HRESULT IMF2DBuffer2_Lock2DSize(IMF2DBuffer2* This,MF2DBuffer_LockFlags lockFlags,BYTE **ppbScanline0,LONG *plPitch,BYTE **ppbBufferStart,DWORD *pcbBufferLength) {
+    return This->lpVtbl->Lock2DSize(This,lockFlags,ppbScanline0,plPitch,ppbBufferStart,pcbBufferLength);
+}
+static FORCEINLINE HRESULT IMF2DBuffer2_Copy2DTo(IMF2DBuffer2* This,IMF2DBuffer2 *pDestBuffer) {
+    return This->lpVtbl->Copy2DTo(This,pDestBuffer);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMF2DBuffer2_Lock2DSize_Proxy(
+    IMF2DBuffer2* This,
+    MF2DBuffer_LockFlags lockFlags,
+    BYTE **ppbScanline0,
+    LONG *plPitch,
+    BYTE **ppbBufferStart,
+    DWORD *pcbBufferLength);
+void __RPC_STUB IMF2DBuffer2_Lock2DSize_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMF2DBuffer2_Copy2DTo_Proxy(
+    IMF2DBuffer2* This,
+    IMF2DBuffer2 *pDestBuffer);
+void __RPC_STUB IMF2DBuffer2_Copy2DTo_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMF2DBuffer2_INTERFACE_DEFINED__ */
+
+
+/*****************************************************************************
+ * IMFDXGIBuffer interface
+ */
+#ifndef __IMFDXGIBuffer_INTERFACE_DEFINED__
+#define __IMFDXGIBuffer_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFDXGIBuffer, 0xe7174cfa, 0x1c9e, 0x48b1, 0x88,0x66, 0x62,0x62,0x26,0xbf,0xc2,0x58);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("e7174cfa-1c9e-48b1-8866-626226bfc258")
+IMFDXGIBuffer : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE GetResource(
+        REFIID riid,
+        LPVOID *ppvObject) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetSubresourceIndex(
+        UINT *puSubresource) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetUnknown(
+        REFIID guid,
+        REFIID riid,
+        LPVOID *ppvObject) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetUnknown(
+        REFIID guid,
+        IUnknown *pUnkData) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFDXGIBuffer, 0xe7174cfa, 0x1c9e, 0x48b1, 0x88,0x66, 0x62,0x62,0x26,0xbf,0xc2,0x58)
+#endif
+#else
+typedef struct IMFDXGIBufferVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFDXGIBuffer* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFDXGIBuffer* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFDXGIBuffer* This);
+
+    /*** IMFDXGIBuffer methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetResource)(
+        IMFDXGIBuffer* This,
+        REFIID riid,
+        LPVOID *ppvObject);
+
+    HRESULT (STDMETHODCALLTYPE *GetSubresourceIndex)(
+        IMFDXGIBuffer* This,
+        UINT *puSubresource);
+
+    HRESULT (STDMETHODCALLTYPE *GetUnknown)(
+        IMFDXGIBuffer* This,
+        REFIID guid,
+        REFIID riid,
+        LPVOID *ppvObject);
+
+    HRESULT (STDMETHODCALLTYPE *SetUnknown)(
+        IMFDXGIBuffer* This,
+        REFIID guid,
+        IUnknown *pUnkData);
+
+    END_INTERFACE
+} IMFDXGIBufferVtbl;
+interface IMFDXGIBuffer {
+    CONST_VTBL IMFDXGIBufferVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFDXGIBuffer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFDXGIBuffer_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFDXGIBuffer_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFDXGIBuffer methods ***/
+#define IMFDXGIBuffer_GetResource(This,riid,ppvObject) (This)->lpVtbl->GetResource(This,riid,ppvObject)
+#define IMFDXGIBuffer_GetSubresourceIndex(This,puSubresource) (This)->lpVtbl->GetSubresourceIndex(This,puSubresource)
+#define IMFDXGIBuffer_GetUnknown(This,guid,riid,ppvObject) (This)->lpVtbl->GetUnknown(This,guid,riid,ppvObject)
+#define IMFDXGIBuffer_SetUnknown(This,guid,pUnkData) (This)->lpVtbl->SetUnknown(This,guid,pUnkData)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFDXGIBuffer_QueryInterface(IMFDXGIBuffer* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFDXGIBuffer_AddRef(IMFDXGIBuffer* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFDXGIBuffer_Release(IMFDXGIBuffer* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFDXGIBuffer methods ***/
+static FORCEINLINE HRESULT IMFDXGIBuffer_GetResource(IMFDXGIBuffer* This,REFIID riid,LPVOID *ppvObject) {
+    return This->lpVtbl->GetResource(This,riid,ppvObject);
+}
+static FORCEINLINE HRESULT IMFDXGIBuffer_GetSubresourceIndex(IMFDXGIBuffer* This,UINT *puSubresource) {
+    return This->lpVtbl->GetSubresourceIndex(This,puSubresource);
+}
+static FORCEINLINE HRESULT IMFDXGIBuffer_GetUnknown(IMFDXGIBuffer* This,REFIID guid,REFIID riid,LPVOID *ppvObject) {
+    return This->lpVtbl->GetUnknown(This,guid,riid,ppvObject);
+}
+static FORCEINLINE HRESULT IMFDXGIBuffer_SetUnknown(IMFDXGIBuffer* This,REFIID guid,IUnknown *pUnkData) {
+    return This->lpVtbl->SetUnknown(This,guid,pUnkData);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFDXGIBuffer_GetResource_Proxy(
+    IMFDXGIBuffer* This,
+    REFIID riid,
+    LPVOID *ppvObject);
+void __RPC_STUB IMFDXGIBuffer_GetResource_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIBuffer_GetSubresourceIndex_Proxy(
+    IMFDXGIBuffer* This,
+    UINT *puSubresource);
+void __RPC_STUB IMFDXGIBuffer_GetSubresourceIndex_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIBuffer_GetUnknown_Proxy(
+    IMFDXGIBuffer* This,
+    REFIID guid,
+    REFIID riid,
+    LPVOID *ppvObject);
+void __RPC_STUB IMFDXGIBuffer_GetUnknown_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIBuffer_SetUnknown_Proxy(
+    IMFDXGIBuffer* This,
+    REFIID guid,
+    IUnknown *pUnkData);
+void __RPC_STUB IMFDXGIBuffer_SetUnknown_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFDXGIBuffer_INTERFACE_DEFINED__ */
+
+
 /*****************************************************************************
  * IMFMediaType interface
  */
@@ -2314,10 +2715,14 @@ void __RPC_STUB IMFMediaType_FreeRepresentation_Stub(
 
 #endif  /* __IMFMediaType_INTERFACE_DEFINED__ */
 
-#define MF_MEDIATYPE_EQUAL_MAJOR_TYPES          0x00000001
-#define MF_MEDIATYPE_EQUAL_FORMAT_TYPES         0x00000002
-#define MF_MEDIATYPE_EQUAL_FORMAT_DATA          0x00000004
-#define MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA     0x00000008
+
+#define MF_MEDIATYPE_EQUAL_MAJOR_TYPES 0x00000001
+#define MF_MEDIATYPE_EQUAL_FORMAT_TYPES 0x00000002
+#define MF_MEDIATYPE_EQUAL_FORMAT_DATA 0x00000004
+#define MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA 0x00000008
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 /*****************************************************************************
  * IMFAudioMediaType interface
  */
@@ -2721,58 +3126,39 @@ void __RPC_STUB IMFAudioMediaType_GetAudioFormat_Stub(
 
 #endif  /* __IMFAudioMediaType_INTERFACE_DEFINED__ */
 
-typedef struct __WIDL_mmreg_h_generated_name_00000001 {
+
+#ifndef _WINGDI_
+typedef DWORD RGBQUAD;
+
+typedef struct __WIDL_mfobjects_generated_name_00000014 {
+    DWORD biSize;
+    LONG biWidth;
+    LONG biHeight;
+    WORD biPlanes;
+    WORD biBitCount;
+    DWORD biCompression;
+    DWORD biSizeImage;
+    LONG biXPelsPerMeter;
+    LONG biYPelsPerMeter;
+    DWORD biClrUsed;
+    DWORD biClrImportant;
+} BITMAPINFOHEADER;
+
+typedef struct __WIDL_mfobjects_generated_name_00000015 {
+    BITMAPINFOHEADER bmiHeader;
+    RGBQUAD bmiColors[1];
+} BITMAPINFO;
+#endif
+
+typedef struct __WIDL_mfobjects_generated_name_00000016 {
     GUID guidMajorType;
     GUID guidSubtype;
 } MFT_REGISTER_TYPE_INFO;
-typedef enum _MFVideoFlags {
-    MFVideoFlag_PAD_TO_Mask = 0x1 | 0x2,
-    MFVideoFlag_PAD_TO_None = 0 * 0x1,
-    MFVideoFlag_PAD_TO_4x3 = 1 * 0x1,
-    MFVideoFlag_PAD_TO_16x9 = 2 * 0x1,
-    MFVideoFlag_SrcContentHintMask = (0x4 | 0x8) | 0x10,
-    MFVideoFlag_SrcContentHintNone = 0 * 0x4,
-    MFVideoFlag_SrcContentHint16x9 = 1 * 0x4,
-    MFVideoFlag_SrcContentHint235_1 = 2 * 0x4,
-    MFVideoFlag_AnalogProtected = 0x20,
-    MFVideoFlag_DigitallyProtected = 0x40,
-    MFVideoFlag_ProgressiveContent = 0x80,
-    MFVideoFlag_FieldRepeatCountMask = (0x100 | 0x200) | 0x400,
-    MFVideoFlag_FieldRepeatCountShift = 8,
-    MFVideoFlag_ProgressiveSeqReset = 0x800,
-    MFVideoFlag_PanScanEnabled = 0x20000,
-    MFVideoFlag_LowerFieldFirst = 0x40000,
-    MFVideoFlag_BottomUpLinearRep = 0x80000,
-    MFVideoFlags_DXVASurface = 0x100000,
-    MFVideoFlags_RenderTargetSurface = 0x400000,
-    MFVideoFlags_ForceQWORD = 0x7fffffff
-} MFVideoFlags;
-typedef struct _MFRatio {
-    DWORD Numerator;
-    DWORD Denominator;
-} MFRatio;
-typedef struct _MFOffset {
-    WORD fract;
-    short value;
-} MFOffset;
-typedef struct _MFVideoArea {
-    MFOffset OffsetX;
-    MFOffset OffsetY;
-    SIZE Area;
-} MFVideoArea;
-typedef enum _MFVideoChromaSubsampling {
-    MFVideoChromaSubsampling_Unknown = 0,
-    MFVideoChromaSubsampling_ProgressiveChroma = 0x8,
-    MFVideoChromaSubsampling_Horizontally_Cosited = 0x4,
-    MFVideoChromaSubsampling_Vertically_Cosited = 0x2,
-    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 0x1,
-    MFVideoChromaSubsampling_MPEG2 = MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_MPEG1 = MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_DV_PAL = MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited,
-    MFVideoChromaSubsampling_Cosited = (MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited) | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_Last = MFVideoChromaSubsampling_Cosited + 1,
-    MFVideoChromaSubsampling_ForceDWORD = 0x7fffffff
-} MFVideoChromaSubsampling;
+#endif
+#ifndef _MFVIDEOFORMAT_
+#define _MFVIDEOFORMAT_
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 typedef enum _MFVideoInterlaceMode {
     MFVideoInterlace_Unknown = 0,
     MFVideoInterlace_Progressive = 2,
@@ -2784,6 +3170,10 @@ typedef enum _MFVideoInterlaceMode {
     MFVideoInterlace_Last = 8,
     MFVideoInterlace_ForceDWORD = 0x7fffffff
 } MFVideoInterlaceMode;
+
+#define MFVideoInterlace_FieldSingleUpperFirst MFVideoInterlace_FieldSingleUpper
+#define MFVideoInterlace_FieldSingleLowerFirst MFVideoInterlace_FieldSingleLower
+
 typedef enum _MFVideoTransferFunction {
     MFVideoTransFunc_Unknown = 0,
     MFVideoTransFunc_10 = 1,
@@ -2794,20 +3184,10 @@ typedef enum _MFVideoTransferFunction {
     MFVideoTransFunc_240M = 6,
     MFVideoTransFunc_sRGB = 7,
     MFVideoTransFunc_28 = 8,
-    MFVideoTransFunc_Log_100 = 9,
-    MFVideoTransFunc_Log_316 = 10,
-    MFVideoTransFunc_709_sym = 11,
-    MFVideoTransFunc_Last = 12,
+    MFVideoTransFunc_Last = 9,
     MFVideoTransFunc_ForceDWORD = 0x7fffffff
 } MFVideoTransferFunction;
-typedef enum _MFVideoTransferMatrix {
-    MFVideoTransferMatrix_Unknown = 0,
-    MFVideoTransferMatrix_BT709 = 1,
-    MFVideoTransferMatrix_BT601 = 2,
-    MFVideoTransferMatrix_SMPTE240M = 3,
-    MFVideoTransferMatrix_Last = 4,
-    MFVideoTransferMatrix_ForceDWORD = 0x7fffffff
-} MFVideoTransferMatrix;
+
 typedef enum _MFVideoPrimaries {
     MFVideoPrimaries_Unknown = 0,
     MFVideoPrimaries_reserved = 1,
@@ -2821,6 +3201,7 @@ typedef enum _MFVideoPrimaries {
     MFVideoPrimaries_Last = 9,
     MFVideoPrimaries_ForceDWORD = 0x7fffffff
 } MFVideoPrimaries;
+
 typedef enum _MFVideoLighting {
     MFVideoLighting_Unknown = 0,
     MFVideoLighting_bright = 1,
@@ -2830,6 +3211,30 @@ typedef enum _MFVideoLighting {
     MFVideoLighting_Last = 5,
     MFVideoLighting_ForceDWORD = 0x7fffffff
 } MFVideoLighting;
+
+typedef enum _MFVideoTransferMatrix {
+    MFVideoTransferMatrix_Unknown = 0,
+    MFVideoTransferMatrix_BT709 = 1,
+    MFVideoTransferMatrix_BT601 = 2,
+    MFVideoTransferMatrix_SMPTE240M = 3,
+    MFVideoTransferMatrix_Last = 4,
+    MFVideoTransferMatrix_ForceDWORD = 0x7fffffff
+} MFVideoTransferMatrix;
+
+typedef enum _MFVideoChromaSubsampling {
+    MFVideoChromaSubsampling_Unknown = 0,
+    MFVideoChromaSubsampling_ProgressiveChroma = 0x8,
+    MFVideoChromaSubsampling_Horizontally_Cosited = 0x4,
+    MFVideoChromaSubsampling_Vertically_Cosited = 0x2,
+    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 0x1,
+    MFVideoChromaSubsampling_MPEG2 = MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+    MFVideoChromaSubsampling_MPEG1 = MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+    MFVideoChromaSubsampling_DV_PAL = MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited,
+    MFVideoChromaSubsampling_Cosited = (MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited) | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+    MFVideoChromaSubsampling_Last = MFVideoChromaSubsampling_Cosited + 1,
+    MFVideoChromaSubsampling_ForceDWORD = 0x7fffffff
+} MFVideoChromaSubsampling;
+
 typedef enum _MFNominalRange {
     MFNominalRange_Unknown = 0,
     MFNominalRange_Normal = 1,
@@ -2837,8 +3242,54 @@ typedef enum _MFNominalRange {
     MFNominalRange_0_255 = 1,
     MFNominalRange_16_235 = 2,
     MFNominalRange_48_208 = 3,
-    MFNominalRange_64_127 = 4
+    MFNominalRange_Last = 4,
+    MFNominalRange_ForceDWORD = 0x7fffffff
 } MFNominalRange;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+typedef enum _MFVideoFlags {
+    MFVideoFlag_PAD_TO_Mask = 0x1 | 0x2,
+    MFVideoFlag_PAD_TO_None = 0 * 0x1,
+    MFVideoFlag_PAD_TO_4x3 = 1 * 0x1,
+    MFVideoFlag_PAD_TO_16x9 = 2 * 0x1,
+    MFVideoFlag_SrcContentHintMask = (0x4 | 0x8) | 0x10,
+    MFVideoFlag_SrcContentHintNone = 0 * 0x4,
+    MFVideoFlag_SrcContentHint16x9 = 1 * 0x4,
+    MFVideoFlag_SrcContentHint235_1 = 2 * 0x4,
+    MFVideoFlag_AnalogProtected = 0x20,
+    MFVideoFlag_DigitallyProtected = 0x40,
+    MFVideoFlag_ProgressiveContent = 0x80,
+    MFVideoFlag_FieldRepeatCountMask = (0x100 | 0x200) | 0x400,
+    MFVideoFlag_FieldRepeatCountShift = 8,
+    MFVideoFlag_ProgressiveSeqReset = 0x800,
+    MFVideoFlag_PanScanEnabled = 0x20000,
+    MFVideoFlag_LowerFieldFirst = 0x40000,
+    MFVideoFlag_BottomUpLinearRep = 0x80000,
+    MFVideoFlags_DXVASurface = 0x100000,
+    MFVideoFlags_RenderTargetSurface = 0x400000,
+    MFVideoFlags_ForceQWORD = 0x7fffffff
+} MFVideoFlags;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+typedef struct _MFRatio {
+    DWORD Numerator;
+    DWORD Denominator;
+} MFRatio;
+
+typedef struct _MFOffset {
+    WORD fract;
+    short value;
+} MFOffset;
+typedef struct _MFVideoArea {
+    MFOffset OffsetX;
+    MFOffset OffsetY;
+    SIZE Area;
+} MFVideoArea;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 typedef struct _MFVideoInfo {
     DWORD dwWidth;
     DWORD dwHeight;
@@ -2856,32 +3307,42 @@ typedef struct _MFVideoInfo {
     MFVideoArea PanScanAperture;
     UINT64 VideoFlags;
 } MFVideoInfo;
-typedef struct _MFVideoCompressedInfo {
-    LONGLONG AvgBitrate;
-    LONGLONG AvgBitErrorRate;
-    DWORD MaxKeyFrameSpacing;
-} MFVideoCompressedInfo;
-typedef struct _MFARGB {
-    BYTE rgbBlue;
-    BYTE rgbGreen;
-    BYTE rgbRed;
-    BYTE rgbAlpha;
-} MFARGB;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 typedef struct __MFAYUVSample {
     BYTE bCrValue;
     BYTE bCbValue;
     BYTE bYValue;
     BYTE bSampleAlpha8;
 } MFAYUVSample;
+
+typedef struct _MFARGB {
+    BYTE rgbBlue;
+    BYTE rgbGreen;
+    BYTE rgbRed;
+    BYTE rgbAlpha;
+} MFARGB;
+
 typedef union _MFPaletteEntry {
     MFARGB ARGB;
     MFAYUVSample AYCbCr;
 } MFPaletteEntry;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 typedef struct _MFVideoSurfaceInfo {
     DWORD Format;
     DWORD PaletteEntries;
     MFPaletteEntry Palette[1];
 } MFVideoSurfaceInfo;
+
+typedef struct _MFVideoCompressedInfo {
+    LONGLONG AvgBitrate;
+    LONGLONG AvgBitErrorRate;
+    DWORD MaxKeyFrameSpacing;
+} MFVideoCompressedInfo;
+
 typedef struct _MFVIDEOFORMAT {
     DWORD dwSize;
     MFVideoInfo videoInfo;
@@ -2889,6 +3350,7 @@ typedef struct _MFVIDEOFORMAT {
     MFVideoCompressedInfo compressedInfo;
     MFVideoSurfaceInfo surfaceInfo;
 } MFVIDEOFORMAT;
+
 typedef enum _MFStandardVideoFormat {
     MFStdVideoFormat_reserved = 0,
     MFStdVideoFormat_NTSC = 1,
@@ -2901,6 +3363,10 @@ typedef enum _MFStandardVideoFormat {
     MFStdVideoFormat_ATSC_HD1080i = 8,
     MFStdVideoFormat_ATSC_HD720p = 9
 } MFStandardVideoFormat;
+#endif
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 /*****************************************************************************
  * IMFVideoMediaType interface
  */
@@ -3329,6 +3795,9 @@ void __RPC_STUB IMFVideoMediaType_GetVideoRepresentation_Stub(
 
 #endif  /* __IMFVideoMediaType_INTERFACE_DEFINED__ */
 
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 /*****************************************************************************
  * IMFAsyncResult interface
  */
@@ -3478,6 +3947,7 @@ void __RPC_STUB IMFAsyncResult_GetObject_Stub(
 
 #endif  /* __IMFAsyncResult_INTERFACE_DEFINED__ */
 
+
 /*****************************************************************************
  * IMFAsyncCallback interface
  */
@@ -3584,104 +4054,253 @@ void __RPC_STUB IMFAsyncCallback_Invoke_Stub(
 
 #endif  /* __IMFAsyncCallback_INTERFACE_DEFINED__ */
 
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 /*****************************************************************************
- * IMFRemoteAsyncCallback interface
+ * IMFAsyncCallbackLogging interface
  */
-#ifndef __IMFRemoteAsyncCallback_INTERFACE_DEFINED__
-#define __IMFRemoteAsyncCallback_INTERFACE_DEFINED__
+#ifndef __IMFAsyncCallbackLogging_INTERFACE_DEFINED__
+#define __IMFAsyncCallbackLogging_INTERFACE_DEFINED__
 
-DEFINE_GUID(IID_IMFRemoteAsyncCallback, 0xa27003d0, 0x2354, 0x4f2a, 0x8d,0x6a, 0xab,0x7c,0xff,0x15,0x43,0x7e);
+DEFINE_GUID(IID_IMFAsyncCallbackLogging, 0xc7a4dca1, 0xf5f0, 0x47b6, 0xb9,0x2b, 0xbf,0x01,0x06,0xd2,0x57,0x91);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-MIDL_INTERFACE("a27003d0-2354-4f2a-8d6a-ab7cff15437e")
-IMFRemoteAsyncCallback : public IUnknown
+MIDL_INTERFACE("c7a4dca1-f5f0-47b6-b92b-bf0106d25791")
+IMFAsyncCallbackLogging : public IMFAsyncCallback
 {
-    virtual HRESULT STDMETHODCALLTYPE Invoke(
-        HRESULT hr,
-        IUnknown *pRemoteResult) = 0;
+    virtual void * STDMETHODCALLTYPE GetObjectPointer(
+        ) = 0;
+
+    virtual DWORD STDMETHODCALLTYPE GetObjectTag(
+        ) = 0;
 
 };
 #ifdef __CRT_UUID_DECL
-__CRT_UUID_DECL(IMFRemoteAsyncCallback, 0xa27003d0, 0x2354, 0x4f2a, 0x8d,0x6a, 0xab,0x7c,0xff,0x15,0x43,0x7e)
+__CRT_UUID_DECL(IMFAsyncCallbackLogging, 0xc7a4dca1, 0xf5f0, 0x47b6, 0xb9,0x2b, 0xbf,0x01,0x06,0xd2,0x57,0x91)
 #endif
 #else
-typedef struct IMFRemoteAsyncCallbackVtbl {
+typedef struct IMFAsyncCallbackLoggingVtbl {
     BEGIN_INTERFACE
 
     /*** IUnknown methods ***/
     HRESULT (STDMETHODCALLTYPE *QueryInterface)(
-        IMFRemoteAsyncCallback* This,
+        IMFAsyncCallbackLogging* This,
         REFIID riid,
         void **ppvObject);
 
     ULONG (STDMETHODCALLTYPE *AddRef)(
-        IMFRemoteAsyncCallback* This);
+        IMFAsyncCallbackLogging* This);
 
     ULONG (STDMETHODCALLTYPE *Release)(
-        IMFRemoteAsyncCallback* This);
+        IMFAsyncCallbackLogging* This);
+
+    /*** IMFAsyncCallback methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetParameters)(
+        IMFAsyncCallbackLogging* This,
+        DWORD *pdwFlags,
+        DWORD *pdwQueue);
 
-    /*** IMFRemoteAsyncCallback methods ***/
     HRESULT (STDMETHODCALLTYPE *Invoke)(
-        IMFRemoteAsyncCallback* This,
-        HRESULT hr,
-        IUnknown *pRemoteResult);
+        IMFAsyncCallbackLogging* This,
+        IMFAsyncResult *pAsyncResult);
+
+    /*** IMFAsyncCallbackLogging methods ***/
+    void * (STDMETHODCALLTYPE *GetObjectPointer)(
+        IMFAsyncCallbackLogging* This);
+
+    DWORD (STDMETHODCALLTYPE *GetObjectTag)(
+        IMFAsyncCallbackLogging* This);
 
     END_INTERFACE
-} IMFRemoteAsyncCallbackVtbl;
-interface IMFRemoteAsyncCallback {
-    CONST_VTBL IMFRemoteAsyncCallbackVtbl* lpVtbl;
+} IMFAsyncCallbackLoggingVtbl;
+interface IMFAsyncCallbackLogging {
+    CONST_VTBL IMFAsyncCallbackLoggingVtbl* lpVtbl;
 };
 
 #ifdef COBJMACROS
 #ifndef WIDL_C_INLINE_WRAPPERS
 /*** IUnknown methods ***/
-#define IMFRemoteAsyncCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
-#define IMFRemoteAsyncCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
-#define IMFRemoteAsyncCallback_Release(This) (This)->lpVtbl->Release(This)
-/*** IMFRemoteAsyncCallback methods ***/
-#define IMFRemoteAsyncCallback_Invoke(This,hr,pRemoteResult) (This)->lpVtbl->Invoke(This,hr,pRemoteResult)
+#define IMFAsyncCallbackLogging_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFAsyncCallbackLogging_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFAsyncCallbackLogging_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFAsyncCallback methods ***/
+#define IMFAsyncCallbackLogging_GetParameters(This,pdwFlags,pdwQueue) (This)->lpVtbl->GetParameters(This,pdwFlags,pdwQueue)
+#define IMFAsyncCallbackLogging_Invoke(This,pAsyncResult) (This)->lpVtbl->Invoke(This,pAsyncResult)
+/*** IMFAsyncCallbackLogging methods ***/
+#define IMFAsyncCallbackLogging_GetObjectPointer(This) (This)->lpVtbl->GetObjectPointer(This)
+#define IMFAsyncCallbackLogging_GetObjectTag(This) (This)->lpVtbl->GetObjectTag(This)
 #else
 /*** IUnknown methods ***/
-static FORCEINLINE HRESULT IMFRemoteAsyncCallback_QueryInterface(IMFRemoteAsyncCallback* This,REFIID riid,void **ppvObject) {
+static FORCEINLINE HRESULT IMFAsyncCallbackLogging_QueryInterface(IMFAsyncCallbackLogging* This,REFIID riid,void **ppvObject) {
     return This->lpVtbl->QueryInterface(This,riid,ppvObject);
 }
-static FORCEINLINE ULONG IMFRemoteAsyncCallback_AddRef(IMFRemoteAsyncCallback* This) {
+static FORCEINLINE ULONG IMFAsyncCallbackLogging_AddRef(IMFAsyncCallbackLogging* This) {
     return This->lpVtbl->AddRef(This);
 }
-static FORCEINLINE ULONG IMFRemoteAsyncCallback_Release(IMFRemoteAsyncCallback* This) {
+static FORCEINLINE ULONG IMFAsyncCallbackLogging_Release(IMFAsyncCallbackLogging* This) {
     return This->lpVtbl->Release(This);
 }
-/*** IMFRemoteAsyncCallback methods ***/
-static FORCEINLINE HRESULT IMFRemoteAsyncCallback_Invoke(IMFRemoteAsyncCallback* This,HRESULT hr,IUnknown *pRemoteResult) {
-    return This->lpVtbl->Invoke(This,hr,pRemoteResult);
+/*** IMFAsyncCallback methods ***/
+static FORCEINLINE HRESULT IMFAsyncCallbackLogging_GetParameters(IMFAsyncCallbackLogging* This,DWORD *pdwFlags,DWORD *pdwQueue) {
+    return This->lpVtbl->GetParameters(This,pdwFlags,pdwQueue);
+}
+static FORCEINLINE HRESULT IMFAsyncCallbackLogging_Invoke(IMFAsyncCallbackLogging* This,IMFAsyncResult *pAsyncResult) {
+    return This->lpVtbl->Invoke(This,pAsyncResult);
+}
+/*** IMFAsyncCallbackLogging methods ***/
+static FORCEINLINE void * IMFAsyncCallbackLogging_GetObjectPointer(IMFAsyncCallbackLogging* This) {
+    return This->lpVtbl->GetObjectPointer(This);
+}
+static FORCEINLINE DWORD IMFAsyncCallbackLogging_GetObjectTag(IMFAsyncCallbackLogging* This) {
+    return This->lpVtbl->GetObjectTag(This);
 }
 #endif
 #endif
 
 #endif
 
-HRESULT STDMETHODCALLTYPE IMFRemoteAsyncCallback_Invoke_Proxy(
-    IMFRemoteAsyncCallback* This,
-    HRESULT hr,
-    IUnknown *pRemoteResult);
-void __RPC_STUB IMFRemoteAsyncCallback_Invoke_Stub(
+void * STDMETHODCALLTYPE IMFAsyncCallbackLogging_GetObjectPointer_Proxy(
+    IMFAsyncCallbackLogging* This);
+void __RPC_STUB IMFAsyncCallbackLogging_GetObjectPointer_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+DWORD STDMETHODCALLTYPE IMFAsyncCallbackLogging_GetObjectTag_Proxy(
+    IMFAsyncCallbackLogging* This);
+void __RPC_STUB IMFAsyncCallbackLogging_GetObjectTag_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
 
-#endif  /* __IMFRemoteAsyncCallback_INTERFACE_DEFINED__ */
+#endif  /* __IMFAsyncCallbackLogging_INTERFACE_DEFINED__ */
+
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+#define MFASYNC_FAST_IO_PROCESSING_CALLBACK 0x00000001
+#define MFASYNC_SIGNAL_CALLBACK 0x00000002
+#define MFASYNC_BLOCKING_CALLBACK 0x00000004
+#define MFASYNC_REPLY_CALLBACK 0x00000008
+#define MFASYNC_LOCALIZE_REMOTE_CALLBACK 0x00000010
+
+#define MFASYNC_CALLBACK_QUEUE_UNDEFINED 0x00000000
+#define MFASYNC_CALLBACK_QUEUE_STANDARD 0x00000001
+#define MFASYNC_CALLBACK_QUEUE_RT 0x00000002
+#define MFASYNC_CALLBACK_QUEUE_IO 0x00000003
+#define MFASYNC_CALLBACK_QUEUE_TIMER 0x00000004
+#define MFASYNC_CALLBACK_QUEUE_MULTITHREADED 0x00000005
+#define MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION 0x00000007
+#define MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK 0xFFFF0000
+#define MFASYNC_CALLBACK_QUEUE_ALL 0xFFFFFFFF
+
+enum {
+    MEUnknown = 0,
+    MEError = 1,
+    MEExtendedType = 2,
+    MENonFatalError = 3,
+    MEGenericV1Anchor = MENonFatalError,
+    MESessionUnknown = 100,
+    MESessionTopologySet = 101,
+    MESessionTopologiesCleared = 102,
+    MESessionStarted = 103,
+    MESessionPaused = 104,
+    MESessionStopped = 105,
+    MESessionClosed = 106,
+    MESessionEnded = 107,
+    MESessionRateChanged = 108,
+    MESessionScrubSampleComplete = 109,
+    MESessionCapabilitiesChanged = 110,
+    MESessionTopologyStatus = 111,
+    MESessionNotifyPresentationTime = 112,
+    MENewPresentation = 113,
+    MELicenseAcquisitionStart = 114,
+    MELicenseAcquisitionCompleted = 115,
+    MEIndividualizationStart = 116,
+    MEIndividualizationCompleted = 117,
+    MEEnablerProgress = 118,
+    MEEnablerCompleted = 119,
+    MEPolicyError = 120,
+    MEPolicyReport = 121,
+    MEBufferingStarted = 122,
+    MEBufferingStopped = 123,
+    MEConnectStart = 124,
+    MEConnectEnd = 125,
+    MEReconnectStart = 126,
+    MEReconnectEnd = 127,
+    MERendererEvent = 128,
+    MESessionStreamSinkFormatChanged = 129,
+    MESessionV1Anchor = MESessionStreamSinkFormatChanged,
+    MESourceUnknown = 200,
+    MESourceStarted = 201,
+    MEStreamStarted = 202,
+    MESourceSeeked = 203,
+    MEStreamSeeked = 204,
+    MENewStream = 205,
+    MEUpdatedStream = 206,
+    MESourceStopped = 207,
+    MEStreamStopped = 208,
+    MESourcePaused = 209,
+    MEStreamPaused = 210,
+    MEEndOfPresentation = 211,
+    MEEndOfStream = 212,
+    MEMediaSample = 213,
+    MEStreamTick = 214,
+    MEStreamThinMode = 215,
+    MEStreamFormatChanged = 216,
+    MESourceRateChanged = 217,
+    MEEndOfPresentationSegment = 218,
+    MESourceCharacteristicsChanged = 219,
+    MESourceRateChangeRequested = 220,
+    MESourceMetadataChanged = 221,
+    MESequencerSourceTopologyUpdated = 222,
+    MESourceV1Anchor = MESequencerSourceTopologyUpdated,
+    MESinkUnknown = 300,
+    MEStreamSinkStarted = 301,
+    MEStreamSinkStopped = 302,
+    MEStreamSinkPaused = 303,
+    MEStreamSinkRateChanged = 304,
+    MEStreamSinkRequestSample = 305,
+    MEStreamSinkMarker = 306,
+    MEStreamSinkPrerolled = 307,
+    MEStreamSinkScrubSampleComplete = 308,
+    MEStreamSinkFormatChanged = 309,
+    MEStreamSinkDeviceChanged = 310,
+    MEQualityNotify = 311,
+    MESinkInvalidated = 312,
+    MEAudioSessionNameChanged = 313,
+    MEAudioSessionVolumeChanged = 314,
+    MEAudioSessionDeviceRemoved = 315,
+    MEAudioSessionServerShutdown = 316,
+    MEAudioSessionGroupingParamChanged = 317,
+    MEAudioSessionIconChanged = 318,
+    MEAudioSessionFormatChanged = 319,
+    MEAudioSessionDisconnected = 320,
+    MEAudioSessionExclusiveModeOverride = 321,
+    MESinkV1Anchor = MEAudioSessionExclusiveModeOverride,
+    METrustUnknown = 400,
+    MEPolicyChanged = 401,
+    MEContentProtectionMessage = 402,
+    MEPolicySet = 403,
+    METrustV1Anchor = MEPolicySet,
+    MEWMDRMLicenseBackupCompleted = 500,
+    MEWMDRMLicenseBackupProgress = 501,
+    MEWMDRMLicenseRestoreCompleted = 502,
+    MEWMDRMLicenseRestoreProgress = 503,
+    MEWMDRMLicenseAcquisitionCompleted = 506,
+    MEWMDRMIndividualizationCompleted = 508,
+    MEWMDRMIndividualizationProgress = 513,
+    MEWMDRMProximityCompleted = 514,
+    MEWMDRMLicenseStoreCleaned = 515,
+    MEWMDRMRevocationDownloadCompleted = 516,
+    MEWMDRMV1Anchor = MEWMDRMRevocationDownloadCompleted,
+    MEReservedMax = 10000
+};
+
 
-#define MFASYNC_FAST_IO_PROCESSING_CALLBACK  0x0001
-#define MFASYNC_SIGNAL_CALLBACK              0x0002
-#define MFASYNC_CALLBACK_QUEUE_UNDEFINED      0x00000000
-#define MFASYNC_CALLBACK_QUEUE_STANDARD       0x00000001
-#define MFASYNC_CALLBACK_QUEUE_RT             0x00000002
-#define MFASYNC_CALLBACK_QUEUE_IO             0x00000003
-#define MFASYNC_CALLBACK_QUEUE_TIMER          0x00000004
-#define MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION  0x00000007
-#define MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK   0xffff0000
-#define MFASYNC_CALLBACK_QUEUE_ALL            0xffffffff
 typedef DWORD MediaEventType;
+
 /*****************************************************************************
  * IMFMediaEvent interface
  */
@@ -4098,6 +4717,15 @@ void __RPC_STUB IMFMediaEvent_GetValue_Stub(
 
 #endif  /* __IMFMediaEvent_INTERFACE_DEFINED__ */
 
+
+#define MF_EVENT_FLAG_NO_WAIT 0x00000001
+
+#ifndef __IMFRemoteAsyncCallback_FWD_DEFINED__
+#define __IMFRemoteAsyncCallback_FWD_DEFINED__
+typedef interface IMFRemoteAsyncCallback IMFRemoteAsyncCallback;
+#endif
+
+
 /*****************************************************************************
  * IMFMediaEventGenerator interface
  */
@@ -4273,37 +4901,132 @@ HRESULT __RPC_STUB IMFMediaEventGenerator_EndGetEvent_Stub(
 
 #endif  /* __IMFMediaEventGenerator_INTERFACE_DEFINED__ */
 
-typedef enum _MFBYTESTREAM_SEEK_ORIGIN {
-    msoBegin = 0,
-    msoCurrent = 1
-} MFBYTESTREAM_SEEK_ORIGIN;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 /*****************************************************************************
- * IMFByteStream interface
+ * IMFRemoteAsyncCallback interface
  */
-#ifndef __IMFByteStream_INTERFACE_DEFINED__
-#define __IMFByteStream_INTERFACE_DEFINED__
+#ifndef __IMFRemoteAsyncCallback_INTERFACE_DEFINED__
+#define __IMFRemoteAsyncCallback_INTERFACE_DEFINED__
 
-DEFINE_GUID(IID_IMFByteStream, 0xad4c1b00, 0x4bf7, 0x422f, 0x91,0x75, 0x75,0x66,0x93,0xd9,0x13,0x0d);
+DEFINE_GUID(IID_IMFRemoteAsyncCallback, 0xa27003d0, 0x2354, 0x4f2a, 0x8d,0x6a, 0xab,0x7c,0xff,0x15,0x43,0x7e);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-MIDL_INTERFACE("ad4c1b00-4bf7-422f-9175-756693d9130d")
-IMFByteStream : public IUnknown
+MIDL_INTERFACE("a27003d0-2354-4f2a-8d6a-ab7cff15437e")
+IMFRemoteAsyncCallback : public IUnknown
 {
-    virtual HRESULT STDMETHODCALLTYPE GetCapabilities(
-        DWORD *pdwCapabilities) = 0;
+    virtual HRESULT STDMETHODCALLTYPE Invoke(
+        HRESULT hr,
+        IUnknown *pRemoteResult) = 0;
 
-    virtual HRESULT STDMETHODCALLTYPE GetLength(
-        QWORD *pqwLength) = 0;
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFRemoteAsyncCallback, 0xa27003d0, 0x2354, 0x4f2a, 0x8d,0x6a, 0xab,0x7c,0xff,0x15,0x43,0x7e)
+#endif
+#else
+typedef struct IMFRemoteAsyncCallbackVtbl {
+    BEGIN_INTERFACE
 
-    virtual HRESULT STDMETHODCALLTYPE SetLength(
-        QWORD qwLength) = 0;
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFRemoteAsyncCallback* This,
+        REFIID riid,
+        void **ppvObject);
 
-    virtual HRESULT STDMETHODCALLTYPE GetCurrentPosition(
-        QWORD *pqwPosition) = 0;
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFRemoteAsyncCallback* This);
 
-    virtual HRESULT STDMETHODCALLTYPE SetCurrentPosition(
-        QWORD qwPosition) = 0;
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFRemoteAsyncCallback* This);
 
-    virtual HRESULT STDMETHODCALLTYPE IsEndOfStream(
+    /*** IMFRemoteAsyncCallback methods ***/
+    HRESULT (STDMETHODCALLTYPE *Invoke)(
+        IMFRemoteAsyncCallback* This,
+        HRESULT hr,
+        IUnknown *pRemoteResult);
+
+    END_INTERFACE
+} IMFRemoteAsyncCallbackVtbl;
+interface IMFRemoteAsyncCallback {
+    CONST_VTBL IMFRemoteAsyncCallbackVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFRemoteAsyncCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFRemoteAsyncCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFRemoteAsyncCallback_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFRemoteAsyncCallback methods ***/
+#define IMFRemoteAsyncCallback_Invoke(This,hr,pRemoteResult) (This)->lpVtbl->Invoke(This,hr,pRemoteResult)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFRemoteAsyncCallback_QueryInterface(IMFRemoteAsyncCallback* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFRemoteAsyncCallback_AddRef(IMFRemoteAsyncCallback* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFRemoteAsyncCallback_Release(IMFRemoteAsyncCallback* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFRemoteAsyncCallback methods ***/
+static FORCEINLINE HRESULT IMFRemoteAsyncCallback_Invoke(IMFRemoteAsyncCallback* This,HRESULT hr,IUnknown *pRemoteResult) {
+    return This->lpVtbl->Invoke(This,hr,pRemoteResult);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFRemoteAsyncCallback_Invoke_Proxy(
+    IMFRemoteAsyncCallback* This,
+    HRESULT hr,
+    IUnknown *pRemoteResult);
+void __RPC_STUB IMFRemoteAsyncCallback_Invoke_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFRemoteAsyncCallback_INTERFACE_DEFINED__ */
+
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+
+typedef enum _MFBYTESTREAM_SEEK_ORIGIN {
+    msoBegin = 0,
+    msoCurrent = 1
+} MFBYTESTREAM_SEEK_ORIGIN;
+
+/*****************************************************************************
+ * IMFByteStream interface
+ */
+#ifndef __IMFByteStream_INTERFACE_DEFINED__
+#define __IMFByteStream_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFByteStream, 0xad4c1b00, 0x4bf7, 0x422f, 0x91,0x75, 0x75,0x66,0x93,0xd9,0x13,0x0d);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("ad4c1b00-4bf7-422f-9175-756693d9130d")
+IMFByteStream : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE GetCapabilities(
+        DWORD *pdwCapabilities) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetLength(
+        QWORD *pqwLength) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetLength(
+        QWORD qwLength) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetCurrentPosition(
+        QWORD *pqwPosition) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetCurrentPosition(
+        QWORD qwPosition) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE IsEndOfStream(
         WINBOOL *pfEndOfStream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Read(
@@ -4580,6 +5303,76 @@ void __RPC_STUB IMFByteStream_IsEndOfStream_Stub(
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_Read_Proxy(
+    IMFByteStream* This,
+    BYTE *pb,
+    ULONG cb,
+    ULONG *pcbRead);
+void __RPC_STUB IMFByteStream_Read_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_RemoteBeginRead_Proxy(
+    IMFByteStream* This,
+    ULONG cb,
+    IMFRemoteAsyncCallback *pCallback);
+void __RPC_STUB IMFByteStream_RemoteBeginRead_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_RemoteEndRead_Proxy(
+    IMFByteStream* This,
+    IUnknown *punkResult,
+    BYTE *pb,
+    ULONG cb,
+    ULONG *pcbRead);
+void __RPC_STUB IMFByteStream_RemoteEndRead_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_Write_Proxy(
+    IMFByteStream* This,
+    const BYTE *pb,
+    ULONG cb,
+    ULONG *pcbWritten);
+void __RPC_STUB IMFByteStream_Write_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_RemoteBeginWrite_Proxy(
+    IMFByteStream* This,
+    const BYTE *pb,
+    ULONG cb,
+    IMFRemoteAsyncCallback *pCallback);
+void __RPC_STUB IMFByteStream_RemoteBeginWrite_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_RemoteEndWrite_Proxy(
+    IMFByteStream* This,
+    IUnknown *punkResult,
+    ULONG *pcbWritten);
+void __RPC_STUB IMFByteStream_RemoteEndWrite_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFByteStream_Seek_Proxy(
+    IMFByteStream* This,
+    MFBYTESTREAM_SEEK_ORIGIN SeekOrigin,
+    LONGLONG llSeekOffset,
+    DWORD dwSeekFlags,
+    QWORD *pqwCurrentPosition);
+void __RPC_STUB IMFByteStream_Seek_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
 HRESULT STDMETHODCALLTYPE IMFByteStream_Flush_Proxy(
     IMFByteStream* This);
 void __RPC_STUB IMFByteStream_Flush_Stub(
@@ -4594,41 +5387,322 @@ void __RPC_STUB IMFByteStream_Close_Stub(
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
+HRESULT CALLBACK IMFByteStream_BeginRead_Proxy(
+    IMFByteStream* This,
+    BYTE *pb,
+    ULONG cb,
+    IMFAsyncCallback *pCallback,
+    IUnknown *punkState);
+HRESULT __RPC_STUB IMFByteStream_BeginRead_Stub(
+    IMFByteStream* This,
+    ULONG cb,
+    IMFRemoteAsyncCallback *pCallback);
+HRESULT CALLBACK IMFByteStream_EndRead_Proxy(
+    IMFByteStream* This,
+    IMFAsyncResult *pResult,
+    ULONG *pcbRead);
+HRESULT __RPC_STUB IMFByteStream_EndRead_Stub(
+    IMFByteStream* This,
+    IUnknown *punkResult,
+    BYTE *pb,
+    ULONG cb,
+    ULONG *pcbRead);
+HRESULT CALLBACK IMFByteStream_BeginWrite_Proxy(
+    IMFByteStream* This,
+    const BYTE *pb,
+    ULONG cb,
+    IMFAsyncCallback *pCallback,
+    IUnknown *punkState);
+HRESULT __RPC_STUB IMFByteStream_BeginWrite_Stub(
+    IMFByteStream* This,
+    const BYTE *pb,
+    ULONG cb,
+    IMFRemoteAsyncCallback *pCallback);
+HRESULT CALLBACK IMFByteStream_EndWrite_Proxy(
+    IMFByteStream* This,
+    IMFAsyncResult *pResult,
+    ULONG *pcbWritten);
+HRESULT __RPC_STUB IMFByteStream_EndWrite_Stub(
+    IMFByteStream* This,
+    IUnknown *punkResult,
+    ULONG *pcbWritten);
 
 #endif  /* __IMFByteStream_INTERFACE_DEFINED__ */
 
-#define MFBYTESTREAM_IS_READABLE                0x00000001
-#define MFBYTESTREAM_IS_WRITABLE                0x00000002
-#define MFBYTESTREAM_IS_SEEKABLE                0x00000004
-#define MFBYTESTREAM_IS_REMOTE                  0x00000008
-#define MFBYTESTREAM_IS_DIRECTORY               0x00000080
-#define MFBYTESTREAM_HAS_SLOW_SEEK              0x00000100
-#define MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED    0x00000200
-#define MFBYTESTREAM_SHARE_WRITE                0x00000400
-#define MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO  0x00000001
-EXTERN_GUID(MF_BYTESTREAM_ORIGIN_NAME,        0xfc358288,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-EXTERN_GUID(MF_BYTESTREAM_CONTENT_TYPE,       0xfc358289,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-EXTERN_GUID(MF_BYTESTREAM_DURATION,           0xfc35828a,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-EXTERN_GUID(MF_BYTESTREAM_LAST_MODIFIED_TIME, 0xfc35828b,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-EXTERN_GUID(MF_BYTESTREAM_IFO_FILE_URI,       0xfc35828c,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-EXTERN_GUID(MF_BYTESTREAM_DLNA_PROFILE_ID,    0xfc35828d,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);
-typedef enum MF_FILE_ACCESSMODE {
+
+#define MFBYTESTREAM_IS_READABLE 0x00000001
+#define MFBYTESTREAM_IS_WRITABLE 0x00000002
+#define MFBYTESTREAM_IS_SEEKABLE 0x00000004
+#define MFBYTESTREAM_IS_REMOTE 0x00000008
+#define MFBYTESTREAM_IS_DIRECTORY 0x00000080
+#define MFBYTESTREAM_HAS_SLOW_SEEK 0x00000100
+#define MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED 0x00000200
+#if WINVER >= _WIN32_WINNT_WIN7
+#define MFBYTESTREAM_SHARE_WRITE 0x00000400
+#endif
+#if WINVER >= _WIN32_WINNT_WIN8
+#define MFBYTESTREAM_DOES_NOT_USE_NETWORK 0x00000800
+#endif
+
+#define MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO 0x00000001
+
+EXTERN_GUID( MF_BYTESTREAM_ORIGIN_NAME, 0xfc358288, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+EXTERN_GUID( MF_BYTESTREAM_CONTENT_TYPE, 0xfc358289, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+EXTERN_GUID( MF_BYTESTREAM_DURATION, 0xfc35828a, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+EXTERN_GUID( MF_BYTESTREAM_LAST_MODIFIED_TIME, 0xfc35828b, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+#if (WINVER >= _WIN32_WINNT_WIN7)
+EXTERN_GUID( MF_BYTESTREAM_IFO_FILE_URI, 0xfc35828c, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+EXTERN_GUID( MF_BYTESTREAM_DLNA_PROFILE_ID, 0xfc35828d, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);
+EXTERN_GUID( MF_BYTESTREAM_EFFECTIVE_URL, 0x9afa0209, 0x89d1, 0x42af, 0x84, 0x56, 0x1d, 0xe6, 0xb5, 0x62, 0xd6, 0x91);
+EXTERN_GUID( MF_BYTESTREAM_TRANSCODED, 0xb6c5c282, 0x4dc9, 0x4db9, 0xab, 0x48, 0xcf, 0x3b, 0x6d, 0x8b, 0xc5, 0xe0 );
+#endif
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
+EXTERN_GUID(CLSID_MFByteStreamProxyClassFactory, 0x770e8e77, 0x4916, 0x441c, 0xa9, 0xa7, 0xb3, 0x42, 0xd0, 0xee, 0xbc, 0x71 );
+
+/*****************************************************************************
+ * IMFByteStreamProxyClassFactory interface
+ */
+#ifndef __IMFByteStreamProxyClassFactory_INTERFACE_DEFINED__
+#define __IMFByteStreamProxyClassFactory_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFByteStreamProxyClassFactory, 0xa6b43f84, 0x5c0a, 0x42e8, 0xa4,0x4d, 0xb1,0x85,0x7a,0x76,0x99,0x2f);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("a6b43f84-5c0a-42e8-a44d-b1857a76992f")
+IMFByteStreamProxyClassFactory : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE CreateByteStreamProxy(
+        IMFByteStream *pByteStream,
+        IMFAttributes *pAttributes,
+        REFIID riid,
+        LPVOID *ppvObject) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFByteStreamProxyClassFactory, 0xa6b43f84, 0x5c0a, 0x42e8, 0xa4,0x4d, 0xb1,0x85,0x7a,0x76,0x99,0x2f)
+#endif
+#else
+typedef struct IMFByteStreamProxyClassFactoryVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFByteStreamProxyClassFactory* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFByteStreamProxyClassFactory* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFByteStreamProxyClassFactory* This);
+
+    /*** IMFByteStreamProxyClassFactory methods ***/
+    HRESULT (STDMETHODCALLTYPE *CreateByteStreamProxy)(
+        IMFByteStreamProxyClassFactory* This,
+        IMFByteStream *pByteStream,
+        IMFAttributes *pAttributes,
+        REFIID riid,
+        LPVOID *ppvObject);
+
+    END_INTERFACE
+} IMFByteStreamProxyClassFactoryVtbl;
+interface IMFByteStreamProxyClassFactory {
+    CONST_VTBL IMFByteStreamProxyClassFactoryVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFByteStreamProxyClassFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFByteStreamProxyClassFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFByteStreamProxyClassFactory_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFByteStreamProxyClassFactory methods ***/
+#define IMFByteStreamProxyClassFactory_CreateByteStreamProxy(This,pByteStream,pAttributes,riid,ppvObject) (This)->lpVtbl->CreateByteStreamProxy(This,pByteStream,pAttributes,riid,ppvObject)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFByteStreamProxyClassFactory_QueryInterface(IMFByteStreamProxyClassFactory* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFByteStreamProxyClassFactory_AddRef(IMFByteStreamProxyClassFactory* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFByteStreamProxyClassFactory_Release(IMFByteStreamProxyClassFactory* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFByteStreamProxyClassFactory methods ***/
+static FORCEINLINE HRESULT IMFByteStreamProxyClassFactory_CreateByteStreamProxy(IMFByteStreamProxyClassFactory* This,IMFByteStream *pByteStream,IMFAttributes *pAttributes,REFIID riid,LPVOID *ppvObject) {
+    return This->lpVtbl->CreateByteStreamProxy(This,pByteStream,pAttributes,riid,ppvObject);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFByteStreamProxyClassFactory_CreateByteStreamProxy_Proxy(
+    IMFByteStreamProxyClassFactory* This,
+    IMFByteStream *pByteStream,
+    IMFAttributes *pAttributes,
+    REFIID riid,
+    LPVOID *ppvObject);
+void __RPC_STUB IMFByteStreamProxyClassFactory_CreateByteStreamProxy_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFByteStreamProxyClassFactory_INTERFACE_DEFINED__ */
+
+
+typedef enum __WIDL_mfobjects_generated_name_00000017 {
     MF_ACCESSMODE_READ = 1,
     MF_ACCESSMODE_WRITE = 2,
     MF_ACCESSMODE_READWRITE = 3
 } MF_FILE_ACCESSMODE;
-typedef enum __WIDL_mmreg_h_generated_name_00000002 {
+
+typedef enum __WIDL_mfobjects_generated_name_00000018 {
     MF_OPENMODE_FAIL_IF_NOT_EXIST = 0,
     MF_OPENMODE_FAIL_IF_EXIST = 1,
     MF_OPENMODE_RESET_IF_EXIST = 2,
     MF_OPENMODE_APPEND_IF_EXIST = 3,
     MF_OPENMODE_DELETE_IF_EXIST = 4
 } MF_FILE_OPENMODE;
-typedef enum __WIDL_mmreg_h_generated_name_00000003 {
+
+typedef enum __WIDL_mfobjects_generated_name_00000019 {
     MF_FILEFLAGS_NONE = 0x0,
-    MF_FILEFLAGS_NOBUFFERING = 0x1,
-    MF_FILEFLAGS_ALLOW_WRITE_SHARING = 0x2
+    MF_FILEFLAGS_NOBUFFERING = 0x1
 } MF_FILE_FLAGS;
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+/*****************************************************************************
+ * IMFSampleOutputStream interface
+ */
+#ifndef __IMFSampleOutputStream_INTERFACE_DEFINED__
+#define __IMFSampleOutputStream_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFSampleOutputStream, 0x8feed468, 0x6f7e, 0x440d, 0x86,0x9a, 0x49,0xbd,0xd2,0x83,0xad,0x0d);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("8feed468-6f7e-440d-869a-49bdd283ad0d")
+IMFSampleOutputStream : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE BeginWriteSample(
+        IMFSample *pSample,
+        IMFAsyncCallback *pCallback,
+        IUnknown *punkState) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE EndWriteSample(
+        IMFAsyncResult *pResult) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Close(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFSampleOutputStream, 0x8feed468, 0x6f7e, 0x440d, 0x86,0x9a, 0x49,0xbd,0xd2,0x83,0xad,0x0d)
+#endif
+#else
+typedef struct IMFSampleOutputStreamVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFSampleOutputStream* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFSampleOutputStream* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFSampleOutputStream* This);
+
+    /*** IMFSampleOutputStream methods ***/
+    HRESULT (STDMETHODCALLTYPE *BeginWriteSample)(
+        IMFSampleOutputStream* This,
+        IMFSample *pSample,
+        IMFAsyncCallback *pCallback,
+        IUnknown *punkState);
+
+    HRESULT (STDMETHODCALLTYPE *EndWriteSample)(
+        IMFSampleOutputStream* This,
+        IMFAsyncResult *pResult);
+
+    HRESULT (STDMETHODCALLTYPE *Close)(
+        IMFSampleOutputStream* This);
+
+    END_INTERFACE
+} IMFSampleOutputStreamVtbl;
+interface IMFSampleOutputStream {
+    CONST_VTBL IMFSampleOutputStreamVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFSampleOutputStream_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFSampleOutputStream_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFSampleOutputStream_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFSampleOutputStream methods ***/
+#define IMFSampleOutputStream_BeginWriteSample(This,pSample,pCallback,punkState) (This)->lpVtbl->BeginWriteSample(This,pSample,pCallback,punkState)
+#define IMFSampleOutputStream_EndWriteSample(This,pResult) (This)->lpVtbl->EndWriteSample(This,pResult)
+#define IMFSampleOutputStream_Close(This) (This)->lpVtbl->Close(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFSampleOutputStream_QueryInterface(IMFSampleOutputStream* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFSampleOutputStream_AddRef(IMFSampleOutputStream* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFSampleOutputStream_Release(IMFSampleOutputStream* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFSampleOutputStream methods ***/
+static FORCEINLINE HRESULT IMFSampleOutputStream_BeginWriteSample(IMFSampleOutputStream* This,IMFSample *pSample,IMFAsyncCallback *pCallback,IUnknown *punkState) {
+    return This->lpVtbl->BeginWriteSample(This,pSample,pCallback,punkState);
+}
+static FORCEINLINE HRESULT IMFSampleOutputStream_EndWriteSample(IMFSampleOutputStream* This,IMFAsyncResult *pResult) {
+    return This->lpVtbl->EndWriteSample(This,pResult);
+}
+static FORCEINLINE HRESULT IMFSampleOutputStream_Close(IMFSampleOutputStream* This) {
+    return This->lpVtbl->Close(This);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFSampleOutputStream_BeginWriteSample_Proxy(
+    IMFSampleOutputStream* This,
+    IMFSample *pSample,
+    IMFAsyncCallback *pCallback,
+    IUnknown *punkState);
+void __RPC_STUB IMFSampleOutputStream_BeginWriteSample_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFSampleOutputStream_EndWriteSample_Proxy(
+    IMFSampleOutputStream* This,
+    IMFAsyncResult *pResult);
+void __RPC_STUB IMFSampleOutputStream_EndWriteSample_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFSampleOutputStream_Close_Proxy(
+    IMFSampleOutputStream* This);
+void __RPC_STUB IMFSampleOutputStream_Close_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFSampleOutputStream_INTERFACE_DEFINED__ */
+
+
 /*****************************************************************************
  * IMFCollection interface
  */
@@ -4742,78 +5816,303 @@ static FORCEINLINE ULONG IMFCollection_Release(IMFCollection* This) {
 static FORCEINLINE HRESULT IMFCollection_GetElementCount(IMFCollection* This,DWORD *pcElements) {
     return This->lpVtbl->GetElementCount(This,pcElements);
 }
-static FORCEINLINE HRESULT IMFCollection_GetElement(IMFCollection* This,DWORD dwElementIndex,IUnknown **ppUnkElement) {
-    return This->lpVtbl->GetElement(This,dwElementIndex,ppUnkElement);
+static FORCEINLINE HRESULT IMFCollection_GetElement(IMFCollection* This,DWORD dwElementIndex,IUnknown **ppUnkElement) {
+    return This->lpVtbl->GetElement(This,dwElementIndex,ppUnkElement);
+}
+static FORCEINLINE HRESULT IMFCollection_AddElement(IMFCollection* This,IUnknown *pUnkElement) {
+    return This->lpVtbl->AddElement(This,pUnkElement);
+}
+static FORCEINLINE HRESULT IMFCollection_RemoveElement(IMFCollection* This,DWORD dwElementIndex,IUnknown **ppUnkElement) {
+    return This->lpVtbl->RemoveElement(This,dwElementIndex,ppUnkElement);
+}
+static FORCEINLINE HRESULT IMFCollection_InsertElementAt(IMFCollection* This,DWORD dwIndex,IUnknown *pUnknown) {
+    return This->lpVtbl->InsertElementAt(This,dwIndex,pUnknown);
+}
+static FORCEINLINE HRESULT IMFCollection_RemoveAllElements(IMFCollection* This) {
+    return This->lpVtbl->RemoveAllElements(This);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFCollection_GetElementCount_Proxy(
+    IMFCollection* This,
+    DWORD *pcElements);
+void __RPC_STUB IMFCollection_GetElementCount_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFCollection_GetElement_Proxy(
+    IMFCollection* This,
+    DWORD dwElementIndex,
+    IUnknown **ppUnkElement);
+void __RPC_STUB IMFCollection_GetElement_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFCollection_AddElement_Proxy(
+    IMFCollection* This,
+    IUnknown *pUnkElement);
+void __RPC_STUB IMFCollection_AddElement_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFCollection_RemoveElement_Proxy(
+    IMFCollection* This,
+    DWORD dwElementIndex,
+    IUnknown **ppUnkElement);
+void __RPC_STUB IMFCollection_RemoveElement_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFCollection_InsertElementAt_Proxy(
+    IMFCollection* This,
+    DWORD dwIndex,
+    IUnknown *pUnknown);
+void __RPC_STUB IMFCollection_InsertElementAt_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFCollection_RemoveAllElements_Proxy(
+    IMFCollection* This);
+void __RPC_STUB IMFCollection_RemoveAllElements_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFCollection_INTERFACE_DEFINED__ */
+
+
+/*****************************************************************************
+ * IMFMediaEventQueue interface
+ */
+#ifndef __IMFMediaEventQueue_INTERFACE_DEFINED__
+#define __IMFMediaEventQueue_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFMediaEventQueue, 0x36f846fc, 0x2256, 0x48b6, 0xb5,0x8e, 0xe2,0xb6,0x38,0x31,0x65,0x81);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("36f846fc-2256-48b6-b58e-e2b638316581")
+IMFMediaEventQueue : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE GetEvent(
+        DWORD dwFlags,
+        IMFMediaEvent **ppEvent) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE BeginGetEvent(
+        IMFAsyncCallback *pCallback,
+        IUnknown *punkState) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE EndGetEvent(
+        IMFAsyncResult *pResult,
+        IMFMediaEvent **ppEvent) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE QueueEvent(
+        IMFMediaEvent *pEvent) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE QueueEventParamVar(
+        MediaEventType met,
+        REFGUID guidExtendedType,
+        HRESULT hrStatus,
+        const PROPVARIANT *pvValue) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE QueueEventParamUnk(
+        MediaEventType met,
+        REFGUID guidExtendedType,
+        HRESULT hrStatus,
+        IUnknown *pUnk) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Shutdown(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFMediaEventQueue, 0x36f846fc, 0x2256, 0x48b6, 0xb5,0x8e, 0xe2,0xb6,0x38,0x31,0x65,0x81)
+#endif
+#else
+typedef struct IMFMediaEventQueueVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFMediaEventQueue* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFMediaEventQueue* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFMediaEventQueue* This);
+
+    /*** IMFMediaEventQueue methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetEvent)(
+        IMFMediaEventQueue* This,
+        DWORD dwFlags,
+        IMFMediaEvent **ppEvent);
+
+    HRESULT (STDMETHODCALLTYPE *BeginGetEvent)(
+        IMFMediaEventQueue* This,
+        IMFAsyncCallback *pCallback,
+        IUnknown *punkState);
+
+    HRESULT (STDMETHODCALLTYPE *EndGetEvent)(
+        IMFMediaEventQueue* This,
+        IMFAsyncResult *pResult,
+        IMFMediaEvent **ppEvent);
+
+    HRESULT (STDMETHODCALLTYPE *QueueEvent)(
+        IMFMediaEventQueue* This,
+        IMFMediaEvent *pEvent);
+
+    HRESULT (STDMETHODCALLTYPE *QueueEventParamVar)(
+        IMFMediaEventQueue* This,
+        MediaEventType met,
+        REFGUID guidExtendedType,
+        HRESULT hrStatus,
+        const PROPVARIANT *pvValue);
+
+    HRESULT (STDMETHODCALLTYPE *QueueEventParamUnk)(
+        IMFMediaEventQueue* This,
+        MediaEventType met,
+        REFGUID guidExtendedType,
+        HRESULT hrStatus,
+        IUnknown *pUnk);
+
+    HRESULT (STDMETHODCALLTYPE *Shutdown)(
+        IMFMediaEventQueue* This);
+
+    END_INTERFACE
+} IMFMediaEventQueueVtbl;
+interface IMFMediaEventQueue {
+    CONST_VTBL IMFMediaEventQueueVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFMediaEventQueue_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFMediaEventQueue_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFMediaEventQueue_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFMediaEventQueue methods ***/
+#define IMFMediaEventQueue_GetEvent(This,dwFlags,ppEvent) (This)->lpVtbl->GetEvent(This,dwFlags,ppEvent)
+#define IMFMediaEventQueue_BeginGetEvent(This,pCallback,punkState) (This)->lpVtbl->BeginGetEvent(This,pCallback,punkState)
+#define IMFMediaEventQueue_EndGetEvent(This,pResult,ppEvent) (This)->lpVtbl->EndGetEvent(This,pResult,ppEvent)
+#define IMFMediaEventQueue_QueueEvent(This,pEvent) (This)->lpVtbl->QueueEvent(This,pEvent)
+#define IMFMediaEventQueue_QueueEventParamVar(This,met,guidExtendedType,hrStatus,pvValue) (This)->lpVtbl->QueueEventParamVar(This,met,guidExtendedType,hrStatus,pvValue)
+#define IMFMediaEventQueue_QueueEventParamUnk(This,met,guidExtendedType,hrStatus,pUnk) (This)->lpVtbl->QueueEventParamUnk(This,met,guidExtendedType,hrStatus,pUnk)
+#define IMFMediaEventQueue_Shutdown(This) (This)->lpVtbl->Shutdown(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFMediaEventQueue_QueryInterface(IMFMediaEventQueue* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFMediaEventQueue_AddRef(IMFMediaEventQueue* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFMediaEventQueue_Release(IMFMediaEventQueue* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFMediaEventQueue methods ***/
+static FORCEINLINE HRESULT IMFMediaEventQueue_GetEvent(IMFMediaEventQueue* This,DWORD dwFlags,IMFMediaEvent **ppEvent) {
+    return This->lpVtbl->GetEvent(This,dwFlags,ppEvent);
+}
+static FORCEINLINE HRESULT IMFMediaEventQueue_BeginGetEvent(IMFMediaEventQueue* This,IMFAsyncCallback *pCallback,IUnknown *punkState) {
+    return This->lpVtbl->BeginGetEvent(This,pCallback,punkState);
+}
+static FORCEINLINE HRESULT IMFMediaEventQueue_EndGetEvent(IMFMediaEventQueue* This,IMFAsyncResult *pResult,IMFMediaEvent **ppEvent) {
+    return This->lpVtbl->EndGetEvent(This,pResult,ppEvent);
 }
-static FORCEINLINE HRESULT IMFCollection_AddElement(IMFCollection* This,IUnknown *pUnkElement) {
-    return This->lpVtbl->AddElement(This,pUnkElement);
+static FORCEINLINE HRESULT IMFMediaEventQueue_QueueEvent(IMFMediaEventQueue* This,IMFMediaEvent *pEvent) {
+    return This->lpVtbl->QueueEvent(This,pEvent);
 }
-static FORCEINLINE HRESULT IMFCollection_RemoveElement(IMFCollection* This,DWORD dwElementIndex,IUnknown **ppUnkElement) {
-    return This->lpVtbl->RemoveElement(This,dwElementIndex,ppUnkElement);
+static FORCEINLINE HRESULT IMFMediaEventQueue_QueueEventParamVar(IMFMediaEventQueue* This,MediaEventType met,REFGUID guidExtendedType,HRESULT hrStatus,const PROPVARIANT *pvValue) {
+    return This->lpVtbl->QueueEventParamVar(This,met,guidExtendedType,hrStatus,pvValue);
 }
-static FORCEINLINE HRESULT IMFCollection_InsertElementAt(IMFCollection* This,DWORD dwIndex,IUnknown *pUnknown) {
-    return This->lpVtbl->InsertElementAt(This,dwIndex,pUnknown);
+static FORCEINLINE HRESULT IMFMediaEventQueue_QueueEventParamUnk(IMFMediaEventQueue* This,MediaEventType met,REFGUID guidExtendedType,HRESULT hrStatus,IUnknown *pUnk) {
+    return This->lpVtbl->QueueEventParamUnk(This,met,guidExtendedType,hrStatus,pUnk);
 }
-static FORCEINLINE HRESULT IMFCollection_RemoveAllElements(IMFCollection* This) {
-    return This->lpVtbl->RemoveAllElements(This);
+static FORCEINLINE HRESULT IMFMediaEventQueue_Shutdown(IMFMediaEventQueue* This) {
+    return This->lpVtbl->Shutdown(This);
 }
 #endif
 #endif
 
 #endif
 
-HRESULT STDMETHODCALLTYPE IMFCollection_GetElementCount_Proxy(
-    IMFCollection* This,
-    DWORD *pcElements);
-void __RPC_STUB IMFCollection_GetElementCount_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_GetEvent_Proxy(
+    IMFMediaEventQueue* This,
+    DWORD dwFlags,
+    IMFMediaEvent **ppEvent);
+void __RPC_STUB IMFMediaEventQueue_GetEvent_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
-HRESULT STDMETHODCALLTYPE IMFCollection_GetElement_Proxy(
-    IMFCollection* This,
-    DWORD dwElementIndex,
-    IUnknown **ppUnkElement);
-void __RPC_STUB IMFCollection_GetElement_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_BeginGetEvent_Proxy(
+    IMFMediaEventQueue* This,
+    IMFAsyncCallback *pCallback,
+    IUnknown *punkState);
+void __RPC_STUB IMFMediaEventQueue_BeginGetEvent_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
-HRESULT STDMETHODCALLTYPE IMFCollection_AddElement_Proxy(
-    IMFCollection* This,
-    IUnknown *pUnkElement);
-void __RPC_STUB IMFCollection_AddElement_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_EndGetEvent_Proxy(
+    IMFMediaEventQueue* This,
+    IMFAsyncResult *pResult,
+    IMFMediaEvent **ppEvent);
+void __RPC_STUB IMFMediaEventQueue_EndGetEvent_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
-HRESULT STDMETHODCALLTYPE IMFCollection_RemoveElement_Proxy(
-    IMFCollection* This,
-    DWORD dwElementIndex,
-    IUnknown **ppUnkElement);
-void __RPC_STUB IMFCollection_RemoveElement_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_QueueEvent_Proxy(
+    IMFMediaEventQueue* This,
+    IMFMediaEvent *pEvent);
+void __RPC_STUB IMFMediaEventQueue_QueueEvent_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
-HRESULT STDMETHODCALLTYPE IMFCollection_InsertElementAt_Proxy(
-    IMFCollection* This,
-    DWORD dwIndex,
-    IUnknown *pUnknown);
-void __RPC_STUB IMFCollection_InsertElementAt_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_QueueEventParamVar_Proxy(
+    IMFMediaEventQueue* This,
+    MediaEventType met,
+    REFGUID guidExtendedType,
+    HRESULT hrStatus,
+    const PROPVARIANT *pvValue);
+void __RPC_STUB IMFMediaEventQueue_QueueEventParamVar_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
-HRESULT STDMETHODCALLTYPE IMFCollection_RemoveAllElements_Proxy(
-    IMFCollection* This);
-void __RPC_STUB IMFCollection_RemoveAllElements_Stub(
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_QueueEventParamUnk_Proxy(
+    IMFMediaEventQueue* This,
+    MediaEventType met,
+    REFGUID guidExtendedType,
+    HRESULT hrStatus,
+    IUnknown *pUnk);
+void __RPC_STUB IMFMediaEventQueue_QueueEventParamUnk_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFMediaEventQueue_Shutdown_Proxy(
+    IMFMediaEventQueue* This);
+void __RPC_STUB IMFMediaEventQueue_Shutdown_Stub(
     IRpcStubBuffer* This,
     IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage,
     DWORD* pdwStubPhase);
 
-#endif  /* __IMFCollection_INTERFACE_DEFINED__ */
+#endif  /* __IMFMediaEventQueue_INTERFACE_DEFINED__ */
+
 
 /*****************************************************************************
  * IMFActivate interface
@@ -5211,10 +6510,17 @@ void __RPC_STUB IMFActivate_DetachObject_Stub(
 
 #endif  /* __IMFActivate_INTERFACE_DEFINED__ */
 
+#endif
+
+#if WINVER >= _WIN32_WINNT_WIN7
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 typedef enum _MF_Plugin_Type {
     MF_Plugin_Type_MFT = 0,
-    MF_Plugin_Type_MediaSource = 1
+    MF_Plugin_Type_MediaSource = 1,
+    MF_Plugin_Type_MFT_MatchOutputType = 2,
+    MF_Plugin_Type_Other = (DWORD)-1
 } MF_Plugin_Type;
+
 /*****************************************************************************
  * IMFPluginControl interface
  */
@@ -5430,6 +6736,385 @@ void __RPC_STUB IMFPluginControl_SetDisabled_Stub(
 
 #endif  /* __IMFPluginControl_INTERFACE_DEFINED__ */
 
+
+typedef enum MF_PLUGIN_CONTROL_POLICY {
+    MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0,
+    MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1,
+    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
+} MF_PLUGIN_CONTROL_POLICY;
+
+/*****************************************************************************
+ * IMFPluginControl2 interface
+ */
+#ifndef __IMFPluginControl2_INTERFACE_DEFINED__
+#define __IMFPluginControl2_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFPluginControl2, 0xc6982083, 0x3ddc, 0x45cb, 0xaf,0x5e, 0x0f,0x7a,0x8c,0xe4,0xde,0x77);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("c6982083-3ddc-45cb-af5e-0f7a8ce4de77")
+IMFPluginControl2 : public IMFPluginControl
+{
+    virtual HRESULT STDMETHODCALLTYPE SetPolicy(
+        MF_PLUGIN_CONTROL_POLICY policy) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFPluginControl2, 0xc6982083, 0x3ddc, 0x45cb, 0xaf,0x5e, 0x0f,0x7a,0x8c,0xe4,0xde,0x77)
+#endif
+#else
+typedef struct IMFPluginControl2Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFPluginControl2* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFPluginControl2* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFPluginControl2* This);
+
+    /*** IMFPluginControl methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetPreferredClsid)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        LPCWSTR selector,
+        CLSID *clsid);
+
+    HRESULT (STDMETHODCALLTYPE *GetPreferredClsidByIndex)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        DWORD index,
+        LPWSTR *selector,
+        CLSID *clsid);
+
+    HRESULT (STDMETHODCALLTYPE *SetPreferredClsid)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        LPCWSTR selector,
+        const CLSID *clsid);
+
+    HRESULT (STDMETHODCALLTYPE *IsDisabled)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        REFCLSID clsid);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisabledByIndex)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        DWORD index,
+        CLSID *clsid);
+
+    HRESULT (STDMETHODCALLTYPE *SetDisabled)(
+        IMFPluginControl2* This,
+        DWORD pluginType,
+        REFCLSID clsid,
+        WINBOOL disabled);
+
+    /*** IMFPluginControl2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPolicy)(
+        IMFPluginControl2* This,
+        MF_PLUGIN_CONTROL_POLICY policy);
+
+    END_INTERFACE
+} IMFPluginControl2Vtbl;
+interface IMFPluginControl2 {
+    CONST_VTBL IMFPluginControl2Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFPluginControl2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFPluginControl2_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFPluginControl2_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFPluginControl methods ***/
+#define IMFPluginControl2_GetPreferredClsid(This,pluginType,selector,clsid) (This)->lpVtbl->GetPreferredClsid(This,pluginType,selector,clsid)
+#define IMFPluginControl2_GetPreferredClsidByIndex(This,pluginType,index,selector,clsid) (This)->lpVtbl->GetPreferredClsidByIndex(This,pluginType,index,selector,clsid)
+#define IMFPluginControl2_SetPreferredClsid(This,pluginType,selector,clsid) (This)->lpVtbl->SetPreferredClsid(This,pluginType,selector,clsid)
+#define IMFPluginControl2_IsDisabled(This,pluginType,clsid) (This)->lpVtbl->IsDisabled(This,pluginType,clsid)
+#define IMFPluginControl2_GetDisabledByIndex(This,pluginType,index,clsid) (This)->lpVtbl->GetDisabledByIndex(This,pluginType,index,clsid)
+#define IMFPluginControl2_SetDisabled(This,pluginType,clsid,disabled) (This)->lpVtbl->SetDisabled(This,pluginType,clsid,disabled)
+/*** IMFPluginControl2 methods ***/
+#define IMFPluginControl2_SetPolicy(This,policy) (This)->lpVtbl->SetPolicy(This,policy)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFPluginControl2_QueryInterface(IMFPluginControl2* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFPluginControl2_AddRef(IMFPluginControl2* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFPluginControl2_Release(IMFPluginControl2* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFPluginControl methods ***/
+static FORCEINLINE HRESULT IMFPluginControl2_GetPreferredClsid(IMFPluginControl2* This,DWORD pluginType,LPCWSTR selector,CLSID *clsid) {
+    return This->lpVtbl->GetPreferredClsid(This,pluginType,selector,clsid);
+}
+static FORCEINLINE HRESULT IMFPluginControl2_GetPreferredClsidByIndex(IMFPluginControl2* This,DWORD pluginType,DWORD index,LPWSTR *selector,CLSID *clsid) {
+    return This->lpVtbl->GetPreferredClsidByIndex(This,pluginType,index,selector,clsid);
+}
+static FORCEINLINE HRESULT IMFPluginControl2_SetPreferredClsid(IMFPluginControl2* This,DWORD pluginType,LPCWSTR selector,const CLSID *clsid) {
+    return This->lpVtbl->SetPreferredClsid(This,pluginType,selector,clsid);
+}
+static FORCEINLINE HRESULT IMFPluginControl2_IsDisabled(IMFPluginControl2* This,DWORD pluginType,REFCLSID clsid) {
+    return This->lpVtbl->IsDisabled(This,pluginType,clsid);
+}
+static FORCEINLINE HRESULT IMFPluginControl2_GetDisabledByIndex(IMFPluginControl2* This,DWORD pluginType,DWORD index,CLSID *clsid) {
+    return This->lpVtbl->GetDisabledByIndex(This,pluginType,index,clsid);
+}
+static FORCEINLINE HRESULT IMFPluginControl2_SetDisabled(IMFPluginControl2* This,DWORD pluginType,REFCLSID clsid,WINBOOL disabled) {
+    return This->lpVtbl->SetDisabled(This,pluginType,clsid,disabled);
+}
+/*** IMFPluginControl2 methods ***/
+static FORCEINLINE HRESULT IMFPluginControl2_SetPolicy(IMFPluginControl2* This,MF_PLUGIN_CONTROL_POLICY policy) {
+    return This->lpVtbl->SetPolicy(This,policy);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFPluginControl2_SetPolicy_Proxy(
+    IMFPluginControl2* This,
+    MF_PLUGIN_CONTROL_POLICY policy);
+void __RPC_STUB IMFPluginControl2_SetPolicy_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFPluginControl2_INTERFACE_DEFINED__ */
+
+#endif
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+/*****************************************************************************
+ * IMFDXGIDeviceManager interface
+ */
+#ifndef __IMFDXGIDeviceManager_INTERFACE_DEFINED__
+#define __IMFDXGIDeviceManager_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IMFDXGIDeviceManager, 0xeb533d5d, 0x2db6, 0x40f8, 0x97,0xa9, 0x49,0x46,0x92,0x01,0x4f,0x07);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("eb533d5d-2db6-40f8-97a9-494692014f07")
+IMFDXGIDeviceManager : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE CloseDeviceHandle(
+        HANDLE hDevice) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetVideoService(
+        HANDLE hDevice,
+        REFIID riid,
+        void **ppService) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE LockDevice(
+        HANDLE hDevice,
+        REFIID riid,
+        void **ppUnkDevice,
+        WINBOOL fBlock) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE OpenDeviceHandle(
+        HANDLE *phDevice) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ResetDevice(
+        IUnknown *pUnkDevice,
+        UINT resetToken) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE TestDevice(
+        HANDLE hDevice) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE UnlockDevice(
+        HANDLE hDevice,
+        WINBOOL fSaveState) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IMFDXGIDeviceManager, 0xeb533d5d, 0x2db6, 0x40f8, 0x97,0xa9, 0x49,0x46,0x92,0x01,0x4f,0x07)
+#endif
+#else
+typedef struct IMFDXGIDeviceManagerVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IMFDXGIDeviceManager* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IMFDXGIDeviceManager* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IMFDXGIDeviceManager* This);
+
+    /*** IMFDXGIDeviceManager methods ***/
+    HRESULT (STDMETHODCALLTYPE *CloseDeviceHandle)(
+        IMFDXGIDeviceManager* This,
+        HANDLE hDevice);
+
+    HRESULT (STDMETHODCALLTYPE *GetVideoService)(
+        IMFDXGIDeviceManager* This,
+        HANDLE hDevice,
+        REFIID riid,
+        void **ppService);
+
+    HRESULT (STDMETHODCALLTYPE *LockDevice)(
+        IMFDXGIDeviceManager* This,
+        HANDLE hDevice,
+        REFIID riid,
+        void **ppUnkDevice,
+        WINBOOL fBlock);
+
+    HRESULT (STDMETHODCALLTYPE *OpenDeviceHandle)(
+        IMFDXGIDeviceManager* This,
+        HANDLE *phDevice);
+
+    HRESULT (STDMETHODCALLTYPE *ResetDevice)(
+        IMFDXGIDeviceManager* This,
+        IUnknown *pUnkDevice,
+        UINT resetToken);
+
+    HRESULT (STDMETHODCALLTYPE *TestDevice)(
+        IMFDXGIDeviceManager* This,
+        HANDLE hDevice);
+
+    HRESULT (STDMETHODCALLTYPE *UnlockDevice)(
+        IMFDXGIDeviceManager* This,
+        HANDLE hDevice,
+        WINBOOL fSaveState);
+
+    END_INTERFACE
+} IMFDXGIDeviceManagerVtbl;
+interface IMFDXGIDeviceManager {
+    CONST_VTBL IMFDXGIDeviceManagerVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IMFDXGIDeviceManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IMFDXGIDeviceManager_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IMFDXGIDeviceManager_Release(This) (This)->lpVtbl->Release(This)
+/*** IMFDXGIDeviceManager methods ***/
+#define IMFDXGIDeviceManager_CloseDeviceHandle(This,hDevice) (This)->lpVtbl->CloseDeviceHandle(This,hDevice)
+#define IMFDXGIDeviceManager_GetVideoService(This,hDevice,riid,ppService) (This)->lpVtbl->GetVideoService(This,hDevice,riid,ppService)
+#define IMFDXGIDeviceManager_LockDevice(This,hDevice,riid,ppUnkDevice,fBlock) (This)->lpVtbl->LockDevice(This,hDevice,riid,ppUnkDevice,fBlock)
+#define IMFDXGIDeviceManager_OpenDeviceHandle(This,phDevice) (This)->lpVtbl->OpenDeviceHandle(This,phDevice)
+#define IMFDXGIDeviceManager_ResetDevice(This,pUnkDevice,resetToken) (This)->lpVtbl->ResetDevice(This,pUnkDevice,resetToken)
+#define IMFDXGIDeviceManager_TestDevice(This,hDevice) (This)->lpVtbl->TestDevice(This,hDevice)
+#define IMFDXGIDeviceManager_UnlockDevice(This,hDevice,fSaveState) (This)->lpVtbl->UnlockDevice(This,hDevice,fSaveState)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_QueryInterface(IMFDXGIDeviceManager* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IMFDXGIDeviceManager_AddRef(IMFDXGIDeviceManager* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IMFDXGIDeviceManager_Release(IMFDXGIDeviceManager* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IMFDXGIDeviceManager methods ***/
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_CloseDeviceHandle(IMFDXGIDeviceManager* This,HANDLE hDevice) {
+    return This->lpVtbl->CloseDeviceHandle(This,hDevice);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_GetVideoService(IMFDXGIDeviceManager* This,HANDLE hDevice,REFIID riid,void **ppService) {
+    return This->lpVtbl->GetVideoService(This,hDevice,riid,ppService);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_LockDevice(IMFDXGIDeviceManager* This,HANDLE hDevice,REFIID riid,void **ppUnkDevice,WINBOOL fBlock) {
+    return This->lpVtbl->LockDevice(This,hDevice,riid,ppUnkDevice,fBlock);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_OpenDeviceHandle(IMFDXGIDeviceManager* This,HANDLE *phDevice) {
+    return This->lpVtbl->OpenDeviceHandle(This,phDevice);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_ResetDevice(IMFDXGIDeviceManager* This,IUnknown *pUnkDevice,UINT resetToken) {
+    return This->lpVtbl->ResetDevice(This,pUnkDevice,resetToken);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_TestDevice(IMFDXGIDeviceManager* This,HANDLE hDevice) {
+    return This->lpVtbl->TestDevice(This,hDevice);
+}
+static FORCEINLINE HRESULT IMFDXGIDeviceManager_UnlockDevice(IMFDXGIDeviceManager* This,HANDLE hDevice,WINBOOL fSaveState) {
+    return This->lpVtbl->UnlockDevice(This,hDevice,fSaveState);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_CloseDeviceHandle_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE hDevice);
+void __RPC_STUB IMFDXGIDeviceManager_CloseDeviceHandle_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_GetVideoService_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE hDevice,
+    REFIID riid,
+    void **ppService);
+void __RPC_STUB IMFDXGIDeviceManager_GetVideoService_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_LockDevice_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE hDevice,
+    REFIID riid,
+    void **ppUnkDevice,
+    WINBOOL fBlock);
+void __RPC_STUB IMFDXGIDeviceManager_LockDevice_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_OpenDeviceHandle_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE *phDevice);
+void __RPC_STUB IMFDXGIDeviceManager_OpenDeviceHandle_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_ResetDevice_Proxy(
+    IMFDXGIDeviceManager* This,
+    IUnknown *pUnkDevice,
+    UINT resetToken);
+void __RPC_STUB IMFDXGIDeviceManager_ResetDevice_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_TestDevice_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE hDevice);
+void __RPC_STUB IMFDXGIDeviceManager_TestDevice_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IMFDXGIDeviceManager_UnlockDevice_Proxy(
+    IMFDXGIDeviceManager* This,
+    HANDLE hDevice,
+    WINBOOL fSaveState);
+void __RPC_STUB IMFDXGIDeviceManager_UnlockDevice_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IMFDXGIDeviceManager_INTERFACE_DEFINED__ */
+
+#endif
+
+#endif
 /* Begin additional prototypes for all interfaces */
 
 ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
diff --git a/mingw-w64-headers/include/mfobjects.idl b/mingw-w64-headers/include/mfobjects.idl
index 9b0f40f..2fafc07 100644
--- a/mingw-w64-headers/include/mfobjects.idl
+++ b/mingw-w64-headers/include/mfobjects.idl
@@ -1,360 +1,436 @@
-/**
- * This file has no copyright assigned and is placed in the Public Domain.
- * This file is part of the mingw-w64 runtime package.
- * No warranty is given; refer to the file DISCLAIMER.PD within this package.
- */
+cpp_quote("/**")
+cpp_quote(" * This file is part of the mingw-w64 runtime package.")
+cpp_quote(" * No warranty is given; refer to the file DISCLAIMER within this package.")
+cpp_quote(" */")
+cpp_quote("")
+cpp_quote("#include <winapifamily.h>")
+cpp_quote("")
 
 import "unknwn.idl";
 import "propsys.idl";
 import "mediaobj.idl";
 
+#ifndef __QWORD_DEFINED
+#define __QWORD_DEFINED
+cpp_quote("")
+typedef ULONGLONG QWORD;
+#endif
+
+cpp_quote("")
 cpp_quote("#include <mmreg.h>")
 #include <mmreg.h>
 
-typedef ULONGLONG QWORD;
-
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
 typedef enum _MF_ATTRIBUTE_TYPE {
-    MF_ATTRIBUTE_UINT32     = VT_UI4,
-    MF_ATTRIBUTE_UINT64     = VT_UI8,
-    MF_ATTRIBUTE_DOUBLE     = VT_R8,
-    MF_ATTRIBUTE_GUID       = VT_CLSID,
-    MF_ATTRIBUTE_STRING     = VT_LPWSTR,
-    MF_ATTRIBUTE_BLOB       = VT_VECTOR | VT_UI1,
-    MF_ATTRIBUTE_IUNKNOWN   = VT_UNKNOWN
+  MF_ATTRIBUTE_UINT32 = VT_UI4,
+  MF_ATTRIBUTE_UINT64 = VT_UI8,
+  MF_ATTRIBUTE_DOUBLE = VT_R8,
+  MF_ATTRIBUTE_GUID = VT_CLSID,
+  MF_ATTRIBUTE_STRING = VT_LPWSTR,
+  MF_ATTRIBUTE_BLOB = VT_VECTOR | VT_UI1,
+  MF_ATTRIBUTE_IUNKNOWN = VT_UNKNOWN
 } MF_ATTRIBUTE_TYPE;
 
+cpp_quote("")
 typedef enum _MF_ATTRIBUTES_MATCH_TYPE {
-    MF_ATTRIBUTES_MATCH_OUR_ITEMS      = 0,
-    MF_ATTRIBUTES_MATCH_THEIR_ITEMS    = 1,
-    MF_ATTRIBUTES_MATCH_ALL_ITEMS      = 2,
-    MF_ATTRIBUTES_MATCH_INTERSECTION   = 3,
-    MF_ATTRIBUTES_MATCH_SMALLER        = 4 
+  MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0,
+  MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1,
+  MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2,
+  MF_ATTRIBUTES_MATCH_INTERSECTION = 3,
+  MF_ATTRIBUTES_MATCH_SMALLER = 4
 } MF_ATTRIBUTES_MATCH_TYPE;
 
-[
-    object,
-    uuid(2cd2d921-c447-44a7-a13c-4adabfc247e3)
-]
-interface IMFAttributes : IUnknown
-{
-    HRESULT GetItem(REFGUID guidKey, [in, out, ptr] PROPVARIANT *pValue);
-    HRESULT GetItemType(REFGUID guidKey, [out] MF_ATTRIBUTE_TYPE *pType);
-    HRESULT CompareItem(REFGUID guidKey, REFPROPVARIANT Value, [out] BOOL *pbResult);
-    HRESULT Compare(IMFAttributes *pTheirs, MF_ATTRIBUTES_MATCH_TYPE MatchType, [out] BOOL *pbResult);
-    HRESULT GetUINT32(REFGUID guidKey, [out] UINT32 *punValue);
-    HRESULT GetUINT64(REFGUID guidKey, [out] UINT64 *punValue);
-    HRESULT GetDouble(REFGUID guidKey, [out] double *pfValue);
-    HRESULT GetGUID(REFGUID guidKey, [out] GUID *pguidValue);
-    HRESULT GetStringLength(REFGUID guidKey, [out] UINT32 *pcchLength);
-    HRESULT GetString(REFGUID guidKey, [out, size_is(cchBufSize)] LPWSTR pwszValue, UINT32 cchBufSize,
-            [in, out, ptr] UINT32 *pcchLength);
-    HRESULT GetAllocatedString(REFGUID guidKey, [out, size_is(,*pcchLength+1)] LPWSTR *ppwszValue,
-            [out] UINT32 *pcchLength);
-    HRESULT GetBlobSize(REFGUID guidKey, [out] UINT32 *pcbBlobSize);
-    HRESULT GetBlob(REFGUID guidKey, [out, size_is(cbBufSize)] UINT8 *pBuf, UINT32 cbBufSize,
-            [in, out, ptr] UINT32 *pcbBlobSize);
-    HRESULT GetAllocatedBlob(REFGUID guidKey, [out, size_is(,*pcbSize)] UINT8 **ppBuf, [out] UINT32 *pcbSize);
-    HRESULT GetUnknown(REFGUID guidKey, REFIID riid, [out, iid_is(riid)] LPVOID *ppv);
-    HRESULT SetItem(REFGUID guidKey, REFPROPVARIANT Value);
-    HRESULT DeleteItem(REFGUID guidKey);
-    HRESULT DeleteAllItems();
-    HRESULT SetUINT32(REFGUID guidKey, UINT32  unValue);
-    HRESULT SetUINT64(REFGUID guidKey, UINT64  unValue);
-    HRESULT SetDouble(REFGUID guidKey, double fValue);
-    HRESULT SetGUID(REFGUID guidKey, REFGUID guidValue);
-    HRESULT SetString(REFGUID guidKey, [in, string] LPCWSTR wszValue);
-    HRESULT SetBlob(REFGUID guidKey, [in, size_is(cbBufSize)] const UINT8* pBuf, UINT32 cbBufSize);
-    HRESULT SetUnknown(REFGUID guidKey, [in] IUnknown *pUnknown);
-    HRESULT LockStore();
-    HRESULT UnlockStore();
-    HRESULT GetCount([out] UINT32 *pcItems);
-    HRESULT GetItemByIndex(UINT32 unIndex, [out] GUID *pguidKey, [in, out, ptr] PROPVARIANT *pValue);
-    HRESULT CopyAllItems([in] IMFAttributes *pDest);
-}
+cpp_quote("")
+[object, uuid (2cd2d921-c447-44a7-a13c-4adabfc247e3)]
+interface IMFAttributes : IUnknown {
+  HRESULT GetItem (REFGUID guidKey,[in, out, ptr] PROPVARIANT *pValue);
+  HRESULT GetItemType (REFGUID guidKey,[out] MF_ATTRIBUTE_TYPE *pType);
+  HRESULT CompareItem (REFGUID guidKey, REFPROPVARIANT Value,[out] WINBOOL *pbResult);
+  HRESULT Compare (IMFAttributes *pTheirs, MF_ATTRIBUTES_MATCH_TYPE MatchType,[out] WINBOOL *pbResult);
+  HRESULT GetUINT32 (REFGUID guidKey,[out] UINT32 *punValue);
+  HRESULT GetUINT64 (REFGUID guidKey,[out] UINT64 *punValue);
+  HRESULT GetDouble (REFGUID guidKey,[out] double *pfValue);
+  HRESULT GetGUID (REFGUID guidKey,[out] GUID *pguidValue);
+  HRESULT GetStringLength (REFGUID guidKey,[out] UINT32 *pcchLength);
+  HRESULT GetString (REFGUID guidKey,[out, size_is (cchBufSize)] LPWSTR pwszValue, UINT32 cchBufSize,[in, out, ptr] UINT32 *pcchLength);
+  HRESULT GetAllocatedString (REFGUID guidKey,[out, size_is (,*pcchLength + 1)] LPWSTR *ppwszValue,[out] UINT32 *pcchLength);
+  HRESULT GetBlobSize (REFGUID guidKey,[out] UINT32 *pcbBlobSize);
+  HRESULT GetBlob (REFGUID guidKey,[out, size_is (cbBufSize)] UINT8 *pBuf, UINT32 cbBufSize,[in, out, ptr] UINT32 *pcbBlobSize);
+  HRESULT GetAllocatedBlob (REFGUID guidKey,[out, size_is (,*pcbSize)] UINT8 **ppBuf,[out] UINT32 *pcbSize);
+  HRESULT GetUnknown (REFGUID guidKey, REFIID riid,[out, iid_is (riid)] LPVOID *ppv);
+  HRESULT SetItem (REFGUID guidKey, REFPROPVARIANT Value);
+  HRESULT DeleteItem (REFGUID guidKey);
+  HRESULT DeleteAllItems ();
+  HRESULT SetUINT32 (REFGUID guidKey, UINT32 unValue);
+  HRESULT SetUINT64 (REFGUID guidKey, UINT64 unValue);
+  HRESULT SetDouble (REFGUID guidKey, double fValue);
+  HRESULT SetGUID (REFGUID guidKey, REFGUID guidValue);
+  HRESULT SetString (REFGUID guidKey,[in, string] LPCWSTR wszValue);
+  HRESULT SetBlob (REFGUID guidKey,[in, size_is (cbBufSize)] const UINT8 *pBuf, UINT32 cbBufSize);
+  HRESULT SetUnknown (REFGUID guidKey,[in] IUnknown *pUnknown);
+  HRESULT LockStore ();
+  HRESULT UnlockStore ();
+  HRESULT GetCount ([out] UINT32 *pcItems);
+  HRESULT GetItemByIndex (UINT32 unIndex,[out] GUID *pguidKey,[in, out, ptr] PROPVARIANT *pValue);
+  HRESULT CopyAllItems ([in] IMFAttributes *pDest);
+};
 
+cpp_quote("")
 enum MF_ATTRIBUTE_SERIALIZE_OPTIONS {
-    MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 0x00000001
+  MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 0x00000001
 };
 
-[
-    object,
-    uuid(045fa593-8799-42b8-bc8d-8968c6453507),
-    local
-]
-interface IMFMediaBuffer : IUnknown
-{
-    HRESULT Lock([out] BYTE **ppbBuffer, [out] DWORD *pcbMaxLength, [out] DWORD *pcbCurrentLength);
-    HRESULT Unlock();
-    HRESULT GetCurrentLength([out] DWORD *pcbCurrentLength);
-    HRESULT SetCurrentLength([in] DWORD cbCurrentLength);
-    HRESULT GetMaxLength([out] DWORD *pcbMaxLength);
+cpp_quote("")
+cpp_quote("STDAPI MFSerializeAttributesToStream(IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm);")
+cpp_quote("STDAPI MFDeserializeAttributesFromStream(IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm);")
+
+cpp_quote("")
+[object, uuid (045fa593-8799-42b8-BC8D-8968c6453507), local,]
+interface IMFMediaBuffer : IUnknown {
+  HRESULT Lock ([out] BYTE **ppbBuffer,[out] DWORD *pcbMaxLength,[out] DWORD *pcbCurrentLength);
+  HRESULT Unlock ();
+  HRESULT GetCurrentLength ([out] DWORD *pcbCurrentLength);
+  HRESULT SetCurrentLength ([in] DWORD cbCurrentLength);
+  HRESULT GetMaxLength ([out] DWORD *pcbMaxLength);
 }
 
-[
-    object,
-    uuid(c40a00f2-b93a-4d80-ae8c-5a1c634f58e4),
-    local
-]
-interface IMFSample : IMFAttributes
-{
-    HRESULT GetSampleFlags([out] DWORD *pdwSampleFlags);
-    HRESULT SetSampleFlags([in] DWORD dwSampleFlags);
-    HRESULT GetSampleTime([out] LONGLONG *phnsSampleTime);
-    HRESULT SetSampleTime([in] LONGLONG hnsSampleTime);
-    HRESULT GetSampleDuration([out] LONGLONG *phnsSampleDuration);
-    HRESULT SetSampleDuration([in] LONGLONG hnsSampleDuration);
-    HRESULT GetBufferCount([out] DWORD *pdwBufferCount);
-    HRESULT GetBufferByIndex([in] DWORD dwIndex, [out] IMFMediaBuffer **ppBuffer);
-    HRESULT ConvertToContiguousBuffer([out] IMFMediaBuffer **ppBuffer);
-    HRESULT AddBuffer([in] IMFMediaBuffer *pBuffer);
-    HRESULT RemoveBufferByIndex([in] DWORD dwIndex);
-    HRESULT RemoveAllBuffers();
-    HRESULT GetTotalLength([out] DWORD *pcbTotalLength);
-    HRESULT CopyToBuffer([in] IMFMediaBuffer *pBuffer);
-}
-
-[
-    object,
-    uuid(7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb),
-    local
-]
-interface IMF2DBuffer : IUnknown
-{
-    HRESULT Lock2D([out] BYTE **pbScanline0, [out] LONG *plPitch);
-    HRESULT Unlock2D();
-    HRESULT GetScanline0AndPitch([out] BYTE **pbScanline0, [out] LONG *plPitch);
-    HRESULT IsContiguousFormat([out] BOOL *pfIsContiguous);
-    HRESULT GetContiguousLength([out] DWORD *pcbLength);
-    HRESULT ContiguousCopyTo([out, size_is(cbDestBuffer)] BYTE *pbDestBuffer, [in] DWORD cbDestBuffer);
-    HRESULT ContiguousCopyFrom([in, size_is(cbSrcBuffer)] const BYTE *pbSrcBuffer, [in] DWORD cbSrcBuffer);
-}
-
-[
-    object,
-    uuid(44ae0fa8-ea31-4109-8d2e-4cae4997c555),
-    local
-]
-interface IMFMediaType : IMFAttributes
-{
-    HRESULT GetMajorType([out] GUID *pguidMajorType);
-    HRESULT IsCompressedFormat([out] BOOL *pfCompressed);
-    HRESULT IsEqual([in] IMFMediaType *pIMediaType, [out] DWORD *pdwFlags);
-    HRESULT GetRepresentation([in] GUID guidRepresentation, [out] LPVOID *ppvRepresentation);
-    HRESULT FreeRepresentation([in] GUID guidRepresentation, [in] LPVOID pvRepresentation);
-}
+cpp_quote("")
+[object, uuid (c40a00f2-b93a-4d80-ae8c-5a1c634f58e4), local,]
+interface IMFSample : IMFAttributes {
+  HRESULT GetSampleFlags ([out] DWORD *pdwSampleFlags);
+  HRESULT SetSampleFlags ([in] DWORD dwSampleFlags);
+  HRESULT GetSampleTime ([out] LONGLONG *phnsSampleTime);
+  HRESULT SetSampleTime ([in] LONGLONG hnsSampleTime);
+  HRESULT GetSampleDuration ([out] LONGLONG *phnsSampleDuration);
+  HRESULT SetSampleDuration ([in] LONGLONG hnsSampleDuration);
+  HRESULT GetBufferCount ([out] DWORD *pdwBufferCount);
+  HRESULT GetBufferByIndex ([in] DWORD dwIndex,[out] IMFMediaBuffer **ppBuffer);
+  HRESULT ConvertToContiguousBuffer ([out] IMFMediaBuffer **ppBuffer);
+  HRESULT AddBuffer ([in] IMFMediaBuffer *pBuffer);
+  HRESULT RemoveBufferByIndex ([in] DWORD dwIndex);
+  HRESULT RemoveAllBuffers (void);
+  HRESULT GetTotalLength ([out] DWORD *pcbTotalLength);
+  HRESULT CopyToBuffer ([in] IMFMediaBuffer *pBuffer);
+};
 
-cpp_quote("#define MF_MEDIATYPE_EQUAL_MAJOR_TYPES          0x00000001")
-cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_TYPES         0x00000002")
-cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_DATA          0x00000004")
-cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA     0x00000008")
-
-[
-    object,
-    uuid(26a0adc3-ce26-4672-9304-69552edd3faf),
-    local
-]
-interface IMFAudioMediaType : IMFMediaType
-{
-    const WAVEFORMATEX *GetAudioFormat();
+cpp_quote("")
+[object, uuid (7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb), local]
+interface IMF2DBuffer : IUnknown {
+  HRESULT Lock2D ([out] BYTE **ppbScanline0,[out] LONG *plPitch);
+  HRESULT Unlock2D ();
+  HRESULT GetScanline0AndPitch ([out] BYTE **pbScanline0,[out] LONG *plPitch);
+  HRESULT IsContiguousFormat ([out] WINBOOL *pfIsContiguous);
+  HRESULT GetContiguousLength ([out] DWORD *pcbLength);
+  HRESULT ContiguousCopyTo ([out, size_is (cbDestBuffer)] BYTE *pbDestBuffer,[in] DWORD cbDestBuffer);
+  HRESULT ContiguousCopyFrom ([in, size_is (cbSrcBuffer)] const BYTE *pbSrcBuffer,[in] DWORD cbSrcBuffer);
 }
 
-typedef struct {
-    GUID guidMajorType;
-    GUID guidSubtype;
-} MFT_REGISTER_TYPE_INFO;
+cpp_quote("")
+typedef enum _MF2DBuffer_LockFlags {
+  MF2DBuffer_LockFlags_LockTypeMask = 0x1 | 0x2 | 0x3,
+  MF2DBuffer_LockFlags_Read = 0x1,
+  MF2DBuffer_LockFlags_Write = 0x2,
+  MF2DBuffer_LockFlags_ReadWrite = 0x3,
+  MF2DBuffer_LockFlags_ForceDWORD = 0x7fffffff
+} MF2DBuffer_LockFlags;
+
+cpp_quote("")
+[object, uuid (33ae5ea6-4316-436f-8ddd-d73d22f829ec), local]
+interface IMF2DBuffer2 : IMF2DBuffer {
+  HRESULT Lock2DSize ([in] MF2DBuffer_LockFlags lockFlags,[out] BYTE **ppbScanline0,[out] LONG *plPitch,[out] BYTE **ppbBufferStart,[out] DWORD *pcbBufferLength);
+  HRESULT Copy2DTo ([in] IMF2DBuffer2 *pDestBuffer);
+};
 
-typedef enum _MFVideoFlags {
-    MFVideoFlag_PAD_TO_Mask             = 0x0001 | 0x0002,
-    MFVideoFlag_PAD_TO_None             = 0 * 0x0001,
-    MFVideoFlag_PAD_TO_4x3              = 1 * 0x0001,
-    MFVideoFlag_PAD_TO_16x9             = 2 * 0x0001,
-    MFVideoFlag_SrcContentHintMask      = 0x0004 | 0x0008 | 0x0010,
-    MFVideoFlag_SrcContentHintNone      = 0 * 0x0004,
-    MFVideoFlag_SrcContentHint16x9      = 1 * 0x0004,
-    MFVideoFlag_SrcContentHint235_1     = 2 * 0x0004,
-    MFVideoFlag_AnalogProtected         = 0x0020,
-    MFVideoFlag_DigitallyProtected      = 0x0040,
-    MFVideoFlag_ProgressiveContent      = 0x0080,
-    MFVideoFlag_FieldRepeatCountMask    = 0x0100 | 0x0200 | 0x0400,
-    MFVideoFlag_FieldRepeatCountShift   = 8,
-    MFVideoFlag_ProgressiveSeqReset     = 0x0800,
-    MFVideoFlag_PanScanEnabled          = 0x20000,
-    MFVideoFlag_LowerFieldFirst         = 0x40000,
-    MFVideoFlag_BottomUpLinearRep       = 0x80000,
-    MFVideoFlags_DXVASurface            = 0x100000,
-    MFVideoFlags_RenderTargetSurface    = 0x400000,
-    MFVideoFlags_ForceQWORD             = 0x7FFFFFFF
-} MFVideoFlags;
+cpp_quote("")
+[object, uuid (e7174cfa-1c9e-48b1-8866-626226bfc258), local]
+interface IMFDXGIBuffer : IUnknown {
+  HRESULT GetResource ([in] REFIID riid,[out] LPVOID *ppvObject);
+  HRESULT GetSubresourceIndex ([out] UINT *puSubresource);
+  HRESULT GetUnknown ([in] REFIID guid,[in] REFIID riid,[out] LPVOID *ppvObject);
+  HRESULT SetUnknown ([in] REFIID guid,[in] IUnknown *pUnkData);
+};
 
-typedef struct _MFRatio {
-    DWORD Numerator;
-    DWORD Denominator;
-} MFRatio;
+cpp_quote("")
+[object, uuid (44ae0fa8-ea31-4109-8d2e-4cae4997c555), local]
+interface IMFMediaType : IMFAttributes {
+  HRESULT GetMajorType ([out] GUID *pguidMajorType);
+  HRESULT IsCompressedFormat ([out] WINBOOL *pfCompressed);
+  HRESULT IsEqual ([in] IMFMediaType *pIMediaType,[out] DWORD *pdwFlags);
+  HRESULT GetRepresentation ([in] GUID guidRepresentation,[out] LPVOID *ppvRepresentation);
+  HRESULT FreeRepresentation ([in] GUID guidRepresentation,[in] LPVOID pvRepresentation);
+};
 
-typedef struct _MFOffset {
-    WORD  fract;
-    short value;
-} MFOffset;
+cpp_quote("")
+cpp_quote("#define MF_MEDIATYPE_EQUAL_MAJOR_TYPES 0x00000001")
+cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_TYPES 0x00000002")
+cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_DATA 0x00000004")
+cpp_quote("#define MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA 0x00000008")
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
+[object, uuid (26a0adc3-ce26-4672-9304-69552edd3faf), local]
+interface IMFAudioMediaType : IMFMediaType {
+  const WAVEFORMATEX *GetAudioFormat ();
+};
+cpp_quote("")
+cpp_quote("#ifndef _WINGDI_")
+#ifndef RGBQUAD
+typedef DWORD RGBQUAD;
+#endif
 
-typedef struct _MFVideoArea {
-    MFOffset OffsetX;
-    MFOffset OffsetY;
-    SIZE     Area;
-} MFVideoArea;
+cpp_quote("")
+typedef struct {
+  DWORD biSize;
+  LONG biWidth;
+  LONG biHeight;
+  WORD biPlanes;
+  WORD biBitCount;
+  DWORD biCompression;
+  DWORD biSizeImage;
+  LONG biXPelsPerMeter;
+  LONG biYPelsPerMeter;
+  DWORD biClrUsed;
+  DWORD biClrImportant;
+} BITMAPINFOHEADER;
+
+cpp_quote("")
+typedef struct {
+  BITMAPINFOHEADER bmiHeader;
+  RGBQUAD bmiColors[1];
+} BITMAPINFO;
+cpp_quote("#endif")
 
-typedef enum _MFVideoChromaSubsampling {
-    MFVideoChromaSubsampling_Unknown                        = 0,
-    MFVideoChromaSubsampling_ProgressiveChroma              = 0x8,
-    MFVideoChromaSubsampling_Horizontally_Cosited           = 0x4,
-    MFVideoChromaSubsampling_Vertically_Cosited             = 0x2,
-    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 0x1,
-    MFVideoChromaSubsampling_MPEG2
-        = MFVideoChromaSubsampling_Horizontally_Cosited
-        | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_MPEG1
-        = MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_DV_PAL
-        = MFVideoChromaSubsampling_Horizontally_Cosited
-        | MFVideoChromaSubsampling_Vertically_Cosited,
-    MFVideoChromaSubsampling_Cosited
-        = MFVideoChromaSubsampling_Horizontally_Cosited
-        | MFVideoChromaSubsampling_Vertically_Cosited
-        | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
-    MFVideoChromaSubsampling_Last        = MFVideoChromaSubsampling_Cosited + 1,
-    MFVideoChromaSubsampling_ForceDWORD  = 0x7fffffff
-} MFVideoChromaSubsampling;
+cpp_quote("")
+typedef struct {
+  GUID guidMajorType;
+  GUID guidSubtype;
+} MFT_REGISTER_TYPE_INFO;
+cpp_quote("#endif")
 
+cpp_quote("#ifndef _MFVIDEOFORMAT_")
+cpp_quote("#define _MFVIDEOFORMAT_")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
 typedef enum _MFVideoInterlaceMode {
-    MFVideoInterlace_Unknown                     = 0,
-    MFVideoInterlace_Progressive                 = 2,
-    MFVideoInterlace_FieldInterleavedUpperFirst  = 3,
-    MFVideoInterlace_FieldInterleavedLowerFirst  = 4,
-    MFVideoInterlace_FieldSingleUpper            = 5,
-    MFVideoInterlace_FieldSingleLower            = 6,
-    MFVideoInterlace_MixedInterlaceOrProgressive = 7,
-    MFVideoInterlace_Last,
-    MFVideoInterlace_ForceDWORD                  = 0x7fffffff
+  MFVideoInterlace_Unknown = 0,
+  MFVideoInterlace_Progressive = 2,
+  MFVideoInterlace_FieldInterleavedUpperFirst = 3,
+  MFVideoInterlace_FieldInterleavedLowerFirst = 4,
+  MFVideoInterlace_FieldSingleUpper = 5,
+  MFVideoInterlace_FieldSingleLower = 6,
+  MFVideoInterlace_MixedInterlaceOrProgressive= 7,
+  MFVideoInterlace_Last,
+  MFVideoInterlace_ForceDWORD = 0x7fffffff
 } MFVideoInterlaceMode;
+cpp_quote("")
+cpp_quote("#define MFVideoInterlace_FieldSingleUpperFirst MFVideoInterlace_FieldSingleUpper")
+cpp_quote("#define MFVideoInterlace_FieldSingleLowerFirst MFVideoInterlace_FieldSingleLower")
 
+cpp_quote("")
 typedef enum _MFVideoTransferFunction {
-    MFVideoTransFunc_Unknown      = 0,
-    MFVideoTransFunc_10           = 1,
-    MFVideoTransFunc_18           = 2,
-    MFVideoTransFunc_20           = 3,
-    MFVideoTransFunc_22           = 4,
-    MFVideoTransFunc_709          = 5,
-    MFVideoTransFunc_240M         = 6,
-    MFVideoTransFunc_sRGB         = 7,
-    MFVideoTransFunc_28           = 8,
-    MFVideoTransFunc_Log_100      = 9,
-    MFVideoTransFunc_Log_316      = 10,
-    MFVideoTransFunc_709_sym      = 11,
-    MFVideoTransFunc_Last,
-    MFVideoTransFunc_ForceDWORD   = 0x7FFFFFFF
+  MFVideoTransFunc_Unknown = 0,
+  MFVideoTransFunc_10 = 1,
+  MFVideoTransFunc_18 = 2,
+  MFVideoTransFunc_20 = 3,
+  MFVideoTransFunc_22 = 4,
+  MFVideoTransFunc_709 = 5,
+  MFVideoTransFunc_240M = 6,
+  MFVideoTransFunc_sRGB = 7,
+  MFVideoTransFunc_28 = 8,
+#if WINVER >= 0x0601
+  MFVideoTransFunc_Log_100 = 9,
+  MFVideoTransFunc_Log_316 = 10,
+  MFVideoTransFunc_709_sym = 11,
+#endif
+  MFVideoTransFunc_Last,
+  MFVideoTransFunc_ForceDWORD = 0x7fffffff
 } MFVideoTransferFunction;
 
-typedef enum _MFVideoTransferMatrix {
-    MFVideoTransferMatrix_Unknown      = 0,
-    MFVideoTransferMatrix_BT709        = 1,
-    MFVideoTransferMatrix_BT601        = 2,
-    MFVideoTransferMatrix_SMPTE240M    = 3,
-    MFVideoTransferMatrix_Last,
-    MFVideoTransferMatrix_ForceDWORD   = 0x7FFFFFFF
-} MFVideoTransferMatrix;
-
+cpp_quote("")
 typedef enum _MFVideoPrimaries {
-    MFVideoPrimaries_Unknown         = 0,
-    MFVideoPrimaries_reserved        = 1,
-    MFVideoPrimaries_BT709           = 2,
-    MFVideoPrimaries_BT470_2_SysM    = 3,
-    MFVideoPrimaries_BT470_2_SysBG   = 4,
-    MFVideoPrimaries_SMPTE170M       = 5,
-    MFVideoPrimaries_SMPTE240M       = 6,
-    MFVideoPrimaries_EBU3213         = 7,
-    MFVideoPrimaries_SMPTE_C         = 8,
-    MFVideoPrimaries_Last,
-    MFVideoPrimaries_ForceDWORD      = 0x7FFFFFFF
+  MFVideoPrimaries_Unknown = 0,
+  MFVideoPrimaries_reserved = 1,
+  MFVideoPrimaries_BT709 = 2,
+  MFVideoPrimaries_BT470_2_SysM = 3,
+  MFVideoPrimaries_BT470_2_SysBG = 4,
+  MFVideoPrimaries_SMPTE170M = 5,
+  MFVideoPrimaries_SMPTE240M = 6,
+  MFVideoPrimaries_EBU3213 = 7,
+  MFVideoPrimaries_SMPTE_C = 8,
+  MFVideoPrimaries_Last,
+  MFVideoPrimaries_ForceDWORD = 0x7fffffff
 } MFVideoPrimaries;
 
+cpp_quote("")
 typedef enum _MFVideoLighting {
-  MFVideoLighting_Unknown      = 0,
-  MFVideoLighting_bright       = 1,
-  MFVideoLighting_office       = 2,
-  MFVideoLighting_dim          = 3,
-  MFVideoLighting_dark         = 4,
+  MFVideoLighting_Unknown = 0,
+  MFVideoLighting_bright=1,
+  MFVideoLighting_office=2,
+  MFVideoLighting_dim=3,
+  MFVideoLighting_dark=4,
   MFVideoLighting_Last,
-  MFVideoLighting_ForceDWORD   = 0x7FFFFFFF
+  MFVideoLighting_ForceDWORD = 0x7fffffff
 } MFVideoLighting;
 
+cpp_quote("")
+typedef enum _MFVideoTransferMatrix {
+  MFVideoTransferMatrix_Unknown = 0,
+  MFVideoTransferMatrix_BT709 = 1,
+  MFVideoTransferMatrix_BT601 = 2,
+  MFVideoTransferMatrix_SMPTE240M = 3,
+  MFVideoTransferMatrix_Last,
+  MFVideoTransferMatrix_ForceDWORD = 0x7fffffff
+} MFVideoTransferMatrix;
+
+cpp_quote("")
+typedef enum _MFVideoChromaSubsampling {
+  MFVideoChromaSubsampling_Unknown = 0,
+  MFVideoChromaSubsampling_ProgressiveChroma = 0x8,
+  MFVideoChromaSubsampling_Horizontally_Cosited = 0x4,
+  MFVideoChromaSubsampling_Vertically_Cosited = 0x2,
+  MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 0x1,
+  MFVideoChromaSubsampling_MPEG2 = MFVideoChromaSubsampling_Horizontally_Cosited |
+  MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+  MFVideoChromaSubsampling_MPEG1 = MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+  MFVideoChromaSubsampling_DV_PAL = MFVideoChromaSubsampling_Horizontally_Cosited |
+  MFVideoChromaSubsampling_Vertically_Cosited,
+  MFVideoChromaSubsampling_Cosited = MFVideoChromaSubsampling_Horizontally_Cosited |
+  MFVideoChromaSubsampling_Vertically_Cosited |
+  MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
+  MFVideoChromaSubsampling_Last = MFVideoChromaSubsampling_Cosited+1,
+  MFVideoChromaSubsampling_ForceDWORD = 0x7fffffff
+} MFVideoChromaSubsampling;
+
+cpp_quote("")
 typedef enum _MFNominalRange {
-    MFNominalRange_Unknown   = 0,
-    MFNominalRange_Normal    = 1,
-    MFNominalRange_Wide      = 2,
-    MFNominalRange_0_255     = 1,
-    MFNominalRange_16_235    = 2,
-    MFNominalRange_48_208    = 3,
-    MFNominalRange_64_127    = 4
+  MFNominalRange_Unknown = 0,
+  MFNominalRange_Normal = 1,
+  MFNominalRange_Wide = 2,
+  MFNominalRange_0_255 = 1,
+  MFNominalRange_16_235 = 2,
+  MFNominalRange_48_208 = 3,
+#if WINVER >= 0x0601
+  MFNominalRange_64_127 = 4,
+#endif
+  MFNominalRange_Last,
+  MFNominalRange_ForceDWORD = 0x7fffffff
 } MFNominalRange;
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
 
+typedef enum _MFVideoFlags {
+  MFVideoFlag_PAD_TO_Mask = 0x0001 | 0x0002,
+  MFVideoFlag_PAD_TO_None = 0 *0x0001,
+  MFVideoFlag_PAD_TO_4x3 = 1 *0x0001,
+  MFVideoFlag_PAD_TO_16x9 = 2 *0x0001,
+  MFVideoFlag_SrcContentHintMask = 0x0004 | 0x0008 | 0x0010,
+  MFVideoFlag_SrcContentHintNone = 0 *0x0004,
+  MFVideoFlag_SrcContentHint16x9 = 1 *0x0004,
+  MFVideoFlag_SrcContentHint235_1 = 2 *0x0004,
+  MFVideoFlag_AnalogProtected = 0x0020,
+  MFVideoFlag_DigitallyProtected = 0x0040,
+  MFVideoFlag_ProgressiveContent = 0x0080,
+  MFVideoFlag_FieldRepeatCountMask = 0x0100 | 0x0200 | 0x0400,
+  MFVideoFlag_FieldRepeatCountShift = 8,
+  MFVideoFlag_ProgressiveSeqReset = 0x0800,
+  MFVideoFlag_PanScanEnabled = 0x20000,
+  MFVideoFlag_LowerFieldFirst = 0x40000,
+  MFVideoFlag_BottomUpLinearRep = 0x80000,
+  MFVideoFlags_DXVASurface = 0x100000,
+  MFVideoFlags_RenderTargetSurface = 0x400000,
+  MFVideoFlags_ForceQWORD = 0x7fffffff
+} MFVideoFlags;
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+typedef struct _MFRatio {
+  DWORD Numerator;
+  DWORD Denominator;
+} MFRatio;
+
+cpp_quote("")
+typedef struct _MFOffset {
+  WORD fract;
+  short value;
+} MFOffset;
+typedef struct _MFVideoArea {
+  MFOffset OffsetX;
+  MFOffset OffsetY;
+  SIZE Area;
+} MFVideoArea;
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
 typedef struct _MFVideoInfo {
-    DWORD                    dwWidth;
-    DWORD                    dwHeight;
-    MFRatio                  PixelAspectRatio;
-    MFVideoChromaSubsampling SourceChromaSubsampling;
-    MFVideoInterlaceMode     InterlaceMode;
-    MFVideoTransferFunction  TransferFunction;
-    MFVideoPrimaries         ColorPrimaries;
-    MFVideoTransferMatrix    TransferMatrix;
-    MFVideoLighting          SourceLighting;
-    MFRatio                  FramesPerSecond;
-    MFNominalRange           NominalRange;
-    MFVideoArea              GeometricAperture;
-    MFVideoArea              MinimumDisplayAperture;
-    MFVideoArea              PanScanAperture;
-    unsigned __int64         VideoFlags;
+  DWORD dwWidth;
+  DWORD dwHeight;
+  MFRatio PixelAspectRatio;
+  MFVideoChromaSubsampling SourceChromaSubsampling;
+  MFVideoInterlaceMode InterlaceMode;
+  MFVideoTransferFunction TransferFunction;
+  MFVideoPrimaries ColorPrimaries;
+  MFVideoTransferMatrix TransferMatrix;
+  MFVideoLighting SourceLighting;
+  MFRatio FramesPerSecond;
+  MFNominalRange NominalRange;
+  MFVideoArea GeometricAperture;
+  MFVideoArea MinimumDisplayAperture;
+  MFVideoArea PanScanAperture;
+  unsigned __int64 VideoFlags;
 } MFVideoInfo;
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+typedef struct __MFAYUVSample {
+  BYTE bCrValue;
+  BYTE bCbValue;
+  BYTE bYValue;
+  BYTE bSampleAlpha8;
+} MFAYUVSample;
 
-typedef struct _MFVideoCompressedInfo {
-    LONGLONG AvgBitrate;
-    LONGLONG AvgBitErrorRate;
-    DWORD    MaxKeyFrameSpacing;
-} MFVideoCompressedInfo;
-
+cpp_quote("")
 typedef struct _MFARGB {
-    BYTE rgbBlue;
-    BYTE rgbGreen;
-    BYTE rgbRed;
-    BYTE rgbAlpha;
+  BYTE rgbBlue;
+  BYTE rgbGreen;
+  BYTE rgbRed;
+  BYTE rgbAlpha;
 } MFARGB;
 
-typedef struct __MFAYUVSample {
-    BYTE bCrValue;
-    BYTE bCbValue;
-    BYTE bYValue;
-    BYTE bSampleAlpha8;
-} MFAYUVSample;
-
+cpp_quote("")
 typedef union _MFPaletteEntry {
-    MFARGB       ARGB;
-    MFAYUVSample AYCbCr;
+  MFARGB ARGB;
+  MFAYUVSample AYCbCr;
 } MFPaletteEntry;
-
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
 typedef struct _MFVideoSurfaceInfo {
-    DWORD          Format;
-    DWORD          PaletteEntries;
-    MFPaletteEntry Palette[];
+  DWORD Format;
+  DWORD PaletteEntries;
+  [size_is (PaletteEntries)] MFPaletteEntry Palette[];
 } MFVideoSurfaceInfo;
 
+cpp_quote("")
+typedef struct _MFVideoCompressedInfo {
+  LONGLONG AvgBitrate;
+  LONGLONG AvgBitErrorRate;
+  DWORD MaxKeyFrameSpacing;
+} MFVideoCompressedInfo;
+
+cpp_quote("")
 typedef struct _MFVIDEOFORMAT {
-    DWORD                 dwSize;
-    MFVideoInfo           videoInfo;
-    GUID                  guidFormat;
-    MFVideoCompressedInfo compressedInfo;
-    MFVideoSurfaceInfo    surfaceInfo;
+  DWORD dwSize;
+  MFVideoInfo videoInfo;
+  GUID guidFormat;
+  MFVideoCompressedInfo compressedInfo;
+  MFVideoSurfaceInfo surfaceInfo;
 } MFVIDEOFORMAT;
 
+cpp_quote("")
 typedef enum _MFStandardVideoFormat {
-  MFStdVideoFormat_reserved       = 0,
+  MFStdVideoFormat_reserved = 0,
   MFStdVideoFormat_NTSC,
   MFStdVideoFormat_PAL,
   MFStdVideoFormat_DVD_NTSC,
@@ -363,211 +439,406 @@ typedef enum _MFStandardVideoFormat {
   MFStdVideoFormat_DV_NTSC,
   MFStdVideoFormat_ATSC_SD480i,
   MFStdVideoFormat_ATSC_HD1080i,
-  MFStdVideoFormat_ATSC_HD720p
+  MFStdVideoFormat_ATSC_HD720p,
 } MFStandardVideoFormat;
+cpp_quote("#endif")
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
+[object, uuid (b99f381f-a8f9-47a2-a5af-ca3a225a3890), local]
+interface IMFVideoMediaType : IMFMediaType {
+  const MFVIDEOFORMAT *GetVideoFormat ();
+  HRESULT GetVideoRepresentation ([in] GUID guidRepresentation,[out] LPVOID *ppvRepresentation,[in] LONG lStride);
+};
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+[object, uuid (ac6b7889-0740-4d51-8619-905994a55cc6)]
+interface IMFAsyncResult : IUnknown {
+  HRESULT GetState ([out] IUnknown **ppunkState);
+  HRESULT GetStatus ();
+  HRESULT SetStatus ([in] HRESULT hrStatus);
+  HRESULT GetObject ([out] IUnknown **ppObject);
+  [local] IUnknown *GetStateNoAddRef ();
+};
 
-[
-    object,
-    uuid(b99f381f-a8f9-47a2-a5af-ca3a225a3890),
-    local
-]
-interface IMFVideoMediaType : IMFMediaType
-{
-    const MFVIDEOFORMAT *GetVideoFormat();
-
-    HRESULT GetVideoRepresentation([in] GUID guidRepresentation, [out] LPVOID *ppvRepresentation,
-            [in] LONG lStride);
-}
-
-[
-    object,
-    uuid(ac6b7889-0740-4d51-8619-905994a55cc6)
-]
-interface IMFAsyncResult : IUnknown
-{
-    HRESULT GetState([out] IUnknown **ppunkState);
-    HRESULT GetStatus();
-    HRESULT SetStatus([in] HRESULT hrStatus);
-    HRESULT GetObject([out] IUnknown **ppObject);
-    [local] IUnknown *GetStateNoAddRef();
-}
-
-[
-    object,
-    uuid(a27003cf-2354-4f2a-8d6a-ab7cff15437e),
-]
-interface IMFAsyncCallback : IUnknown
-{
-    HRESULT GetParameters([out] DWORD *pdwFlags, [out] DWORD *pdwQueue);
-    HRESULT Invoke([in] IMFAsyncResult *pAsyncResult);
+cpp_quote("")
+[object, uuid (a27003cf-2354-4f2a-8d6a-ab7cff15437e),]
+interface IMFAsyncCallback : IUnknown {
+  HRESULT GetParameters ([out] DWORD *pdwFlags,[out] DWORD *pdwQueue);
+  HRESULT Invoke ([in] IMFAsyncResult *pAsyncResult);
 }
-
-[
-    object,
-    uuid(a27003d0-2354-4f2a-8d6a-ab7cff15437e),
-]
-interface IMFRemoteAsyncCallback : IUnknown
-{
-    HRESULT Invoke([in] HRESULT hr, [in] IUnknown *pRemoteResult);
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
+[object, uuid (c7a4dca1-f5f0-47b6-b92b-bf0106d25791), local]
+interface IMFAsyncCallbackLogging : IMFAsyncCallback {
+  void *GetObjectPointer ();
+  DWORD GetObjectTag ();
 }
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+cpp_quote("#define MFASYNC_FAST_IO_PROCESSING_CALLBACK 0x00000001")
+cpp_quote("#define MFASYNC_SIGNAL_CALLBACK 0x00000002")
+cpp_quote("#define MFASYNC_BLOCKING_CALLBACK 0x00000004")
+cpp_quote("#define MFASYNC_REPLY_CALLBACK 0x00000008")
+cpp_quote("#define MFASYNC_LOCALIZE_REMOTE_CALLBACK 0x00000010")
+cpp_quote("")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_UNDEFINED 0x00000000")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_STANDARD 0x00000001")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_RT 0x00000002")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_IO 0x00000003")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_TIMER 0x00000004")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_MULTITHREADED 0x00000005")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION 0x00000007")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK 0xFFFF0000")
+cpp_quote("#define MFASYNC_CALLBACK_QUEUE_ALL 0xFFFFFFFF")
+
+cpp_quote("")
+enum {
+  MEUnknown = 0,
+  MEError = 1,
+  MEExtendedType = 2,
+  MENonFatalError = 3,
+  MEGenericV1Anchor = MENonFatalError,
+  MESessionUnknown = 100,
+  MESessionTopologySet = 101,
+  MESessionTopologiesCleared = 102,
+  MESessionStarted = 103,
+  MESessionPaused = 104,
+  MESessionStopped = 105,
+  MESessionClosed = 106,
+  MESessionEnded = 107,
+  MESessionRateChanged = 108,
+  MESessionScrubSampleComplete = 109,
+  MESessionCapabilitiesChanged = 110,
+  MESessionTopologyStatus = 111,
+  MESessionNotifyPresentationTime = 112,
+  MENewPresentation = 113,
+  MELicenseAcquisitionStart = 114,
+  MELicenseAcquisitionCompleted = 115,
+  MEIndividualizationStart = 116,
+  MEIndividualizationCompleted = 117,
+  MEEnablerProgress = 118,
+  MEEnablerCompleted = 119,
+  MEPolicyError = 120,
+  MEPolicyReport = 121,
+  MEBufferingStarted = 122,
+  MEBufferingStopped = 123,
+  MEConnectStart = 124,
+  MEConnectEnd = 125,
+  MEReconnectStart = 126,
+  MEReconnectEnd = 127,
+  MERendererEvent = 128,
+  MESessionStreamSinkFormatChanged = 129,
+  MESessionV1Anchor = MESessionStreamSinkFormatChanged,
+  MESourceUnknown = 200,
+  MESourceStarted = 201,
+  MEStreamStarted = 202,
+  MESourceSeeked = 203,
+  MEStreamSeeked = 204,
+  MENewStream = 205,
+  MEUpdatedStream = 206,
+  MESourceStopped = 207,
+  MEStreamStopped = 208,
+  MESourcePaused = 209,
+  MEStreamPaused = 210,
+  MEEndOfPresentation = 211,
+  MEEndOfStream = 212,
+  MEMediaSample = 213,
+  MEStreamTick = 214,
+  MEStreamThinMode = 215,
+  MEStreamFormatChanged = 216,
+  MESourceRateChanged = 217,
+  MEEndOfPresentationSegment = 218,
+  MESourceCharacteristicsChanged = 219,
+  MESourceRateChangeRequested = 220,
+  MESourceMetadataChanged = 221,
+  MESequencerSourceTopologyUpdated = 222,
+  MESourceV1Anchor = MESequencerSourceTopologyUpdated,
+  MESinkUnknown = 300,
+  MEStreamSinkStarted = 301,
+  MEStreamSinkStopped = 302,
+  MEStreamSinkPaused = 303,
+  MEStreamSinkRateChanged = 304,
+  MEStreamSinkRequestSample = 305,
+  MEStreamSinkMarker = 306,
+  MEStreamSinkPrerolled = 307,
+  MEStreamSinkScrubSampleComplete = 308,
+  MEStreamSinkFormatChanged = 309,
+  MEStreamSinkDeviceChanged = 310,
+  MEQualityNotify = 311,
+  MESinkInvalidated = 312,
+  MEAudioSessionNameChanged = 313,
+  MEAudioSessionVolumeChanged = 314,
+  MEAudioSessionDeviceRemoved = 315,
+  MEAudioSessionServerShutdown = 316,
+  MEAudioSessionGroupingParamChanged = 317,
+  MEAudioSessionIconChanged = 318,
+  MEAudioSessionFormatChanged = 319,
+  MEAudioSessionDisconnected = 320,
+  MEAudioSessionExclusiveModeOverride = 321,
+  MESinkV1Anchor = MEAudioSessionExclusiveModeOverride,
+#if WINVER >= 0x0602
+  MECaptureAudioSessionVolumeChanged = 322,
+  MECaptureAudioSessionDeviceRemoved = 323,
+  MECaptureAudioSessionFormatChanged = 324,
+  MECaptureAudioSessionDisconnected = 325,
+  MECaptureAudioSessionExclusiveModeOverride = 326,
+  MECaptureAudioSessionServerShutdown = 327,
+  MESinkV2Anchor = MECaptureAudioSessionServerShutdown,
+#endif
+  METrustUnknown = 400,
+  MEPolicyChanged = 401,
+  MEContentProtectionMessage = 402,
+  MEPolicySet = 403,
+  METrustV1Anchor = MEPolicySet,
+  MEWMDRMLicenseBackupCompleted = 500,
+  MEWMDRMLicenseBackupProgress = 501,
+  MEWMDRMLicenseRestoreCompleted = 502,
+  MEWMDRMLicenseRestoreProgress = 503,
+  MEWMDRMLicenseAcquisitionCompleted = 506,
+  MEWMDRMIndividualizationCompleted = 508,
+  MEWMDRMIndividualizationProgress = 513,
+  MEWMDRMProximityCompleted = 514,
+  MEWMDRMLicenseStoreCleaned = 515,
+  MEWMDRMRevocationDownloadCompleted = 516,
+  MEWMDRMV1Anchor = MEWMDRMRevocationDownloadCompleted,
+#if WINVER >= 0x0601
+  METransformUnknown = 600,
+  METransformNeedInput,
+  METransformHaveOutput,
+  METransformDrainComplete,
+  METransformMarker,
+#endif
+#if WINVER >= 0x0602
+  MEByteStreamCharacteristicsChanged = 700,
+  MEVideoCaptureDeviceRemoved = 800,
+  MEVideoCaptureDevicePreempted = 801,
+#endif
+  MEReservedMax = 10000
+};
 
-cpp_quote("#define MFASYNC_FAST_IO_PROCESSING_CALLBACK  0x0001")
-cpp_quote("#define MFASYNC_SIGNAL_CALLBACK              0x0002" )
-
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_UNDEFINED      0x00000000")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_STANDARD       0x00000001")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_RT             0x00000002")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_IO             0x00000003")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_TIMER          0x00000004")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION  0x00000007")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK   0xffff0000")
-cpp_quote("#define MFASYNC_CALLBACK_QUEUE_ALL            0xffffffff")
-
+cpp_quote("")
 typedef DWORD MediaEventType;
 
-[
-    object,
-    uuid(df598932-f10c-4e39-bba2-c308f101daa3)
-]
-interface IMFMediaEvent : IMFAttributes
-{
-    HRESULT GetType([out] MediaEventType *pmet);
-    HRESULT GetExtendedType([out] GUID *pguidExtendedType);
-    HRESULT GetStatus([out] HRESULT *phrStatus);
-    HRESULT GetValue([out] PROPVARIANT *pvValue);
+cpp_quote("")
+[object, uuid (DF598932-F10C-4e39-BBA2-C308F101DAA3)]
+interface IMFMediaEvent : IMFAttributes {
+  HRESULT GetType ([out] MediaEventType *pmet);
+  HRESULT GetExtendedType ([out] GUID *pguidExtendedType);
+  HRESULT GetStatus ([out] HRESULT *phrStatus);
+  HRESULT GetValue ([out] PROPVARIANT *pvValue);
 }
 
-[
-    object,
-    uuid(2cd0bd52-bcd5-4b89-b62c-eadc0c031e7d)
-]
-interface IMFMediaEventGenerator : IUnknown
-{
-    HRESULT GetEvent([in] DWORD dwFlags, [out] IMFMediaEvent **ppEvent);
-
-    [local] HRESULT BeginGetEvent([in] IMFAsyncCallback *pCallback, [in] IUnknown *punkState);
-    [call_as(BeginGetEvent)] HRESULT RemoteBeginGetEvent([in] IMFRemoteAsyncCallback *pCallback);
-
-    [local] HRESULT EndGetEvent([in] IMFAsyncResult *pResult, [out] IMFMediaEvent **ppEvent);
-    [call_as(EndGetEvent)] HRESULT RemoteEndGetEvent([in] IUnknown *pResult, [out] DWORD *pcbEvent,
-                                   [out, size_is(,*pcbEvent)] BYTE **ppbEvent);
-
-    HRESULT QueueEvent([in] MediaEventType met, [in] REFGUID guidExtendedType, [in] HRESULT hrStatus,
-            [in, unique] const PROPVARIANT *pvValue);
+cpp_quote("")
+cpp_quote("#define MF_EVENT_FLAG_NO_WAIT 0x00000001")
+
+cpp_quote("")
+interface IMFRemoteAsyncCallback;
+
+cpp_quote("")
+[object, uuid (2cd0bd52-BCD5-4b89-B62C-EADC0C031E7D)]
+interface IMFMediaEventGenerator : IUnknown {
+  HRESULT GetEvent ([in] DWORD dwFlags,[out] IMFMediaEvent **ppEvent);
+  [local] HRESULT BeginGetEvent ([in] IMFAsyncCallback *pCallback,[in] IUnknown *punkState);
+  [call_as (BeginGetEvent)] HRESULT RemoteBeginGetEvent ([in] IMFRemoteAsyncCallback *pCallback);
+  [local] HRESULT EndGetEvent ([in] IMFAsyncResult *pResult,[out] IMFMediaEvent **ppEvent);
+  [call_as (EndGetEvent)] HRESULT RemoteEndGetEvent ([in] IUnknown *pResult,[out] DWORD *pcbEvent,[out, size_is (,*pcbEvent)] BYTE **ppbEvent);
+  HRESULT QueueEvent ([in] MediaEventType met,[in] REFGUID guidExtendedType,[in] HRESULT hrStatus,[in, unique] const PROPVARIANT *pvValue);
 }
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
+[object, uuid (a27003d0-2354-4f2a-8d6a-ab7cff15437e),]
+interface IMFRemoteAsyncCallback : IUnknown {
+  HRESULT Invoke ([in] HRESULT hr,[in] IUnknown *pRemoteResult);
+};
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
 
+cpp_quote("")
 typedef enum _MFBYTESTREAM_SEEK_ORIGIN {
-    msoBegin,
-    msoCurrent
+  msoBegin,
+  msoCurrent
 } MFBYTESTREAM_SEEK_ORIGIN;
 
-[
-    object,
-    uuid(ad4c1b00-4bf7-422f-9175-756693d9130d),
-]
-interface IMFByteStream : IUnknown
-{
-    HRESULT GetCapabilities([out] DWORD *pdwCapabilities);
-    HRESULT GetLength([out] QWORD *pqwLength);
-    HRESULT SetLength([in] QWORD qwLength);
-    HRESULT GetCurrentPosition([out] QWORD *pqwPosition);
-    HRESULT SetCurrentPosition([in] QWORD qwPosition);
-    HRESULT IsEndOfStream([out] BOOL *pfEndOfStream);
-
-    [local] HRESULT Read([in] BYTE* pb, [in] ULONG cb, [out] ULONG *pcbRead);
-    [local] HRESULT BeginRead([in] BYTE *pb, [in] ULONG cb, [in] IMFAsyncCallback *pCallback, [in] IUnknown *punkState);
-    [local] HRESULT EndRead([in] IMFAsyncResult *pResult, [out] ULONG *pcbRead);
-    [local] HRESULT Write([in] const BYTE *pb, [in] ULONG cb, [out] ULONG *pcbWritten);
-    [local] HRESULT BeginWrite([in] const BYTE *pb, [in] ULONG cb, [in] IMFAsyncCallback *pCallback, [in] IUnknown *punkState);
-    [local] HRESULT EndWrite([in] IMFAsyncResult *pResult, [out] ULONG *pcbWritten);
-    [local] HRESULT Seek([in] MFBYTESTREAM_SEEK_ORIGIN SeekOrigin, [in] LONGLONG llSeekOffset, [in] DWORD dwSeekFlags,
-                    [out] QWORD *pqwCurrentPosition);
-
-    HRESULT Flush();
-    HRESULT Close();
-}
+cpp_quote("")
+[object, uuid (ad4c1b00-4bf7-422f-9175-756693d9130d),]
+interface IMFByteStream : IUnknown {
+  HRESULT GetCapabilities ([out] DWORD *pdwCapabilities);
+  HRESULT GetLength ([out] QWORD *pqwLength);
+  HRESULT SetLength ([in] QWORD qwLength);
+  HRESULT GetCurrentPosition ([out] QWORD *pqwPosition);
+  HRESULT SetCurrentPosition ([in] QWORD qwPosition);
+  HRESULT IsEndOfStream ([out] WINBOOL *pfEndOfStream);
+  HRESULT Read ([out, size_is (cb)] BYTE *pb,[in] ULONG cb,[out] ULONG *pcbRead);
+  [local] HRESULT BeginRead ([out] BYTE *pb,[in] ULONG cb,[in] IMFAsyncCallback *pCallback,[in] IUnknown *punkState);
+  [call_as (BeginRead)] HRESULT RemoteBeginRead ([in] ULONG cb,[in] IMFRemoteAsyncCallback *pCallback);
+  [local] HRESULT EndRead ([in] IMFAsyncResult *pResult,[out] ULONG *pcbRead);
+  [call_as (EndRead)] HRESULT RemoteEndRead ([in] IUnknown *punkResult,[out, size_is (cb)] BYTE *pb,[in] ULONG cb,[out] ULONG *pcbRead);
+  HRESULT Write ([in, size_is (cb)] const BYTE *pb,[in] ULONG cb,[out] ULONG *pcbWritten);
+  [local] HRESULT BeginWrite ([in] const BYTE *pb,[in] ULONG cb,[in] IMFAsyncCallback *pCallback,[in] IUnknown *punkState);
+  [call_as (BeginWrite)] HRESULT RemoteBeginWrite ([in, size_is (cb)] const BYTE *pb,[in] ULONG cb,[in] IMFRemoteAsyncCallback *pCallback);
+  [local] HRESULT EndWrite ([in] IMFAsyncResult *pResult,[out] ULONG *pcbWritten);
+  [call_as (EndWrite)] HRESULT RemoteEndWrite ([in] IUnknown *punkResult,[out] ULONG *pcbWritten);
+  HRESULT Seek ([in] MFBYTESTREAM_SEEK_ORIGIN SeekOrigin,[in] LONGLONG llSeekOffset,[in] DWORD dwSeekFlags,[out] QWORD *pqwCurrentPosition);
+  HRESULT Flush ();
+  HRESULT Close ();
+};
+
+cpp_quote("")
+cpp_quote("#define MFBYTESTREAM_IS_READABLE 0x00000001")
+cpp_quote("#define MFBYTESTREAM_IS_WRITABLE 0x00000002")
+cpp_quote("#define MFBYTESTREAM_IS_SEEKABLE 0x00000004")
+cpp_quote("#define MFBYTESTREAM_IS_REMOTE 0x00000008")
+cpp_quote("#define MFBYTESTREAM_IS_DIRECTORY 0x00000080")
+cpp_quote("#define MFBYTESTREAM_HAS_SLOW_SEEK 0x00000100")
+cpp_quote("#define MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED 0x00000200")
+cpp_quote("#if WINVER >= _WIN32_WINNT_WIN7")
+cpp_quote("#define MFBYTESTREAM_SHARE_WRITE 0x00000400")
+cpp_quote("#endif")
+cpp_quote("#if WINVER >= _WIN32_WINNT_WIN8")
+cpp_quote("#define MFBYTESTREAM_DOES_NOT_USE_NETWORK 0x00000800")
+cpp_quote("#endif")
+
+cpp_quote("")
+cpp_quote("#define MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO 0x00000001")
+cpp_quote("")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_ORIGIN_NAME, 0xfc358288, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_CONTENT_TYPE, 0xfc358289, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_DURATION, 0xfc35828a, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_LAST_MODIFIED_TIME, 0xfc35828b, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("#if (WINVER >= _WIN32_WINNT_WIN7)")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_IFO_FILE_URI, 0xfc35828c, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_DLNA_PROFILE_ID, 0xfc35828d, 0x3cb6, 0x460c, 0xa4, 0x24, 0xb6, 0x68, 0x12, 0x60, 0x37, 0x5a);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_EFFECTIVE_URL, 0x9afa0209, 0x89d1, 0x42af, 0x84, 0x56, 0x1d, 0xe6, 0xb5, 0x62, 0xd6, 0x91);")
+cpp_quote("EXTERN_GUID( MF_BYTESTREAM_TRANSCODED, 0xb6c5c282, 0x4dc9, 0x4db9, 0xab, 0x48, 0xcf, 0x3b, 0x6d, 0x8b, 0xc5, 0xe0 );")
+cpp_quote("#endif")
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
+cpp_quote("EXTERN_GUID(CLSID_MFByteStreamProxyClassFactory, 0x770e8e77, 0x4916, 0x441c, 0xa9, 0xa7, 0xb3, 0x42, 0xd0, 0xee, 0xbc, 0x71 );")
+
+cpp_quote("")
+[object, uuid (a6b43f84-5c0a-42e8-a44d-b1857a76992f)]
+interface IMFByteStreamProxyClassFactory : IUnknown {
+  HRESULT CreateByteStreamProxy ([in] IMFByteStream *pByteStream,[in, unique] IMFAttributes *pAttributes,[in] REFIID riid,[out, iid_is (riid)] LPVOID *ppvObject);
+};
 
-cpp_quote("#define MFBYTESTREAM_IS_READABLE                0x00000001")
-cpp_quote("#define MFBYTESTREAM_IS_WRITABLE                0x00000002")
-cpp_quote("#define MFBYTESTREAM_IS_SEEKABLE                0x00000004")
-cpp_quote("#define MFBYTESTREAM_IS_REMOTE                  0x00000008")
-cpp_quote("#define MFBYTESTREAM_IS_DIRECTORY               0x00000080")
-cpp_quote("#define MFBYTESTREAM_HAS_SLOW_SEEK              0x00000100")
-cpp_quote("#define MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED    0x00000200")
-cpp_quote("#define MFBYTESTREAM_SHARE_WRITE                0x00000400")
-
-cpp_quote("#define MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO  0x00000001")
-
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_ORIGIN_NAME,        0xfc358288,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_CONTENT_TYPE,       0xfc358289,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_DURATION,           0xfc35828a,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_LAST_MODIFIED_TIME, 0xfc35828b,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_IFO_FILE_URI,       0xfc35828c,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-cpp_quote("EXTERN_GUID(MF_BYTESTREAM_DLNA_PROFILE_ID,    0xfc35828d,0x3cb6,0x460c,0xa4,0x24,0xb6,0x68,0x12,0x60,0x37,0x5a);")
-
-typedef enum MF_FILE_ACCESSMODE {
-    MF_ACCESSMODE_READ      = 1,
-    MF_ACCESSMODE_WRITE     = 2,
-    MF_ACCESSMODE_READWRITE = 3 
+cpp_quote("")
+typedef enum {
+  MF_ACCESSMODE_READ = 1,
+  MF_ACCESSMODE_WRITE = 2,
+  MF_ACCESSMODE_READWRITE = 3
 } MF_FILE_ACCESSMODE;
 
-typedef enum  {
-    MF_OPENMODE_FAIL_IF_NOT_EXIST   = 0,
-    MF_OPENMODE_FAIL_IF_EXIST       = 1,
-    MF_OPENMODE_RESET_IF_EXIST      = 2,
-    MF_OPENMODE_APPEND_IF_EXIST     = 3,
-    MF_OPENMODE_DELETE_IF_EXIST     = 4 
+cpp_quote("")
+typedef enum {
+  MF_OPENMODE_FAIL_IF_NOT_EXIST = 0,
+  MF_OPENMODE_FAIL_IF_EXIST = 1,
+  MF_OPENMODE_RESET_IF_EXIST = 2,
+  MF_OPENMODE_APPEND_IF_EXIST = 3,
+  MF_OPENMODE_DELETE_IF_EXIST = 4
 } MF_FILE_OPENMODE;
 
-typedef enum  {
-    MF_FILEFLAGS_NONE                  = 0x00000000,
-    MF_FILEFLAGS_NOBUFFERING           = 0x00000001,
-    MF_FILEFLAGS_ALLOW_WRITE_SHARING   = 0x00000002 
+cpp_quote("")
+typedef enum {
+  MF_FILEFLAGS_NONE = 0x00000000,
+  MF_FILEFLAGS_NOBUFFERING = 0x00000001
+#if WINVER >= 0x0601
+  , MF_FILEFLAGS_ALLOW_WRITE_SHARING = 0x00000002
+#endif
 } MF_FILE_FLAGS;
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+[object, uuid (8feed468-6f7e-440d-869a-49bdd283ad0d),]
+interface IMFSampleOutputStream : IUnknown {
+  HRESULT BeginWriteSample ([in] IMFSample *pSample,[in] IMFAsyncCallback *pCallback,[in] IUnknown *punkState);
+  HRESULT EndWriteSample ([in] IMFAsyncResult *pResult);
+  HRESULT Close ();
+};
 
-[
-    object,
-    uuid(5bc8a76b-869a-46a3-9b03-fa218a66aebe)
-]
-interface IMFCollection : IUnknown
-{
-    HRESULT GetElementCount([out] DWORD *pcElements);
-    HRESULT GetElement([in] DWORD dwElementIndex, [out] IUnknown **ppUnkElement);
-    HRESULT AddElement([in] IUnknown *pUnkElement);
-    HRESULT RemoveElement([in] DWORD dwElementIndex, [out] IUnknown **ppUnkElement);
-    HRESULT InsertElementAt([in] DWORD dwIndex, [in] IUnknown *pUnknown);
-    HRESULT RemoveAllElements();
+cpp_quote("")
+[object, uuid (5bc8a76b-869a-46a3-9b03-FA218A66AEBE)]
+interface IMFCollection : IUnknown {
+  HRESULT GetElementCount ([out] DWORD *pcElements);
+  HRESULT GetElement ([in] DWORD dwElementIndex,[out] IUnknown **ppUnkElement);
+  HRESULT AddElement ([in] IUnknown *pUnkElement);
+  HRESULT RemoveElement ([in] DWORD dwElementIndex,[out] IUnknown **ppUnkElement);
+  HRESULT InsertElementAt ([in] DWORD dwIndex,[in]IUnknown *pUnknown);
+  HRESULT RemoveAllElements ();
 }
 
-[
-    object,
-    uuid(7fee9e9a-4a89-47a6-899c-b6a53a70fb67),
-    pointer_default(unique)
-]
-interface IMFActivate : IMFAttributes
-{
-    HRESULT ActivateObject([in] REFIID riid, [out, iid_is(riid), retval] void ** ppv);
-    HRESULT ShutdownObject();
-    HRESULT DetachObject();
+cpp_quote("")
+[object, uuid (36f846fc-2256-48b6-b58e-e2b638316581), local]
+interface IMFMediaEventQueue : IUnknown {
+  HRESULT GetEvent ([in] DWORD dwFlags,[out] IMFMediaEvent **ppEvent);
+  HRESULT BeginGetEvent ([in] IMFAsyncCallback *pCallback,[in] IUnknown *punkState);
+  HRESULT EndGetEvent ([in] IMFAsyncResult *pResult,[out] IMFMediaEvent **ppEvent);
+  HRESULT QueueEvent ([in] IMFMediaEvent *pEvent);
+  HRESULT QueueEventParamVar ([in] MediaEventType met,[in] REFGUID guidExtendedType,[in] HRESULT hrStatus,[in, unique] const PROPVARIANT *pvValue);
+  HRESULT QueueEventParamUnk ([in] MediaEventType met,[in] REFGUID guidExtendedType,[in] HRESULT hrStatus,[in, unique] IUnknown *pUnk);
+  HRESULT Shutdown ();
 }
 
+cpp_quote("")
+[object, uuid (7fee9e9a-4a89-47a6-899c-B6A53A70FB67), helpstring ("IMFActivate Interface"), pointer_default (unique)]
+interface IMFActivate : IMFAttributes {
+  HRESULT ActivateObject ([in] REFIID riid,[out, iid_is (riid), retval] void **ppv);
+  HRESULT ShutdownObject ();
+  HRESULT DetachObject ();
+};
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINVER >= _WIN32_WINNT_WIN7")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
 typedef enum _MF_Plugin_Type {
-    MF_Plugin_Type_MFT           = 0,
-    MF_Plugin_Type_MediaSource   = 1
+  MF_Plugin_Type_MFT = 0,
+  MF_Plugin_Type_MediaSource = 1,
+  MF_Plugin_Type_MFT_MatchOutputType = 2,
+  MF_Plugin_Type_Other = (DWORD)-1,
 } MF_Plugin_Type;
 
-[
-    object,
-    local,
-    uuid(5c6c44bf-1db6-435b-9249-e8cd10fdec96),
-    pointer_default(unique)
-]
-interface IMFPluginControl : IUnknown
-{
-   HRESULT GetPreferredClsid(DWORD pluginType, LPCWSTR selector, CLSID *clsid);
-   HRESULT GetPreferredClsidByIndex(DWORD pluginType, DWORD index, LPWSTR *selector, CLSID *clsid);
-   HRESULT SetPreferredClsid(DWORD pluginType, LPCWSTR selector, const CLSID *clsid);
-   HRESULT IsDisabled(DWORD pluginType, REFCLSID clsid);
-   HRESULT GetDisabledByIndex(DWORD pluginType, DWORD index, CLSID *clsid);
-   HRESULT SetDisabled(DWORD pluginType, REFCLSID clsid, BOOL disabled);
+cpp_quote("")
+[object, local, uuid (5c6c44bf-1db6-435b-9249-e8cd10fdec96), helpstring ("IMFPluginControl Interface"), pointer_default (unique)]
+interface IMFPluginControl : IUnknown {
+  HRESULT GetPreferredClsid (DWORD pluginType, LPCWSTR selector, CLSID *clsid);
+  HRESULT GetPreferredClsidByIndex (DWORD pluginType, DWORD index, LPWSTR *selector, CLSID *clsid);
+  HRESULT SetPreferredClsid (DWORD pluginType, LPCWSTR selector, const CLSID *clsid);
+  HRESULT IsDisabled (DWORD pluginType, REFCLSID clsid);
+  HRESULT GetDisabledByIndex (DWORD pluginType, DWORD index, CLSID *clsid);
+  HRESULT SetDisabled (DWORD pluginType, REFCLSID clsid, WINBOOL disabled);
+}
+
+cpp_quote("")
+typedef enum MF_PLUGIN_CONTROL_POLICY {
+  MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0,
+  MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1,
+  MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
+} MF_PLUGIN_CONTROL_POLICY;
+
+cpp_quote("")
+[object, local, uuid (C6982083-3ddc-45cb-AF5E-0f7a8ce4de77), helpstring ("IMFPluginControl2 Interface"), pointer_default (unique)]
+interface IMFPluginControl2 : IMFPluginControl {
+  HRESULT SetPolicy ([in] MF_PLUGIN_CONTROL_POLICY policy);
+}
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
+[object, local, uuid (eb533d5d-2db6-40f8-97a9-494692014f07), helpstring ("IMFDXGIDeviceManager Interface"), pointer_default (unique)]
+interface IMFDXGIDeviceManager : IUnknown {
+  HRESULT CloseDeviceHandle (HANDLE hDevice);
+  HRESULT GetVideoService (HANDLE hDevice, REFIID riid, void **ppService);
+  HRESULT LockDevice (HANDLE hDevice, REFIID riid, void **ppUnkDevice, WINBOOL fBlock);
+  HRESULT OpenDeviceHandle (HANDLE *phDevice);
+  HRESULT ResetDevice (IUnknown *pUnkDevice, UINT resetToken);
+  HRESULT TestDevice (HANDLE hDevice);
+  HRESULT UnlockDevice (HANDLE hDevice, WINBOOL fSaveState);
 }
+cpp_quote("#endif")
+cpp_quote("")
+cpp_quote("#endif")
-- 
2.1.0

