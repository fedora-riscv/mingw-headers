From 7a2e5816c423106f564cc60d084f8a42466a9faa Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Wed, 29 Jul 2015 12:43:49 +0200
Subject: Regenerated headers with current widl version.


diff --git a/mingw-w64-headers/include/dimm.h b/mingw-w64-headers/include/dimm.h
index 261189c..c97f1b7 100644
--- a/mingw-w64-headers/include/dimm.h
+++ b/mingw-w64-headers/include/dimm.h
@@ -1,4 +1,4 @@
-/*** Autogenerated by WIDL 1.6 from dimm.idl - Do not edit ***/
+/*** Autogenerated by WIDL 1.6 from include/dimm.idl - Do not edit ***/
 
 #ifndef __REQUIRED_RPCNDR_H_VERSION__
 #define __REQUIRED_RPCNDR_H_VERSION__ 475
diff --git a/mingw-w64-headers/include/fsrm.h b/mingw-w64-headers/include/fsrm.h
index d282bfc..7d78b4a 100644
--- a/mingw-w64-headers/include/fsrm.h
+++ b/mingw-w64-headers/include/fsrm.h
@@ -471,8 +471,8 @@ IFsrmAccessDeniedRemediationClient : public IDispatch
         BSTR accessPath,
         AdrClientErrorType errorType,
         LONG flags,
-        BSTR windowTitle = L"",
-        BSTR windowMessage = L"",
+        BSTR windowTitle,
+        BSTR windowMessage,
         LONG *result) = 0;
 
 };
@@ -2116,8 +2116,8 @@ IFsrmExportImport : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE ImportFileGroups(
         BSTR filePath,
-        VARIANT *fileGroupNamesSafeArray = 0,
-        BSTR remoteHost = L"",
+        VARIANT *fileGroupNamesSafeArray,
+        BSTR remoteHost,
         IFsrmCommittableCollection **fileGroups) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ExportFileScreenTemplates(
@@ -2127,8 +2127,8 @@ IFsrmExportImport : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE ImportFileScreenTemplates(
         BSTR filePath,
-        VARIANT *templateNamesSafeArray = 0,
-        BSTR remoteHost = L"",
+        VARIANT *templateNamesSafeArray,
+        BSTR remoteHost,
         IFsrmCommittableCollection **templates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ExportQuotaTemplates(
@@ -2138,8 +2138,8 @@ IFsrmExportImport : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE ImportQuotaTemplates(
         BSTR filePath,
-        VARIANT *templateNamesSafeArray = 0,
-        BSTR remoteHost = L"",
+        VARIANT *templateNamesSafeArray,
+        BSTR remoteHost,
         IFsrmCommittableCollection **templates) = 0;
 
 };
diff --git a/mingw-w64-headers/include/fsrmquota.h b/mingw-w64-headers/include/fsrmquota.h
index 5740141..757790a 100644
--- a/mingw-w64-headers/include/fsrmquota.h
+++ b/mingw-w64-headers/include/fsrmquota.h
@@ -183,18 +183,18 @@ IFsrmQuotaManager : public IDispatch
         IFsrmQuota **quota) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumQuotas(
-        BSTR path = L"",
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        BSTR path,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **quotas) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumAutoApplyQuotas(
-        BSTR path = L"",
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        BSTR path,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **quotas) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumEffectiveQuotas(
         BSTR path,
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **quotas) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Scan(
@@ -536,20 +536,20 @@ IFsrmQuotaTemplateManager : public IDispatch
         IFsrmQuotaTemplate **quotaTemplate) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetTemplate(
-        BSTR name = L"",
+        BSTR name,
         IFsrmQuotaTemplate **quotaTemplate) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumTemplates(
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **quotaTemplates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ExportTemplates(
-        VARIANT *quotaTemplateNamesArray = 0,
+        VARIANT *quotaTemplateNamesArray,
         BSTR *serializedQuotaTemplates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ImportTemplates(
         BSTR serializedQuotaTemplates,
-        VARIANT *quotaTemplateNamesArray = 0,
+        VARIANT *quotaTemplateNamesArray,
         IFsrmCommittableCollection **quotaTemplates) = 0;
 
 };
@@ -2529,7 +2529,7 @@ IFsrmQuotaManagerEx : public IFsrmQuotaManager
 {
     virtual HRESULT STDMETHODCALLTYPE IsAffectedByQuota(
         BSTR path,
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         VARIANT_BOOL *affected) = 0;
 
 };
diff --git a/mingw-w64-headers/include/fsrmreports.h b/mingw-w64-headers/include/fsrmreports.h
index fef2e9e..eb8c099 100644
--- a/mingw-w64-headers/include/fsrmreports.h
+++ b/mingw-w64-headers/include/fsrmreports.h
@@ -634,7 +634,7 @@ IFsrmFileManagementJobManager : public IDispatch
         SAFEARRAY **descriptions) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumFileManagementJobs(
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCollection **fileManagementJobs) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateFileManagementJob(
@@ -1086,7 +1086,7 @@ MIDL_INTERFACE("27b899fe-6ffa-4481-a184-d3daade8a02b")
 IFsrmReportManager : public IDispatch
 {
     virtual HRESULT STDMETHODCALLTYPE EnumReportJobs(
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCollection **reportJobs) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateReportJob(
diff --git a/mingw-w64-headers/include/fsrmscreen.h b/mingw-w64-headers/include/fsrmscreen.h
index 8b71306..4f01ac9 100644
--- a/mingw-w64-headers/include/fsrmscreen.h
+++ b/mingw-w64-headers/include/fsrmscreen.h
@@ -169,16 +169,16 @@ IFsrmFileGroupManager : public IDispatch
         IFsrmFileGroup **fileGroup) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumFileGroups(
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **fileGroups) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ExportFileGroups(
-        VARIANT *fileGroupNamesArray = 0,
+        VARIANT *fileGroupNamesArray,
         BSTR *serializedFileGroups) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ImportFileGroups(
         BSTR serializedFileGroups,
-        VARIANT *fileGroupNamesArray = 0,
+        VARIANT *fileGroupNamesArray,
         IFsrmCommittableCollection **fileGroups) = 0;
 
 };
@@ -399,8 +399,8 @@ IFsrmFileScreenManager : public IDispatch
         IFsrmFileScreen **fileScreen) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumFileScreens(
-        BSTR path = L"",
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        BSTR path,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **fileScreens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateFileScreenException(
@@ -412,8 +412,8 @@ IFsrmFileScreenManager : public IDispatch
         IFsrmFileScreenException **fileScreenException) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumFileScreenExceptions(
-        BSTR path = L"",
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        BSTR path,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **fileScreenExceptions) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateFileScreenCollection(
@@ -700,16 +700,16 @@ IFsrmFileScreenTemplateManager : public IDispatch
         IFsrmFileScreenTemplate **fileScreenTemplate) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumTemplates(
-        FsrmEnumOptions options = FsrmEnumOptions_None,
+        FsrmEnumOptions options,
         IFsrmCommittableCollection **fileScreenTemplates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ExportTemplates(
-        VARIANT *fileScreenTemplateNamesArray = 0,
+        VARIANT *fileScreenTemplateNamesArray,
         BSTR *serializedFileScreenTemplates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE ImportTemplates(
         BSTR serializedFileScreenTemplates,
-        VARIANT *fileScreenTemplateNamesArray = 0,
+        VARIANT *fileScreenTemplateNamesArray,
         IFsrmCommittableCollection **fileScreenTemplates) = 0;
 
 };
diff --git a/mingw-w64-headers/include/sapi51.h b/mingw-w64-headers/include/sapi51.h
index e55c2f5..e3ffbff 100644
--- a/mingw-w64-headers/include/sapi51.h
+++ b/mingw-w64-headers/include/sapi51.h
@@ -10115,7 +10115,7 @@ ISpeechObjectToken : public IDispatch
         ISpeechObjectTokenCategory **Category) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDescription(
-        LONG Locale = 0,
+        LONG Locale,
         BSTR *Description) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SetId(
@@ -10128,8 +10128,8 @@ ISpeechObjectToken : public IDispatch
         BSTR *AttributeValue) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateInstance(
-        IUnknown *pUnkOuter = 0,
-        SpeechTokenContext ClsContext = STCAll,
+        IUnknown *pUnkOuter,
+        SpeechTokenContext ClsContext,
         IUnknown **Object) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Remove(
@@ -10149,8 +10149,8 @@ ISpeechObjectToken : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
-        IUnknown *Object = 0,
+        const VARIANT *ExtraData,
+        IUnknown *Object,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -10712,12 +10712,12 @@ ISpeechObjectTokenCategory : public IDispatch
         VARIANT_BOOL CreateIfNotExist = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDataKey(
-        SpeechDataKeyLocation Location = SDKLDefaultLocation,
+        SpeechDataKeyLocation Location,
         ISpeechDataKey **DataKey) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumerateTokens(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **Tokens) = 0;
 
 };
@@ -11401,7 +11401,7 @@ ISpeechBaseStream : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Seek(
         VARIANT Position,
-        SpeechStreamSeekPositionType Origin = SSSPTRelativeToStart,
+        SpeechStreamSeekPositionType Origin,
         VARIANT *NewPosition) = 0;
 
 };
@@ -13750,12 +13750,12 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Speak(
         BSTR Text,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakStream(
         ISpeechBaseStream *Stream,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Pause(
@@ -13770,13 +13770,13 @@ ISpeechVoice : public IDispatch
         LONG *NumSkipped) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetVoices(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioOutputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE WaitUntilDone(
@@ -13788,7 +13788,7 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -15445,7 +15445,7 @@ ISpeechRecognizer : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -15455,18 +15455,18 @@ ISpeechRecognizer : public IDispatch
         const VARIANT *ExtraData = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetRecognizers(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioInputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetProfiles(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
 };
@@ -16333,7 +16333,7 @@ ISpeechRecoContext : public IDispatch
         ) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateGrammar(
-        VARIANT GrammarId = 0,
+        VARIANT GrammarId,
         ISpeechRecoGrammar **Grammar) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateResultFromMemory(
@@ -17764,7 +17764,7 @@ ISpeechGrammarRules : public IDispatch
     virtual HRESULT STDMETHODCALLTYPE Add(
         BSTR RuleName,
         SpeechRuleAttributes Attributes,
-        LONG RuleId = 0,
+        LONG RuleId,
         ISpeechGrammarRule **Rule) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Commit(
@@ -19004,19 +19004,19 @@ ISpeechRecoResult : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Alternates(
         LONG RequestCount,
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechPhraseAlternates **Alternates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Audio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechMemoryStream **Stream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakAudio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        LONG StartElement,
+        LONG Elements,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SaveToMemory(
@@ -20060,15 +20060,15 @@ ISpeechPhraseInfo : public IDispatch
         VARIANT *PhraseBlock) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetText(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         BSTR *Text) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDisplayAttributes(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         SpeechDisplayAttributes *DisplayAttributes) = 0;
 
 };
@@ -22419,8 +22419,8 @@ ISpeechLexicon : public IDispatch
         LONG *GenerationId) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetWords(
-        SpeechLexiconType Flags = eLEXTYPE_USER | eLEXTYPE_APP,
-        LONG *GenerationID = 0,
+        SpeechLexiconType Flags,
+        LONG *GenerationID,
         ISpeechLexiconWords **Words) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE AddPronunciation(
@@ -22449,8 +22449,8 @@ ISpeechLexicon : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE GetPronunciations(
         BSTR bstrWord,
-        SpeechLanguageId LangId = 0,
-        SpeechLexiconType TypeFlags = eLEXTYPE_USER | eLEXTYPE_APP,
+        SpeechLanguageId LangId,
+        SpeechLexiconType TypeFlags,
         ISpeechLexiconPronunciations **ppPronunciations) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetGenerationChange(
diff --git a/mingw-w64-headers/include/sapi53.h b/mingw-w64-headers/include/sapi53.h
index 5c6f1c2..1abbd5a 100644
--- a/mingw-w64-headers/include/sapi53.h
+++ b/mingw-w64-headers/include/sapi53.h
@@ -12968,7 +12968,7 @@ ISpeechObjectToken : public IDispatch
         ISpeechObjectTokenCategory **Category) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDescription(
-        LONG Locale = 0,
+        LONG Locale,
         BSTR *Description) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SetId(
@@ -12981,8 +12981,8 @@ ISpeechObjectToken : public IDispatch
         BSTR *AttributeValue) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateInstance(
-        IUnknown *pUnkOuter = 0,
-        SpeechTokenContext ClsContext = STCAll,
+        IUnknown *pUnkOuter,
+        SpeechTokenContext ClsContext,
         IUnknown **Object) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Remove(
@@ -13002,8 +13002,8 @@ ISpeechObjectToken : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
-        IUnknown *Object = 0,
+        const VARIANT *ExtraData,
+        IUnknown *Object,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -13565,12 +13565,12 @@ ISpeechObjectTokenCategory : public IDispatch
         VARIANT_BOOL CreateIfNotExist = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDataKey(
-        SpeechDataKeyLocation Location = SDKLDefaultLocation,
+        SpeechDataKeyLocation Location,
         ISpeechDataKey **DataKey) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumerateTokens(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **Tokens) = 0;
 
 };
@@ -14258,7 +14258,7 @@ ISpeechBaseStream : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Seek(
         VARIANT Position,
-        SpeechStreamSeekPositionType Origin = SSSPTRelativeToStart,
+        SpeechStreamSeekPositionType Origin,
         VARIANT *NewPosition) = 0;
 
 };
@@ -16607,12 +16607,12 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Speak(
         BSTR Text,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakStream(
         ISpeechBaseStream *Stream,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Pause(
@@ -16627,13 +16627,13 @@ ISpeechVoice : public IDispatch
         LONG *NumSkipped) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetVoices(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioOutputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE WaitUntilDone(
@@ -16645,7 +16645,7 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -18325,7 +18325,7 @@ ISpeechRecognizer : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -18335,18 +18335,18 @@ ISpeechRecognizer : public IDispatch
         const VARIANT *ExtraData = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetRecognizers(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioInputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetProfiles(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
 };
@@ -19213,7 +19213,7 @@ ISpeechRecoContext : public IDispatch
         ) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateGrammar(
-        VARIANT GrammarId = 0,
+        VARIANT GrammarId,
         ISpeechRecoGrammar **Grammar) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateResultFromMemory(
@@ -20644,7 +20644,7 @@ ISpeechGrammarRules : public IDispatch
     virtual HRESULT STDMETHODCALLTYPE Add(
         BSTR RuleName,
         SpeechRuleAttributes Attributes,
-        LONG RuleId = 0,
+        LONG RuleId,
         ISpeechGrammarRule **Rule) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Commit(
@@ -21884,19 +21884,19 @@ ISpeechRecoResult : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Alternates(
         LONG RequestCount,
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechPhraseAlternates **Alternates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Audio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechMemoryStream **Stream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakAudio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        LONG StartElement,
+        LONG Elements,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SaveToMemory(
@@ -22697,19 +22697,19 @@ ISpeechRecoResultDispatch : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Alternates(
         LONG RequestCount,
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechPhraseAlternates **Alternates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Audio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechMemoryStream **Stream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakAudio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        LONG StartElement,
+        LONG Elements,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SaveToMemory(
@@ -23831,15 +23831,15 @@ ISpeechPhraseInfo : public IDispatch
         VARIANT *PhraseBlock) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetText(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         BSTR *Text) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDisplayAttributes(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         SpeechDisplayAttributes *DisplayAttributes) = 0;
 
 };
@@ -26190,8 +26190,8 @@ ISpeechLexicon : public IDispatch
         LONG *GenerationId) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetWords(
-        SpeechLexiconType Flags = eLEXTYPE_USER | eLEXTYPE_APP,
-        LONG *GenerationID = 0,
+        SpeechLexiconType Flags,
+        LONG *GenerationID,
         ISpeechLexiconWords **Words) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE AddPronunciation(
@@ -26220,8 +26220,8 @@ ISpeechLexicon : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE GetPronunciations(
         BSTR bstrWord,
-        SpeechLanguageId LangId = 0,
-        SpeechLexiconType TypeFlags = eLEXTYPE_USER | eLEXTYPE_APP,
+        SpeechLanguageId LangId,
+        SpeechLexiconType TypeFlags,
         ISpeechLexiconPronunciations **ppPronunciations) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetGenerationChange(
diff --git a/mingw-w64-headers/include/sapi54.h b/mingw-w64-headers/include/sapi54.h
index 75183b1..fa79ca6 100644
--- a/mingw-w64-headers/include/sapi54.h
+++ b/mingw-w64-headers/include/sapi54.h
@@ -13228,7 +13228,7 @@ ISpeechObjectToken : public IDispatch
         ISpeechObjectTokenCategory **Category) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDescription(
-        LONG Locale = 0,
+        LONG Locale,
         BSTR *Description) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SetId(
@@ -13241,8 +13241,8 @@ ISpeechObjectToken : public IDispatch
         BSTR *AttributeValue) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateInstance(
-        IUnknown *pUnkOuter = 0,
-        SpeechTokenContext ClsContext = STCAll,
+        IUnknown *pUnkOuter,
+        SpeechTokenContext ClsContext,
         IUnknown **Object) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Remove(
@@ -13262,8 +13262,8 @@ ISpeechObjectToken : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
-        IUnknown *Object = 0,
+        const VARIANT *ExtraData,
+        IUnknown *Object,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -13825,12 +13825,12 @@ ISpeechObjectTokenCategory : public IDispatch
         VARIANT_BOOL CreateIfNotExist = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDataKey(
-        SpeechDataKeyLocation Location = SDKLDefaultLocation,
+        SpeechDataKeyLocation Location,
         ISpeechDataKey **DataKey) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE EnumerateTokens(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **Tokens) = 0;
 
 };
@@ -14518,7 +14518,7 @@ ISpeechBaseStream : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Seek(
         VARIANT Position,
-        SpeechStreamSeekPositionType Origin = SSSPTRelativeToStart,
+        SpeechStreamSeekPositionType Origin,
         VARIANT *NewPosition) = 0;
 
 };
@@ -16867,12 +16867,12 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Speak(
         BSTR Text,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakStream(
         ISpeechBaseStream *Stream,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Pause(
@@ -16887,13 +16887,13 @@ ISpeechVoice : public IDispatch
         LONG *NumSkipped) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetVoices(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioOutputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE WaitUntilDone(
@@ -16905,7 +16905,7 @@ ISpeechVoice : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -18585,7 +18585,7 @@ ISpeechRecognizer : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE IsUISupported(
         const BSTR TypeOfUI,
-        const VARIANT *ExtraData = 0,
+        const VARIANT *ExtraData,
         VARIANT_BOOL *Supported) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE DisplayUI(
@@ -18595,18 +18595,18 @@ ISpeechRecognizer : public IDispatch
         const VARIANT *ExtraData = 0) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetRecognizers(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetAudioInputs(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetProfiles(
-        BSTR RequiredAttributes = L"",
-        BSTR OptionalAttributes = L"",
+        BSTR RequiredAttributes,
+        BSTR OptionalAttributes,
         ISpeechObjectTokens **ObjectTokens) = 0;
 
 };
@@ -19473,7 +19473,7 @@ ISpeechRecoContext : public IDispatch
         ) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateGrammar(
-        VARIANT GrammarId = 0,
+        VARIANT GrammarId,
         ISpeechRecoGrammar **Grammar) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateResultFromMemory(
@@ -20904,7 +20904,7 @@ ISpeechGrammarRules : public IDispatch
     virtual HRESULT STDMETHODCALLTYPE Add(
         BSTR RuleName,
         SpeechRuleAttributes Attributes,
-        LONG RuleId = 0,
+        LONG RuleId,
         ISpeechGrammarRule **Rule) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Commit(
@@ -22144,19 +22144,19 @@ ISpeechRecoResult : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Alternates(
         LONG RequestCount,
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechPhraseAlternates **Alternates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Audio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechMemoryStream **Stream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakAudio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        LONG StartElement,
+        LONG Elements,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SaveToMemory(
@@ -22957,19 +22957,19 @@ ISpeechRecoResultDispatch : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE Alternates(
         LONG RequestCount,
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechPhraseAlternates **Alternates) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Audio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
+        LONG StartElement,
+        LONG Elements,
         ISpeechMemoryStream **Stream) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SpeakAudio(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        SpeechVoiceSpeakFlags Flags = SPF_DEFAULT,
+        LONG StartElement,
+        LONG Elements,
+        SpeechVoiceSpeakFlags Flags,
         LONG *StreamNumber) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SaveToMemory(
@@ -24091,15 +24091,15 @@ ISpeechPhraseInfo : public IDispatch
         VARIANT *PhraseBlock) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetText(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         BSTR *Text) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetDisplayAttributes(
-        LONG StartElement = 0,
-        LONG Elements = SPPR_ALL_ELEMENTS,
-        VARIANT_BOOL UseReplacements = -1,
+        LONG StartElement,
+        LONG Elements,
+        VARIANT_BOOL UseReplacements,
         SpeechDisplayAttributes *DisplayAttributes) = 0;
 
 };
@@ -26450,8 +26450,8 @@ ISpeechLexicon : public IDispatch
         LONG *GenerationId) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetWords(
-        SpeechLexiconType Flags = eLEXTYPE_USER | eLEXTYPE_APP,
-        LONG *GenerationID = 0,
+        SpeechLexiconType Flags,
+        LONG *GenerationID,
         ISpeechLexiconWords **Words) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE AddPronunciation(
@@ -26480,8 +26480,8 @@ ISpeechLexicon : public IDispatch
 
     virtual HRESULT STDMETHODCALLTYPE GetPronunciations(
         BSTR bstrWord,
-        SpeechLanguageId LangId = 0,
-        SpeechLexiconType TypeFlags = eLEXTYPE_USER | eLEXTYPE_APP,
+        SpeechLanguageId LangId,
+        SpeechLexiconType TypeFlags,
         ISpeechLexiconPronunciations **ppPronunciations) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE GetGenerationChange(
diff --git a/mingw-w64-headers/include/tlbref.h b/mingw-w64-headers/include/tlbref.h
index d2418c5..7ecc3cd 100644
--- a/mingw-w64-headers/include/tlbref.h
+++ b/mingw-w64-headers/include/tlbref.h
@@ -1,4 +1,4 @@
-/*** Autogenerated by WIDL 1.6 from tlbref.idl - Do not edit ***/
+/*** Autogenerated by WIDL 1.6 from include/tlbref.idl - Do not edit ***/
 
 #ifndef __REQUIRED_RPCNDR_H_VERSION__
 #define __REQUIRED_RPCNDR_H_VERSION__ 475
diff --git a/mingw-w64-headers/include/wsmandisp.h b/mingw-w64-headers/include/wsmandisp.h
index f72464d..9c5c0b8 100644
--- a/mingw-w64-headers/include/wsmandisp.h
+++ b/mingw-w64-headers/include/wsmandisp.h
@@ -253,9 +253,9 @@ MIDL_INTERFACE("190d8637-5cd3-496d-ad24-69636bb5a3b5")
 IWSMan : public IDispatch
 {
     virtual HRESULT STDMETHODCALLTYPE CreateSession(
-        BSTR connection = L"",
-        LONG flags = 0,
-        IDispatch *connectionOptions = 0,
+        BSTR connection,
+        LONG flags,
+        IDispatch *connectionOptions,
         IDispatch **session) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE CreateConnectionOptions(
@@ -451,7 +451,7 @@ MIDL_INTERFACE("2d53bdaa-798e-49e6-a1aa-74d01256f411")
 IWSManEx : public IWSMan
 {
     virtual HRESULT STDMETHODCALLTYPE CreateResourceLocator(
-        BSTR strResourceLocator = L"",
+        BSTR strResourceLocator,
         IDispatch **newResourceLocator) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE SessionFlagUTF8(
@@ -2452,19 +2452,19 @@ IWSManSession : public IDispatch
 {
     virtual HRESULT STDMETHODCALLTYPE Get(
         VARIANT resourceUri,
-        LONG flags = 0,
+        LONG flags,
         BSTR *resource) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Put(
         VARIANT resourceUri,
         BSTR resource,
-        LONG flags = 0,
+        LONG flags,
         BSTR *resultResource) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Create(
         VARIANT resourceUri,
         BSTR resource,
-        LONG flags = 0,
+        LONG flags,
         BSTR *newUri) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Delete(
@@ -2475,18 +2475,18 @@ IWSManSession : public IDispatch
         BSTR actionUri,
         VARIANT resourceUri,
         BSTR parameters,
-        LONG flags = 0,
+        LONG flags,
         BSTR *result) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Enumerate(
         VARIANT resourceUri,
-        BSTR filter = L"",
-        BSTR dialect = L"",
-        LONG flags = 0,
+        BSTR filter,
+        BSTR dialect,
+        LONG flags,
         IDispatch **resultSet) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE Identify(
-        LONG flags = 0,
+        LONG flags,
         BSTR *result) = 0;
 
     virtual HRESULT STDMETHODCALLTYPE get_Error(
@@ -3441,7 +3441,7 @@ IWSManInternal : public IDispatch
     virtual HRESULT STDMETHODCALLTYPE ConfigSDDL(
         IDispatch *session,
         VARIANT resourceUri,
-        LONG flags = 0,
+        LONG flags,
         BSTR *resource) = 0;
 
 };
