From eedf07ac7d97f757f3d757ac96fbf49c73ff5439 Mon Sep 17 00:00:00 2001
From: Kai Tietz <ktietz70@googlemail.com>
Date: Tue, 2 Sep 2014 17:56:58 +0200
Subject: [PATCH 16/25] Add comadmin.idl to Makefile.am and regenerate files.

---
 mingw-w64-headers/Makefile.am        |    1 +
 mingw-w64-headers/Makefile.in        |    1 +
 mingw-w64-headers/include/comadmin.h | 3235 +++++++++++++++++++++++++++-------
 3 files changed, 2629 insertions(+), 608 deletions(-)

diff --git a/mingw-w64-headers/Makefile.am b/mingw-w64-headers/Makefile.am
index 50e3dcc..dbac5e9 100644
--- a/mingw-w64-headers/Makefile.am
+++ b/mingw-w64-headers/Makefile.am
@@ -65,6 +65,7 @@ IDL_SRCS = \
   include/audioclient.idl \
   include/audioendpoints.idl \
   include/audiopolicy.idl \
+  include/comadmin.idl \
   include/control.idl \
   include/ctfutb.idl \
   include/dbgprop.idl \
diff --git a/mingw-w64-headers/Makefile.in b/mingw-w64-headers/Makefile.in
index 4425c64..663989d 100644
--- a/mingw-w64-headers/Makefile.in
+++ b/mingw-w64-headers/Makefile.in
@@ -289,6 +289,7 @@ EXTRA_HEADERS = \
 @HAVE_WIDL_TRUE@  include/audioclient.idl \
 @HAVE_WIDL_TRUE@  include/audioendpoints.idl \
 @HAVE_WIDL_TRUE@  include/audiopolicy.idl \
+@HAVE_WIDL_TRUE@  include/comadmin.idl \
 @HAVE_WIDL_TRUE@  include/control.idl \
 @HAVE_WIDL_TRUE@  include/ctfutb.idl \
 @HAVE_WIDL_TRUE@  include/dbgprop.idl \
diff --git a/mingw-w64-headers/include/comadmin.h b/mingw-w64-headers/include/comadmin.h
index d0a7faf..54b5a4f 100644
--- a/mingw-w64-headers/include/comadmin.h
+++ b/mingw-w64-headers/include/comadmin.h
@@ -1,45 +1,40 @@
-/**
- * This file has no copyright assigned and is placed in the Public Domain.
- * This file is part of the mingw-w64 runtime package.
- * No warranty is given; refer to the file DISCLAIMER.PD within this package.
- */
+/*** Autogenerated by WIDL 1.6 from comadmin.idl - Do not edit ***/
+
 #ifndef __REQUIRED_RPCNDR_H_VERSION__
 #define __REQUIRED_RPCNDR_H_VERSION__ 475
 #endif
 
-#include "rpc.h"
-#include "rpcndr.h"
-
-#ifndef __RPCNDR_H_VERSION__
-#error This stub requires an updated version of <rpcndr.h>
-#endif
+#include <rpc.h>
+#include <rpcndr.h>
 
 #ifndef COM_NO_WINDOWS_H
-#include "windows.h"
-#include "ole2.h"
+#include <windows.h>
+#include <ole2.h>
 #endif
 
 #ifndef __comadmin_h__
 #define __comadmin_h__
 
+/* Forward declarations */
+
 #ifndef __ICOMAdminCatalog_FWD_DEFINED__
 #define __ICOMAdminCatalog_FWD_DEFINED__
-typedef struct ICOMAdminCatalog ICOMAdminCatalog;
+typedef interface ICOMAdminCatalog ICOMAdminCatalog;
 #endif
 
 #ifndef __ICOMAdminCatalog2_FWD_DEFINED__
 #define __ICOMAdminCatalog2_FWD_DEFINED__
-typedef struct ICOMAdminCatalog2 ICOMAdminCatalog2;
+typedef interface ICOMAdminCatalog2 ICOMAdminCatalog2;
 #endif
 
 #ifndef __ICatalogObject_FWD_DEFINED__
 #define __ICatalogObject_FWD_DEFINED__
-typedef struct ICatalogObject ICatalogObject;
+typedef interface ICatalogObject ICatalogObject;
 #endif
 
 #ifndef __ICatalogCollection_FWD_DEFINED__
 #define __ICatalogCollection_FWD_DEFINED__
-typedef struct ICatalogCollection ICatalogCollection;
+typedef interface ICatalogCollection ICatalogCollection;
 #endif
 
 #ifndef __COMAdminCatalog_FWD_DEFINED__
@@ -48,8 +43,8 @@ typedef struct ICatalogCollection ICatalogCollection;
 typedef class COMAdminCatalog COMAdminCatalog;
 #else
 typedef struct COMAdminCatalog COMAdminCatalog;
-#endif
-#endif
+#endif /* defined __cplusplus */
+#endif /* defined __COMAdminCatalog_FWD_DEFINED__ */
 
 #ifndef __COMAdminCatalogObject_FWD_DEFINED__
 #define __COMAdminCatalogObject_FWD_DEFINED__
@@ -57,8 +52,8 @@ typedef struct COMAdminCatalog COMAdminCatalog;
 typedef class COMAdminCatalogObject COMAdminCatalogObject;
 #else
 typedef struct COMAdminCatalogObject COMAdminCatalogObject;
-#endif
-#endif
+#endif /* defined __cplusplus */
+#endif /* defined __COMAdminCatalogObject_FWD_DEFINED__ */
 
 #ifndef __COMAdminCatalogCollection_FWD_DEFINED__
 #define __COMAdminCatalogCollection_FWD_DEFINED__
@@ -66,109 +61,609 @@ typedef struct COMAdminCatalogObject COMAdminCatalogObject;
 typedef class COMAdminCatalogCollection COMAdminCatalogCollection;
 #else
 typedef struct COMAdminCatalogCollection COMAdminCatalogCollection;
-#endif
-#endif
+#endif /* defined __cplusplus */
+#endif /* defined __COMAdminCatalogCollection_FWD_DEFINED__ */
+
+/* Headers for imported files */
 
-#include "unknwn.h"
-#include "oaidl.h"
+#include <unknwn.h>
+#include <oaidl.h>
 
 #ifdef __cplusplus
-extern "C"{
+extern "C" {
 #endif
 
-#ifndef __MIDL_user_allocate_free_DEFINED__
-#define __MIDL_user_allocate_free_DEFINED__
-  void *__RPC_API MIDL_user_allocate(size_t);
-  void __RPC_API MIDL_user_free(void *);
-#endif
+/**
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within this package.
+ */
 
-#include <objbase.h>
+#include <winapifamily.h>
 
-  extern RPC_IF_HANDLE __MIDL_itf_comadmin_0000_v0_0_c_ifspec;
-  extern RPC_IF_HANDLE __MIDL_itf_comadmin_0000_v0_0_s_ifspec;
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
 
+#include <objbase.h>
+
+typedef enum COMAdminInUse {
+    COMAdminNotInUse = 0,
+    COMAdminInUseByCatalog = 1,
+    COMAdminInUseByRegistryUnknown = 2,
+    COMAdminInUseByRegistryProxyStub = 3,
+    COMAdminInUseByRegistryTypeLib = 4,
+    COMAdminInUseByRegistryClsid = 5
+} COMAdminInUse;
+typedef enum COMAdminErrorCodes {
+    COMAdminErrObjectErrors = 0x80110401,
+    COMAdminErrObjectInvalid = 0x80110402,
+    COMAdminErrKeyMissing = 0x80110403,
+    COMAdminErrAlreadyInstalled = 0x80110404,
+    COMAdminErrAppFileWriteFail = 0x80110407,
+    COMAdminErrAppFileReadFail = 0x80110408,
+    COMAdminErrAppFileVersion = 0x80110409,
+    COMAdminErrBadPath = 0x8011040a,
+    COMAdminErrApplicationExists = 0x8011040b,
+    COMAdminErrRoleExists = 0x8011040c,
+    COMAdminErrCantCopyFile = 0x8011040d,
+    COMAdminErrNoUser = 0x8011040f,
+    COMAdminErrInvalidUserids = 0x80110410,
+    COMAdminErrNoRegistryCLSID = 0x80110411,
+    COMAdminErrBadRegistryProgID = 0x80110412,
+    COMAdminErrAuthenticationLevel = 0x80110413,
+    COMAdminErrUserPasswdNotValid = 0x80110414,
+    COMAdminErrCLSIDOrIIDMismatch = 0x80110418,
+    COMAdminErrRemoteInterface = 0x80110419,
+    COMAdminErrDllRegisterServer = 0x8011041a,
+    COMAdminErrNoServerShare = 0x8011041b,
+    COMAdminErrDllLoadFailed = 0x8011041d,
+    COMAdminErrBadRegistryLibID = 0x8011041e,
+    COMAdminErrAppDirNotFound = 0x8011041f,
+    COMAdminErrRegistrarFailed = 0x80110423,
+    COMAdminErrCompFileDoesNotExist = 0x80110424,
+    COMAdminErrCompFileLoadDLLFail = 0x80110425,
+    COMAdminErrCompFileGetClassObj = 0x80110426,
+    COMAdminErrCompFileClassNotAvail = 0x80110427,
+    COMAdminErrCompFileBadTLB = 0x80110428,
+    COMAdminErrCompFileNotInstallable = 0x80110429,
+    COMAdminErrNotChangeable = 0x8011042a,
+    COMAdminErrNotDeletable = 0x8011042b,
+    COMAdminErrSession = 0x8011042c,
+    COMAdminErrCompMoveLocked = 0x8011042d,
+    COMAdminErrCompMoveBadDest = 0x8011042e,
+    COMAdminErrRegisterTLB = 0x80110430,
+    COMAdminErrSystemApp = 0x80110433,
+    COMAdminErrCompFileNoRegistrar = 0x80110434,
+    COMAdminErrCoReqCompInstalled = 0x80110435,
+    COMAdminErrServiceNotInstalled = 0x80110436,
+    COMAdminErrPropertySaveFailed = 0x80110437,
+    COMAdminErrObjectExists = 0x80110438,
+    COMAdminErrComponentExists = 0x80110439,
+    COMAdminErrRegFileCorrupt = 0x8011043b,
+    COMAdminErrPropertyOverflow = 0x8011043c,
+    COMAdminErrNotInRegistry = 0x8011043e,
+    COMAdminErrObjectNotPoolable = 0x8011043f,
+    COMAdminErrApplidMatchesClsid = 0x80110446,
+    COMAdminErrRoleDoesNotExist = 0x80110447,
+    COMAdminErrStartAppNeedsComponents = 0x80110448,
+    COMAdminErrRequiresDifferentPlatform = 0x80110449,
+    COMAdminErrQueuingServiceNotAvailable = 0x80110602,
+    COMAdminErrObjectParentMissing = 0x80110808,
+    COMAdminErrObjectDoesNotExist = 0x80110809,
+    COMAdminErrCanNotExportAppProxy = 0x8011044a,
+    COMAdminErrCanNotStartApp = 0x8011044b,
+    COMAdminErrCanNotExportSystemApp = 0x8011044c,
+    COMAdminErrCanNotSubscribeToComponent = 0x8011044d,
+    COMAdminErrAppNotRunning = 0x8011080a,
+    COMAdminErrEventClassCannotBeSubscriber = 0x8011044e,
+    COMAdminErrLibAppProxyIncompatible = 0x8011044f,
+    COMAdminErrBasePartitionOnly = 0x80110450,
+    COMAdminErrDuplicatePartitionName = 0x80110457,
+    COMAdminErrPartitionInUse = 0x80110459,
+    COMAdminErrImportedComponentsNotAllowed = 0x8011045b,
+    COMAdminErrRegdbNotInitialized = 0x80110472,
+    COMAdminErrRegdbNotOpen = 0x80110473,
+    COMAdminErrRegdbSystemErr = 0x80110474,
+    COMAdminErrRegdbAlreadyRunning = 0x80110475,
+    COMAdminErrMigVersionNotSupported = 0x80110480,
+    COMAdminErrMigSchemaNotFound = 0x80110481,
+    COMAdminErrCatBitnessMismatch = 0x80110482,
+    COMAdminErrCatUnacceptableBitness = 0x80110483,
+    COMAdminErrCatWrongAppBitnessBitness = 0x80110484,
+    COMAdminErrCatPauseResumeNotSupported = 0x80110485,
+    COMAdminErrCatServerFault = 0x80110486,
+    COMAdminErrCantRecycleLibraryApps = 0x8011080f,
+    COMAdminErrCantRecycleServiceApps = 0x80110811,
+    COMAdminErrProcessAlreadyRecycled = 0x80110812,
+    COMAdminErrPausedProcessMayNotBeRecycled = 0x80110813,
+    COMAdminErrInvalidPartition = 0x8011080b,
+    COMAdminErrPartitionMsiOnly = 0x80110819,
+    COMAdminErrStartAppDisabled = 0x80110451,
+    COMAdminErrCompMoveSource = 0x8011081c,
+    COMAdminErrCompMoveDest = 0x8011081d,
+    COMAdminErrCompMovePrivate = 0x8011081e,
+    COMAdminErrCannotCopyEventClass = 0x80110820
+} COMAdminErrorCodes;
+typedef enum COMAdminComponentType {
+    COMAdmin32BitComponent = 0x1,
+    COMAdmin64BitComponent = 0x2
+} COMAdminComponentType;
+typedef enum COMAdminApplicationInstallOptions {
+    COMAdminInstallNoUsers = 0,
+    COMAdminInstallUsers = 1,
+    COMAdminInstallForceOverwriteOfFiles = 2
+} COMAdminApplicationInstallOptions;
+typedef enum COMAdminApplicationExportOptions {
+    COMAdminExportNoUsers = 0x0,
+    COMAdminExportUsers = 0x1,
+    COMAdminExportApplicationProxy = 0x2,
+    COMAdminExportForceOverwriteOfFiles = 0x4,
+    COMAdminExportIn10Format = 0x10
+} COMAdminApplicationExportOptions;
+typedef enum COMAdminThreadingModels {
+    COMAdminThreadingModelApartment = 0,
+    COMAdminThreadingModelFree = 1,
+    COMAdminThreadingModelMain = 2,
+    COMAdminThreadingModelBoth = 3,
+    COMAdminThreadingModelNeutral = 4,
+    COMAdminThreadingModelNotSpecified = 5
+} COMAdminThreadingModels;
+typedef enum COMAdminTransactionOptions {
+    COMAdminTransactionIgnored = 0,
+    COMAdminTransactionNone = 1,
+    COMAdminTransactionSupported = 2,
+    COMAdminTransactionRequired = 3,
+    COMAdminTransactionRequiresNew = 4
+} COMAdminTransactionOptions;
+typedef enum COMAdminTxIsolationLevelOptions {
+    COMAdminTxIsolationLevelAny = 0,
+    COMAdminTxIsolationLevelReadUnCommitted = 1,
+    COMAdminTxIsolationLevelReadCommitted = 2,
+    COMAdminTxIsolationLevelRepeatableRead = 3,
+    COMAdminTxIsolationLevelSerializable = 4
+} COMAdminTxIsolationLevelOptions;
+typedef enum COMAdminSynchronizationOptions {
+    COMAdminSynchronizationIgnored = 0,
+    COMAdminSynchronizationNone = 1,
+    COMAdminSynchronizationSupported = 2,
+    COMAdminSynchronizationRequired = 3,
+    COMAdminSynchronizationRequiresNew = 4
+} COMAdminSynchronizationOptions;
+typedef enum COMAdminActivationOptions {
+    COMAdminActivationInproc = 0,
+    COMAdminActivationLocal = 1
+} COMAdminActivationOptions;
+typedef enum COMAdminAccessChecksLevelOptions {
+    COMAdminAccessChecksApplicationLevel = 0,
+    COMAdminAccessChecksApplicationComponentLevel = 1
+} COMAdminAccessChecksLevelOptions;
+typedef enum COMAdminAuthenticationLevelOptions {
+    COMAdminAuthenticationDefault = 0,
+    COMAdminAuthenticationNone = 1,
+    COMAdminAuthenticationConnect = 2,
+    COMAdminAuthenticationCall = 3,
+    COMAdminAuthenticationPacket = 4,
+    COMAdminAuthenticationIntegrity = 5,
+    COMAdminAuthenticationPrivacy = 6
+} COMAdminAuthenticationLevelOptions;
+typedef enum COMAdminImpersonationLevelOptions {
+    COMAdminImpersonationAnonymous = 1,
+    COMAdminImpersonationIdentify = 2,
+    COMAdminImpersonationImpersonate = 3,
+    COMAdminImpersonationDelegate = 4
+} COMAdminImpersonationLevelOptions;
+typedef enum COMAdminAuthenticationCapabilitiesOptions {
+    COMAdminAuthenticationCapabilitiesNone = 0x0,
+    COMAdminAuthenticationCapabilitiesSecureReference = 0x2,
+    COMAdminAuthenticationCapabilitiesStaticCloaking = 0x20,
+    COMAdminAuthenticationCapabilitiesDynamicCloaking = 0x40
+} COMAdminAuthenticationCapabilitiesOptions;
+typedef enum COMAdminOS {
+    COMAdminOSNotInitialized = 0,
+    COMAdminOSWindows3_1 = 1,
+    COMAdminOSWindows9x = 2,
+    COMAdminOSWindows2000 = 3,
+    COMAdminOSWindows2000AdvancedServer = 4,
+    COMAdminOSWindows2000Unknown = 5,
+    COMAdminOSUnknown = 6,
+    COMAdminOSWindowsXPPersonal = 11,
+    COMAdminOSWindowsXPProfessional = 12,
+    COMAdminOSWindowsNETStandardServer = 13,
+    COMAdminOSWindowsNETEnterpriseServer = 14,
+    COMAdminOSWindowsNETDatacenterServer = 15,
+    COMAdminOSWindowsNETWebServer = 16,
+    COMAdminOSWindowsLonghornPersonal = 17,
+    COMAdminOSWindowsLonghornProfessional = 18,
+    COMAdminOSWindowsLonghornStandardServer = 19,
+    COMAdminOSWindowsLonghornEnterpriseServer = 20,
+    COMAdminOSWindowsLonghornDatacenterServer = 21,
+    COMAdminOSWindowsLonghornWebServer = 22,
+    COMAdminOSWindows7Personal = 23,
+    COMAdminOSWindows7Professional = 24,
+    COMAdminOSWindows7StandardServer = 25,
+    COMAdminOSWindows7EnterpriseServer = 26,
+    COMAdminOSWindows7DatacenterServer = 27,
+    COMAdminOSWindows7WebServer = 28,
+    COMAdminOSWindows8Personal = 29,
+    COMAdminOSWindows8Professional = 30,
+    COMAdminOSWindows8StandardServer = 31,
+    COMAdminOSWindows8EnterpriseServer = 32,
+    COMAdminOSWindows8DatacenterServer = 33,
+    COMAdminOSWindows8WebServer = 34
+} COMAdminOS;
+typedef enum COMAdminServiceOptions {
+    COMAdminServiceLoadBalanceRouter = 1
+} COMAdminServiceOptions;
+typedef enum COMAdminServiceStatusOptions {
+    COMAdminServiceStopped = 0,
+    COMAdminServiceStartPending = 1,
+    COMAdminServiceStopPending = 2,
+    COMAdminServiceRunning = 3,
+    COMAdminServiceContinuePending = 4,
+    COMAdminServicePausePending = 5,
+    COMAdminServicePaused = 6,
+    COMAdminServiceUnknownState = 7
+} COMAdminServiceStatusOptions;
+typedef enum COMAdminComponentFlags {
+    COMAdminCompFlagTypeInfoFound = 0x1,
+    COMAdminCompFlagCOMPlusPropertiesFound = 0x2,
+    COMAdminCompFlagProxyFound = 0x4,
+    COMAdminCompFlagInterfacesFound = 0x8,
+    COMAdminCompFlagAlreadyInstalled = 0x10,
+    COMAdminCompFlagNotInApplication = 0x20
+} COMAdminComponentFlags;
+typedef enum COMAdminQCMessageAuthenticateOptions {
+    COMAdminQCMessageAuthenticateSecureApps = 0,
+    COMAdminQCMessageAuthenticateOff = 1,
+    COMAdminQCMessageAuthenticateOn = 2
+} COMAdminQCMessageAuthenticateOptions;
+typedef enum COMAdminFileFlags {
+    COMAdminFileFlagLoadable = 0x1,
+    COMAdminFileFlagCOM = 0x2,
+    COMAdminFileFlagContainsPS = 0x4,
+    COMAdminFileFlagContainsComp = 0x8,
+    COMAdminFileFlagContainsTLB = 0x10,
+    COMAdminFileFlagSelfReg = 0x20,
+    COMAdminFileFlagSelfUnReg = 0x40,
+    COMAdminFileFlagUnloadableDLL = 0x80,
+    COMAdminFileFlagDoesNotExist = 0x100,
+    COMAdminFileFlagAlreadyInstalled = 0x200,
+    COMAdminFileFlagBadTLB = 0x400,
+    COMAdminFileFlagGetClassObjFailed = 0x800,
+    COMAdminFileFlagClassNotAvailable = 0x1000,
+    COMAdminFileFlagRegistrar = 0x2000,
+    COMAdminFileFlagNoRegistrar = 0x4000,
+    COMAdminFileFlagDLLRegsvrFailed = 0x8000,
+    COMAdminFileFlagRegTLBFailed = 0x10000,
+    COMAdminFileFlagRegistrarFailed = 0x20000,
+    COMAdminFileFlagError = 0x40000
+} COMAdminFileFlags;
+/*****************************************************************************
+ * ICOMAdminCatalog interface
+ */
 #ifndef __ICOMAdminCatalog_INTERFACE_DEFINED__
 #define __ICOMAdminCatalog_INTERFACE_DEFINED__
-  EXTERN_C const IID IID_ICOMAdminCatalog;
+
+DEFINE_GUID(IID_ICOMAdminCatalog, 0xdd662187, 0xdfc2, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-  struct ICOMAdminCatalog : public IDispatch {
-  public:
-    virtual HRESULT WINAPI GetCollection(BSTR bstrCollName,IDispatch **ppCatalogCollection) = 0;
-    virtual HRESULT WINAPI Connect(BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection) = 0;
-    virtual HRESULT WINAPI get_MajorVersion(__LONG32 *plMajorVersion) = 0;
-    virtual HRESULT WINAPI get_MinorVersion(__LONG32 *plMinorVersion) = 0;
-    virtual HRESULT WINAPI GetCollectionByQuery(BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection) = 0;
-    virtual HRESULT WINAPI ImportComponent(BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID) = 0;
-    virtual HRESULT WINAPI InstallComponent(BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) = 0;
-    virtual HRESULT WINAPI ShutdownApplication(BSTR bstrApplIDOrName) = 0;
-    virtual HRESULT WINAPI ExportApplication(BSTR bstrApplIDOrName,BSTR bstrApplicationFile,__LONG32 lOptions) = 0;
-    virtual HRESULT WINAPI InstallApplication(BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,__LONG32 lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN) = 0;
-    virtual HRESULT WINAPI StopRouter(void) = 0;
-    virtual HRESULT WINAPI RefreshRouter(void) = 0;
-    virtual HRESULT WINAPI StartRouter(void) = 0;
-    virtual HRESULT WINAPI Reserved1(void) = 0;
-    virtual HRESULT WINAPI Reserved2(void) = 0;
-    virtual HRESULT WINAPI InstallMultipleComponents(BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs) = 0;
-    virtual HRESULT WINAPI GetMultipleComponentsInfo(BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags) = 0;
-    virtual HRESULT WINAPI RefreshComponents(void) = 0;
-    virtual HRESULT WINAPI BackupREGDB(BSTR bstrBackupFilePath) = 0;
-    virtual HRESULT WINAPI RestoreREGDB(BSTR bstrBackupFilePath) = 0;
-    virtual HRESULT WINAPI QueryApplicationFile(BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames) = 0;
-    virtual HRESULT WINAPI StartApplication(BSTR bstrApplIdOrName) = 0;
-    virtual HRESULT WINAPI ServiceCheck(__LONG32 lService,__LONG32 *plStatus) = 0;
-    virtual HRESULT WINAPI InstallMultipleEventClasses(BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS) = 0;
-    virtual HRESULT WINAPI InstallEventClass(BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) = 0;
-    virtual HRESULT WINAPI GetEventClassesForIID(BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions) = 0;
-  };
+MIDL_INTERFACE("dd662187-dfc2-11d1-a2cf-00805fc79235")
+ICOMAdminCatalog : public IDispatch
+{
+    virtual HRESULT STDMETHODCALLTYPE GetCollection(
+        BSTR bstrCollName,
+        IDispatch **ppCatalogCollection) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Connect(
+        BSTR bstrCatalogServerName,
+        IDispatch **ppCatalogCollection) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_MajorVersion(
+        LONG *plMajorVersion) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_MinorVersion(
+        LONG *plMinorVersion) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetCollectionByQuery(
+        BSTR bstrCollName,
+        SAFEARRAY **ppsaVarQuery,
+        IDispatch **ppCatalogCollection) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ImportComponent(
+        BSTR bstrApplIDOrName,
+        BSTR bstrCLSIDOrProgID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallComponent(
+        BSTR bstrApplIDOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ShutdownApplication(
+        BSTR bstrApplIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ExportApplication(
+        BSTR bstrApplIDOrName,
+        BSTR bstrApplicationFile,
+        LONG lOptions) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallApplication(
+        BSTR bstrApplicationFile,
+        BSTR bstrDestinationDirectory,
+        LONG lOptions,
+        BSTR bstrUserId,
+        BSTR bstrPassword,
+        BSTR bstrRSN) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE StopRouter(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE RefreshRouter(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE StartRouter(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Reserved1(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Reserved2(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallMultipleComponents(
+        BSTR bstrApplIDOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetMultipleComponentsInfo(
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarClassNames,
+        SAFEARRAY **ppsaVarFileFlags,
+        SAFEARRAY **ppsaVarComponentFlags) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE RefreshComponents(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE BackupREGDB(
+        BSTR bstrBackupFilePath) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE RestoreREGDB(
+        BSTR bstrBackupFilePath) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE QueryApplicationFile(
+        BSTR bstrApplicationFile,
+        BSTR *pbstrApplicationName,
+        BSTR *pbstrApplicationDescription,
+        VARIANT_BOOL *pbHasUsers,
+        VARIANT_BOOL *pbIsProxy,
+        SAFEARRAY **ppsaVarFileNames) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE StartApplication(
+        BSTR bstrApplIdOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ServiceCheck(
+        LONG lService,
+        LONG *plStatus) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallMultipleEventClasses(
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDS) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallEventClass(
+        BSTR bstrApplIdOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetEventClassesForIID(
+        BSTR bstrIID,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarProgIDs,
+        SAFEARRAY **ppsaVarDescriptions) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ICOMAdminCatalog, 0xdd662187, 0xdfc2, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35)
+#endif
 #else
-  typedef struct ICOMAdminCatalogVtbl {
+typedef struct ICOMAdminCatalogVtbl {
     BEGIN_INTERFACE
-      HRESULT (WINAPI *QueryInterface)(ICOMAdminCatalog *This,REFIID riid,void **ppvObject);
-      ULONG (WINAPI *AddRef)(ICOMAdminCatalog *This);
-      ULONG (WINAPI *Release)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *GetTypeInfoCount)(ICOMAdminCatalog *This,UINT *pctinfo);
-      HRESULT (WINAPI *GetTypeInfo)(ICOMAdminCatalog *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
-      HRESULT (WINAPI *GetIDsOfNames)(ICOMAdminCatalog *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
-      HRESULT (WINAPI *Invoke)(ICOMAdminCatalog *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
-      HRESULT (WINAPI *GetCollection)(ICOMAdminCatalog *This,BSTR bstrCollName,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *Connect)(ICOMAdminCatalog *This,BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *get_MajorVersion)(ICOMAdminCatalog *This,__LONG32 *plMajorVersion);
-      HRESULT (WINAPI *get_MinorVersion)(ICOMAdminCatalog *This,__LONG32 *plMinorVersion);
-      HRESULT (WINAPI *GetCollectionByQuery)(ICOMAdminCatalog *This,BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *ImportComponent)(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID);
-      HRESULT (WINAPI *InstallComponent)(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-      HRESULT (WINAPI *ShutdownApplication)(ICOMAdminCatalog *This,BSTR bstrApplIDOrName);
-      HRESULT (WINAPI *ExportApplication)(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrApplicationFile,__LONG32 lOptions);
-      HRESULT (WINAPI *InstallApplication)(ICOMAdminCatalog *This,BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,__LONG32 lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN);
-      HRESULT (WINAPI *StopRouter)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *RefreshRouter)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *StartRouter)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *Reserved1)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *Reserved2)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *InstallMultipleComponents)(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs);
-      HRESULT (WINAPI *GetMultipleComponentsInfo)(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags);
-      HRESULT (WINAPI *RefreshComponents)(ICOMAdminCatalog *This);
-      HRESULT (WINAPI *BackupREGDB)(ICOMAdminCatalog *This,BSTR bstrBackupFilePath);
-      HRESULT (WINAPI *RestoreREGDB)(ICOMAdminCatalog *This,BSTR bstrBackupFilePath);
-      HRESULT (WINAPI *QueryApplicationFile)(ICOMAdminCatalog *This,BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames);
-      HRESULT (WINAPI *StartApplication)(ICOMAdminCatalog *This,BSTR bstrApplIdOrName);
-      HRESULT (WINAPI *ServiceCheck)(ICOMAdminCatalog *This,__LONG32 lService,__LONG32 *plStatus);
-      HRESULT (WINAPI *InstallMultipleEventClasses)(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS);
-      HRESULT (WINAPI *InstallEventClass)(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-      HRESULT (WINAPI *GetEventClassesForIID)(ICOMAdminCatalog *This,BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions);
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ICOMAdminCatalog* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ICOMAdminCatalog* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ICOMAdminCatalog* This);
+
+    /*** IDispatch methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
+        ICOMAdminCatalog* This,
+        UINT *pctinfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
+        ICOMAdminCatalog* This,
+        UINT iTInfo,
+        LCID lcid,
+        ITypeInfo **ppTInfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
+        ICOMAdminCatalog* This,
+        REFIID riid,
+        LPOLESTR *rgszNames,
+        UINT cNames,
+        LCID lcid,
+        DISPID *rgDispId);
+
+    HRESULT (STDMETHODCALLTYPE *Invoke)(
+        ICOMAdminCatalog* This,
+        DISPID dispIdMember,
+        REFIID riid,
+        LCID lcid,
+        WORD wFlags,
+        DISPPARAMS *pDispParams,
+        VARIANT *pVarResult,
+        EXCEPINFO *pExcepInfo,
+        UINT *puArgErr);
+
+    /*** ICOMAdminCatalog methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetCollection)(
+        ICOMAdminCatalog* This,
+        BSTR bstrCollName,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *Connect)(
+        ICOMAdminCatalog* This,
+        BSTR bstrCatalogServerName,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *get_MajorVersion)(
+        ICOMAdminCatalog* This,
+        LONG *plMajorVersion);
+
+    HRESULT (STDMETHODCALLTYPE *get_MinorVersion)(
+        ICOMAdminCatalog* This,
+        LONG *plMinorVersion);
+
+    HRESULT (STDMETHODCALLTYPE *GetCollectionByQuery)(
+        ICOMAdminCatalog* This,
+        BSTR bstrCollName,
+        SAFEARRAY **ppsaVarQuery,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *ImportComponent)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrCLSIDOrProgID);
+
+    HRESULT (STDMETHODCALLTYPE *InstallComponent)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL);
+
+    HRESULT (STDMETHODCALLTYPE *ShutdownApplication)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *ExportApplication)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrApplicationFile,
+        LONG lOptions);
+
+    HRESULT (STDMETHODCALLTYPE *InstallApplication)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplicationFile,
+        BSTR bstrDestinationDirectory,
+        LONG lOptions,
+        BSTR bstrUserId,
+        BSTR bstrPassword,
+        BSTR bstrRSN);
+
+    HRESULT (STDMETHODCALLTYPE *StopRouter)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *RefreshRouter)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *StartRouter)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *Reserved1)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *Reserved2)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *InstallMultipleComponents)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIDOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs);
+
+    HRESULT (STDMETHODCALLTYPE *GetMultipleComponentsInfo)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarClassNames,
+        SAFEARRAY **ppsaVarFileFlags,
+        SAFEARRAY **ppsaVarComponentFlags);
+
+    HRESULT (STDMETHODCALLTYPE *RefreshComponents)(
+        ICOMAdminCatalog* This);
+
+    HRESULT (STDMETHODCALLTYPE *BackupREGDB)(
+        ICOMAdminCatalog* This,
+        BSTR bstrBackupFilePath);
+
+    HRESULT (STDMETHODCALLTYPE *RestoreREGDB)(
+        ICOMAdminCatalog* This,
+        BSTR bstrBackupFilePath);
+
+    HRESULT (STDMETHODCALLTYPE *QueryApplicationFile)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplicationFile,
+        BSTR *pbstrApplicationName,
+        BSTR *pbstrApplicationDescription,
+        VARIANT_BOOL *pbHasUsers,
+        VARIANT_BOOL *pbIsProxy,
+        SAFEARRAY **ppsaVarFileNames);
+
+    HRESULT (STDMETHODCALLTYPE *StartApplication)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIdOrName);
+
+    HRESULT (STDMETHODCALLTYPE *ServiceCheck)(
+        ICOMAdminCatalog* This,
+        LONG lService,
+        LONG *plStatus);
+
+    HRESULT (STDMETHODCALLTYPE *InstallMultipleEventClasses)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDS);
+
+    HRESULT (STDMETHODCALLTYPE *InstallEventClass)(
+        ICOMAdminCatalog* This,
+        BSTR bstrApplIdOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL);
+
+    HRESULT (STDMETHODCALLTYPE *GetEventClassesForIID)(
+        ICOMAdminCatalog* This,
+        BSTR bstrIID,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarProgIDs,
+        SAFEARRAY **ppsaVarDescriptions);
+
     END_INTERFACE
-  } ICOMAdminCatalogVtbl;
-  struct ICOMAdminCatalog {
-    CONST_VTBL struct ICOMAdminCatalogVtbl *lpVtbl;
-  };
+} ICOMAdminCatalogVtbl;
+interface ICOMAdminCatalog {
+    CONST_VTBL ICOMAdminCatalogVtbl* lpVtbl;
+};
+
 #ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
 #define ICOMAdminCatalog_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
 #define ICOMAdminCatalog_AddRef(This) (This)->lpVtbl->AddRef(This)
 #define ICOMAdminCatalog_Release(This) (This)->lpVtbl->Release(This)
+/*** IDispatch methods ***/
 #define ICOMAdminCatalog_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
 #define ICOMAdminCatalog_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
 #define ICOMAdminCatalog_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
 #define ICOMAdminCatalog_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
+/*** ICOMAdminCatalog methods ***/
 #define ICOMAdminCatalog_GetCollection(This,bstrCollName,ppCatalogCollection) (This)->lpVtbl->GetCollection(This,bstrCollName,ppCatalogCollection)
 #define ICOMAdminCatalog_Connect(This,bstrCatalogServerName,ppCatalogCollection) (This)->lpVtbl->Connect(This,bstrCatalogServerName,ppCatalogCollection)
 #define ICOMAdminCatalog_get_MajorVersion(This,plMajorVersion) (This)->lpVtbl->get_MajorVersion(This,plMajorVersion)
@@ -195,188 +690,872 @@ extern "C"{
 #define ICOMAdminCatalog_InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS) (This)->lpVtbl->InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS)
 #define ICOMAdminCatalog_InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL) (This)->lpVtbl->InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL)
 #define ICOMAdminCatalog_GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions) (This)->lpVtbl->GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog_QueryInterface(ICOMAdminCatalog* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ICOMAdminCatalog_AddRef(ICOMAdminCatalog* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ICOMAdminCatalog_Release(ICOMAdminCatalog* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDispatch methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetTypeInfoCount(ICOMAdminCatalog* This,UINT *pctinfo) {
+    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetTypeInfo(ICOMAdminCatalog* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
+    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetIDsOfNames(ICOMAdminCatalog* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
+    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_Invoke(ICOMAdminCatalog* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
+    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
+}
+/*** ICOMAdminCatalog methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetCollection(ICOMAdminCatalog* This,BSTR bstrCollName,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollection(This,bstrCollName,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_Connect(ICOMAdminCatalog* This,BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->Connect(This,bstrCatalogServerName,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_get_MajorVersion(ICOMAdminCatalog* This,LONG *plMajorVersion) {
+    return This->lpVtbl->get_MajorVersion(This,plMajorVersion);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_get_MinorVersion(ICOMAdminCatalog* This,LONG *plMinorVersion) {
+    return This->lpVtbl->get_MinorVersion(This,plMinorVersion);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetCollectionByQuery(ICOMAdminCatalog* This,BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollectionByQuery(This,bstrCollName,ppsaVarQuery,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_ImportComponent(ICOMAdminCatalog* This,BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID) {
+    return This->lpVtbl->ImportComponent(This,bstrApplIDOrName,bstrCLSIDOrProgID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_InstallComponent(ICOMAdminCatalog* This,BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) {
+    return This->lpVtbl->InstallComponent(This,bstrApplIDOrName,bstrDLL,bstrTLB,bstrPSDLL);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_ShutdownApplication(ICOMAdminCatalog* This,BSTR bstrApplIDOrName) {
+    return This->lpVtbl->ShutdownApplication(This,bstrApplIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_ExportApplication(ICOMAdminCatalog* This,BSTR bstrApplIDOrName,BSTR bstrApplicationFile,LONG lOptions) {
+    return This->lpVtbl->ExportApplication(This,bstrApplIDOrName,bstrApplicationFile,lOptions);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_InstallApplication(ICOMAdminCatalog* This,BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,LONG lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN) {
+    return This->lpVtbl->InstallApplication(This,bstrApplicationFile,bstrDestinationDirectory,lOptions,bstrUserId,bstrPassword,bstrRSN);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_StopRouter(ICOMAdminCatalog* This) {
+    return This->lpVtbl->StopRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_RefreshRouter(ICOMAdminCatalog* This) {
+    return This->lpVtbl->RefreshRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_StartRouter(ICOMAdminCatalog* This) {
+    return This->lpVtbl->StartRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_Reserved1(ICOMAdminCatalog* This) {
+    return This->lpVtbl->Reserved1(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_Reserved2(ICOMAdminCatalog* This) {
+    return This->lpVtbl->Reserved2(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_InstallMultipleComponents(ICOMAdminCatalog* This,BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs) {
+    return This->lpVtbl->InstallMultipleComponents(This,bstrApplIDOrName,ppsaVarFileNames,ppsaVarCLSIDs);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetMultipleComponentsInfo(ICOMAdminCatalog* This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags) {
+    return This->lpVtbl->GetMultipleComponentsInfo(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDs,ppsaVarClassNames,ppsaVarFileFlags,ppsaVarComponentFlags);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_RefreshComponents(ICOMAdminCatalog* This) {
+    return This->lpVtbl->RefreshComponents(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_BackupREGDB(ICOMAdminCatalog* This,BSTR bstrBackupFilePath) {
+    return This->lpVtbl->BackupREGDB(This,bstrBackupFilePath);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_RestoreREGDB(ICOMAdminCatalog* This,BSTR bstrBackupFilePath) {
+    return This->lpVtbl->RestoreREGDB(This,bstrBackupFilePath);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_QueryApplicationFile(ICOMAdminCatalog* This,BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames) {
+    return This->lpVtbl->QueryApplicationFile(This,bstrApplicationFile,pbstrApplicationName,pbstrApplicationDescription,pbHasUsers,pbIsProxy,ppsaVarFileNames);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_StartApplication(ICOMAdminCatalog* This,BSTR bstrApplIdOrName) {
+    return This->lpVtbl->StartApplication(This,bstrApplIdOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_ServiceCheck(ICOMAdminCatalog* This,LONG lService,LONG *plStatus) {
+    return This->lpVtbl->ServiceCheck(This,lService,plStatus);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_InstallMultipleEventClasses(ICOMAdminCatalog* This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS) {
+    return This->lpVtbl->InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_InstallEventClass(ICOMAdminCatalog* This,BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) {
+    return This->lpVtbl->InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog_GetEventClassesForIID(ICOMAdminCatalog* This,BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions) {
+    return This->lpVtbl->GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions);
+}
 #endif
 #endif
-  HRESULT WINAPI ICOMAdminCatalog_GetCollection_Proxy(ICOMAdminCatalog *This,BSTR bstrCollName,IDispatch **ppCatalogCollection);
-  void __RPC_STUB ICOMAdminCatalog_GetCollection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_Connect_Proxy(ICOMAdminCatalog *This,BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection);
-  void __RPC_STUB ICOMAdminCatalog_Connect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_get_MajorVersion_Proxy(ICOMAdminCatalog *This,__LONG32 *plMajorVersion);
-  void __RPC_STUB ICOMAdminCatalog_get_MajorVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_get_MinorVersion_Proxy(ICOMAdminCatalog *This,__LONG32 *plMinorVersion);
-  void __RPC_STUB ICOMAdminCatalog_get_MinorVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_GetCollectionByQuery_Proxy(ICOMAdminCatalog *This,BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection);
-  void __RPC_STUB ICOMAdminCatalog_GetCollectionByQuery_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_ImportComponent_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID);
-  void __RPC_STUB ICOMAdminCatalog_ImportComponent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_InstallComponent_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-  void __RPC_STUB ICOMAdminCatalog_InstallComponent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_ShutdownApplication_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIDOrName);
-  void __RPC_STUB ICOMAdminCatalog_ShutdownApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_ExportApplication_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,BSTR bstrApplicationFile,__LONG32 lOptions);
-  void __RPC_STUB ICOMAdminCatalog_ExportApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_InstallApplication_Proxy(ICOMAdminCatalog *This,BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,__LONG32 lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN);
-  void __RPC_STUB ICOMAdminCatalog_InstallApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_StopRouter_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_StopRouter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_RefreshRouter_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_RefreshRouter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_StartRouter_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_StartRouter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_Reserved1_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_Reserved1_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_Reserved2_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_Reserved2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_InstallMultipleComponents_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs);
-  void __RPC_STUB ICOMAdminCatalog_InstallMultipleComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_GetMultipleComponentsInfo_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags);
-  void __RPC_STUB ICOMAdminCatalog_GetMultipleComponentsInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_RefreshComponents_Proxy(ICOMAdminCatalog *This);
-  void __RPC_STUB ICOMAdminCatalog_RefreshComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_BackupREGDB_Proxy(ICOMAdminCatalog *This,BSTR bstrBackupFilePath);
-  void __RPC_STUB ICOMAdminCatalog_BackupREGDB_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_RestoreREGDB_Proxy(ICOMAdminCatalog *This,BSTR bstrBackupFilePath);
-  void __RPC_STUB ICOMAdminCatalog_RestoreREGDB_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_QueryApplicationFile_Proxy(ICOMAdminCatalog *This,BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames);
-  void __RPC_STUB ICOMAdminCatalog_QueryApplicationFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_StartApplication_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIdOrName);
-  void __RPC_STUB ICOMAdminCatalog_StartApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_ServiceCheck_Proxy(ICOMAdminCatalog *This,__LONG32 lService,__LONG32 *plStatus);
-  void __RPC_STUB ICOMAdminCatalog_ServiceCheck_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_InstallMultipleEventClasses_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS);
-  void __RPC_STUB ICOMAdminCatalog_InstallMultipleEventClasses_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_InstallEventClass_Proxy(ICOMAdminCatalog *This,BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-  void __RPC_STUB ICOMAdminCatalog_InstallEventClass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog_GetEventClassesForIID_Proxy(ICOMAdminCatalog *This,BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions);
-  void __RPC_STUB ICOMAdminCatalog_GetEventClassesForIID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
+
 #endif
 
-  typedef enum COMAdminInUse {
-    COMAdminNotInUse = 0,COMAdminInUseByCatalog = 0x1,COMAdminInUseByRegistryUnknown = 0x2,COMAdminInUseByRegistryProxyStub = 0x3,
-    COMAdminInUseByRegistryTypeLib = 0x4,COMAdminInUseByRegistryClsid = 0x5
-  } COMAdminInUse;
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_GetCollection_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrCollName,
+    IDispatch **ppCatalogCollection);
+void __RPC_STUB ICOMAdminCatalog_GetCollection_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_Connect_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrCatalogServerName,
+    IDispatch **ppCatalogCollection);
+void __RPC_STUB ICOMAdminCatalog_Connect_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_get_MajorVersion_Proxy(
+    ICOMAdminCatalog* This,
+    LONG *plMajorVersion);
+void __RPC_STUB ICOMAdminCatalog_get_MajorVersion_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_get_MinorVersion_Proxy(
+    ICOMAdminCatalog* This,
+    LONG *plMinorVersion);
+void __RPC_STUB ICOMAdminCatalog_get_MinorVersion_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_GetCollectionByQuery_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrCollName,
+    SAFEARRAY **ppsaVarQuery,
+    IDispatch **ppCatalogCollection);
+void __RPC_STUB ICOMAdminCatalog_GetCollectionByQuery_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_ImportComponent_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIDOrName,
+    BSTR bstrCLSIDOrProgID);
+void __RPC_STUB ICOMAdminCatalog_ImportComponent_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_InstallComponent_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIDOrName,
+    BSTR bstrDLL,
+    BSTR bstrTLB,
+    BSTR bstrPSDLL);
+void __RPC_STUB ICOMAdminCatalog_InstallComponent_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_ShutdownApplication_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIDOrName);
+void __RPC_STUB ICOMAdminCatalog_ShutdownApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_ExportApplication_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIDOrName,
+    BSTR bstrApplicationFile,
+    LONG lOptions);
+void __RPC_STUB ICOMAdminCatalog_ExportApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_InstallApplication_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplicationFile,
+    BSTR bstrDestinationDirectory,
+    LONG lOptions,
+    BSTR bstrUserId,
+    BSTR bstrPassword,
+    BSTR bstrRSN);
+void __RPC_STUB ICOMAdminCatalog_InstallApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_StopRouter_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_StopRouter_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_RefreshRouter_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_RefreshRouter_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_StartRouter_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_StartRouter_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_Reserved1_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_Reserved1_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_Reserved2_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_Reserved2_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_InstallMultipleComponents_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIDOrName,
+    SAFEARRAY **ppsaVarFileNames,
+    SAFEARRAY **ppsaVarCLSIDs);
+void __RPC_STUB ICOMAdminCatalog_InstallMultipleComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_GetMultipleComponentsInfo_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIdOrName,
+    SAFEARRAY **ppsaVarFileNames,
+    SAFEARRAY **ppsaVarCLSIDs,
+    SAFEARRAY **ppsaVarClassNames,
+    SAFEARRAY **ppsaVarFileFlags,
+    SAFEARRAY **ppsaVarComponentFlags);
+void __RPC_STUB ICOMAdminCatalog_GetMultipleComponentsInfo_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_RefreshComponents_Proxy(
+    ICOMAdminCatalog* This);
+void __RPC_STUB ICOMAdminCatalog_RefreshComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_BackupREGDB_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrBackupFilePath);
+void __RPC_STUB ICOMAdminCatalog_BackupREGDB_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_RestoreREGDB_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrBackupFilePath);
+void __RPC_STUB ICOMAdminCatalog_RestoreREGDB_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_QueryApplicationFile_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplicationFile,
+    BSTR *pbstrApplicationName,
+    BSTR *pbstrApplicationDescription,
+    VARIANT_BOOL *pbHasUsers,
+    VARIANT_BOOL *pbIsProxy,
+    SAFEARRAY **ppsaVarFileNames);
+void __RPC_STUB ICOMAdminCatalog_QueryApplicationFile_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_StartApplication_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIdOrName);
+void __RPC_STUB ICOMAdminCatalog_StartApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_ServiceCheck_Proxy(
+    ICOMAdminCatalog* This,
+    LONG lService,
+    LONG *plStatus);
+void __RPC_STUB ICOMAdminCatalog_ServiceCheck_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_InstallMultipleEventClasses_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIdOrName,
+    SAFEARRAY **ppsaVarFileNames,
+    SAFEARRAY **ppsaVarCLSIDS);
+void __RPC_STUB ICOMAdminCatalog_InstallMultipleEventClasses_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_InstallEventClass_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrApplIdOrName,
+    BSTR bstrDLL,
+    BSTR bstrTLB,
+    BSTR bstrPSDLL);
+void __RPC_STUB ICOMAdminCatalog_InstallEventClass_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog_GetEventClassesForIID_Proxy(
+    ICOMAdminCatalog* This,
+    BSTR bstrIID,
+    SAFEARRAY **ppsaVarCLSIDs,
+    SAFEARRAY **ppsaVarProgIDs,
+    SAFEARRAY **ppsaVarDescriptions);
+void __RPC_STUB ICOMAdminCatalog_GetEventClassesForIID_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
 
-  extern RPC_IF_HANDLE __MIDL_itf_comadmin_0116_v0_0_c_ifspec;
-  extern RPC_IF_HANDLE __MIDL_itf_comadmin_0116_v0_0_s_ifspec;
+#endif  /* __ICOMAdminCatalog_INTERFACE_DEFINED__ */
 
+/*****************************************************************************
+ * ICOMAdminCatalog2 interface
+ */
 #ifndef __ICOMAdminCatalog2_INTERFACE_DEFINED__
 #define __ICOMAdminCatalog2_INTERFACE_DEFINED__
-  EXTERN_C const IID IID_ICOMAdminCatalog2;
+
+DEFINE_GUID(IID_ICOMAdminCatalog2, 0x790c6e0b, 0x9194, 0x4cc9, 0x94,0x26, 0xa4,0x8a,0x63,0x18,0x56,0x96);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-  struct ICOMAdminCatalog2 : public ICOMAdminCatalog {
-  public:
-    virtual HRESULT WINAPI GetCollectionByQuery2(BSTR bstrCollectionName,VARIANT *pVarQueryStrings,IDispatch **ppCatalogCollection) = 0;
-    virtual HRESULT WINAPI GetApplicationInstanceIDFromProcessID(__LONG32 lProcessID,BSTR *pbstrApplicationInstanceID) = 0;
-    virtual HRESULT WINAPI ShutdownApplicationInstances(VARIANT *pVarApplicationInstanceID) = 0;
-    virtual HRESULT WINAPI PauseApplicationInstances(VARIANT *pVarApplicationInstanceID) = 0;
-    virtual HRESULT WINAPI ResumeApplicationInstances(VARIANT *pVarApplicationInstanceID) = 0;
-    virtual HRESULT WINAPI RecycleApplicationInstances(VARIANT *pVarApplicationInstanceID,__LONG32 lReasonCode) = 0;
-    virtual HRESULT WINAPI AreApplicationInstancesPaused(VARIANT *pVarApplicationInstanceID,VARIANT_BOOL *pVarBoolPaused) = 0;
-    virtual HRESULT WINAPI DumpApplicationInstance(BSTR bstrApplicationInstanceID,BSTR bstrDirectory,__LONG32 lMaxImages,BSTR *pbstrDumpFile) = 0;
-    virtual HRESULT WINAPI get_IsApplicationInstanceDumpSupported(VARIANT_BOOL *pVarBoolDumpSupported) = 0;
-    virtual HRESULT WINAPI CreateServiceForApplication(BSTR bstrApplicationIDOrName,BSTR bstrServiceName,BSTR bstrStartType,BSTR bstrErrorControl,BSTR bstrDependencies,BSTR bstrRunAs,BSTR bstrPassword,VARIANT_BOOL bDesktopOk) = 0;
-    virtual HRESULT WINAPI DeleteServiceForApplication(BSTR bstrApplicationIDOrName) = 0;
-    virtual HRESULT WINAPI GetPartitionID(BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionID) = 0;
-    virtual HRESULT WINAPI GetPartitionName(BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionName) = 0;
-    virtual HRESULT WINAPI put_CurrentPartition(BSTR bstrPartitionIDOrName) = 0;
-    virtual HRESULT WINAPI get_CurrentPartitionID(BSTR *pbstrPartitionID) = 0;
-    virtual HRESULT WINAPI get_CurrentPartitionName(BSTR *pbstrPartitionName) = 0;
-    virtual HRESULT WINAPI get_GlobalPartitionID(BSTR *pbstrGlobalPartitionID) = 0;
-    virtual HRESULT WINAPI FlushPartitionCache(void) = 0;
-    virtual HRESULT WINAPI CopyApplications(BSTR bstrSourcePartitionIDOrName,VARIANT *pVarApplicationID,BSTR bstrDestinationPartitionIDOrName) = 0;
-    virtual HRESULT WINAPI CopyComponents(BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName) = 0;
-    virtual HRESULT WINAPI MoveComponents(BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName) = 0;
-    virtual HRESULT WINAPI AliasComponent(BSTR bstrSrcApplicationIDOrName,BSTR bstrCLSIDOrProgID,BSTR bstrDestApplicationIDOrName,BSTR bstrNewProgId,BSTR bstrNewClsid) = 0;
-    virtual HRESULT WINAPI IsSafeToDelete(BSTR bstrDllName,COMAdminInUse *pCOMAdminInUse) = 0;
-    virtual HRESULT WINAPI ImportUnconfiguredComponents(BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) = 0;
-    virtual HRESULT WINAPI PromoteUnconfiguredComponents(BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) = 0;
-    virtual HRESULT WINAPI ImportComponents(BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) = 0;
-    virtual HRESULT WINAPI get_Is64BitCatalogServer(VARIANT_BOOL *pbIs64Bit) = 0;
-    virtual HRESULT WINAPI ExportPartition(BSTR bstrPartitionIDOrName,BSTR bstrPartitionFileName,__LONG32 lOptions) = 0;
-    virtual HRESULT WINAPI InstallPartition(BSTR bstrFileName,BSTR bstrDestDirectory,__LONG32 lOptions,BSTR bstrUserID,BSTR bstrPassword,BSTR bstrRSN) = 0;
-    virtual HRESULT WINAPI QueryApplicationFile2(BSTR bstrApplicationFile,IDispatch **ppFilesForImport) = 0;
-    virtual HRESULT WINAPI GetComponentVersionCount(BSTR bstrCLSIDOrProgID,__LONG32 *plVersionCount) = 0;
-  };
+MIDL_INTERFACE("790c6e0b-9194-4cc9-9426-a48a63185696")
+ICOMAdminCatalog2 : public ICOMAdminCatalog
+{
+    virtual HRESULT STDMETHODCALLTYPE GetCollectionByQuery2(
+        BSTR bstrCollectionName,
+        VARIANT *pVarQueryStrings,
+        IDispatch **ppCatalogCollection) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetApplicationInstanceIDFromProcessID(
+        LONG lProcessID,
+        BSTR *pbstrApplicationInstanceID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ShutdownApplicationInstances(
+        VARIANT *pVarApplicationInstanceID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE PauseApplicationInstances(
+        VARIANT *pVarApplicationInstanceID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ResumeApplicationInstances(
+        VARIANT *pVarApplicationInstanceID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE RecycleApplicationInstances(
+        VARIANT *pVarApplicationInstanceID,
+        LONG lReasonCode) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE AreApplicationInstancesPaused(
+        VARIANT *pVarApplicationInstanceID,
+        VARIANT_BOOL *pVarBoolPaused) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE DumpApplicationInstance(
+        BSTR bstrApplicationInstanceID,
+        BSTR bstrDirectory,
+        LONG lMaxImages,
+        BSTR *pbstrDumpFile) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_IsApplicationInstanceDumpSupported(
+        VARIANT_BOOL *pVarBoolDumpSupported) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CreateServiceForApplication(
+        BSTR bstrApplicationIDOrName,
+        BSTR bstrServiceName,
+        BSTR bstrStartType,
+        BSTR bstrErrorControl,
+        BSTR bstrDependencies,
+        BSTR bstrRunAs,
+        BSTR bstrPassword,
+        VARIANT_BOOL bDesktopOk) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE DeleteServiceForApplication(
+        BSTR bstrApplicationIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetPartitionID(
+        BSTR bstrApplicationIDOrName,
+        BSTR *pbstrPartitionID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetPartitionName(
+        BSTR bstrApplicationIDOrName,
+        BSTR *pbstrPartitionName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE put_CurrentPartition(
+        BSTR bstrPartitionIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_CurrentPartitionID(
+        BSTR *pbstrPartitionID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_CurrentPartitionName(
+        BSTR *pbstrPartitionName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_GlobalPartitionID(
+        BSTR *pbstrGlobalPartitionID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE FlushPartitionCache(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CopyApplications(
+        BSTR bstrSourcePartitionIDOrName,
+        VARIANT *pVarApplicationID,
+        BSTR bstrDestinationPartitionIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CopyComponents(
+        BSTR bstrSourceApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        BSTR bstrDestinationApplicationIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE MoveComponents(
+        BSTR bstrSourceApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        BSTR bstrDestinationApplicationIDOrName) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE AliasComponent(
+        BSTR bstrSrcApplicationIDOrName,
+        BSTR bstrCLSIDOrProgID,
+        BSTR bstrDestApplicationIDOrName,
+        BSTR bstrNewProgId,
+        BSTR bstrNewClsid) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE IsSafeToDelete(
+        BSTR bstrDllName,
+        COMAdminInUse *pCOMAdminInUse) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ImportUnconfiguredComponents(
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE PromoteUnconfiguredComponents(
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ImportComponents(
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Is64BitCatalogServer(
+        VARIANT_BOOL *pbIs64Bit) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ExportPartition(
+        BSTR bstrPartitionIDOrName,
+        BSTR bstrPartitionFileName,
+        LONG lOptions) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE InstallPartition(
+        BSTR bstrFileName,
+        BSTR bstrDestDirectory,
+        LONG lOptions,
+        BSTR bstrUserID,
+        BSTR bstrPassword,
+        BSTR bstrRSN) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE QueryApplicationFile2(
+        BSTR bstrApplicationFile,
+        IDispatch **ppFilesForImport) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetComponentVersionCount(
+        BSTR bstrCLSIDOrProgID,
+        LONG *plVersionCount) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ICOMAdminCatalog2, 0x790c6e0b, 0x9194, 0x4cc9, 0x94,0x26, 0xa4,0x8a,0x63,0x18,0x56,0x96)
+#endif
 #else
-  typedef struct ICOMAdminCatalog2Vtbl {
+typedef struct ICOMAdminCatalog2Vtbl {
     BEGIN_INTERFACE
-      HRESULT (WINAPI *QueryInterface)(ICOMAdminCatalog2 *This,REFIID riid,void **ppvObject);
-      ULONG (WINAPI *AddRef)(ICOMAdminCatalog2 *This);
-      ULONG (WINAPI *Release)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *GetTypeInfoCount)(ICOMAdminCatalog2 *This,UINT *pctinfo);
-      HRESULT (WINAPI *GetTypeInfo)(ICOMAdminCatalog2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
-      HRESULT (WINAPI *GetIDsOfNames)(ICOMAdminCatalog2 *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
-      HRESULT (WINAPI *Invoke)(ICOMAdminCatalog2 *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
-      HRESULT (WINAPI *GetCollection)(ICOMAdminCatalog2 *This,BSTR bstrCollName,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *Connect)(ICOMAdminCatalog2 *This,BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *get_MajorVersion)(ICOMAdminCatalog2 *This,__LONG32 *plMajorVersion);
-      HRESULT (WINAPI *get_MinorVersion)(ICOMAdminCatalog2 *This,__LONG32 *plMinorVersion);
-      HRESULT (WINAPI *GetCollectionByQuery)(ICOMAdminCatalog2 *This,BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *ImportComponent)(ICOMAdminCatalog2 *This,BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID);
-      HRESULT (WINAPI *InstallComponent)(ICOMAdminCatalog2 *This,BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-      HRESULT (WINAPI *ShutdownApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplIDOrName);
-      HRESULT (WINAPI *ExportApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplIDOrName,BSTR bstrApplicationFile,__LONG32 lOptions);
-      HRESULT (WINAPI *InstallApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,__LONG32 lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN);
-      HRESULT (WINAPI *StopRouter)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *RefreshRouter)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *StartRouter)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *Reserved1)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *Reserved2)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *InstallMultipleComponents)(ICOMAdminCatalog2 *This,BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs);
-      HRESULT (WINAPI *GetMultipleComponentsInfo)(ICOMAdminCatalog2 *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags);
-      HRESULT (WINAPI *RefreshComponents)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *BackupREGDB)(ICOMAdminCatalog2 *This,BSTR bstrBackupFilePath);
-      HRESULT (WINAPI *RestoreREGDB)(ICOMAdminCatalog2 *This,BSTR bstrBackupFilePath);
-      HRESULT (WINAPI *QueryApplicationFile)(ICOMAdminCatalog2 *This,BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames);
-      HRESULT (WINAPI *StartApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplIdOrName);
-      HRESULT (WINAPI *ServiceCheck)(ICOMAdminCatalog2 *This,__LONG32 lService,__LONG32 *plStatus);
-      HRESULT (WINAPI *InstallMultipleEventClasses)(ICOMAdminCatalog2 *This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS);
-      HRESULT (WINAPI *InstallEventClass)(ICOMAdminCatalog2 *This,BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL);
-      HRESULT (WINAPI *GetEventClassesForIID)(ICOMAdminCatalog2 *This,BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions);
-      HRESULT (WINAPI *GetCollectionByQuery2)(ICOMAdminCatalog2 *This,BSTR bstrCollectionName,VARIANT *pVarQueryStrings,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *GetApplicationInstanceIDFromProcessID)(ICOMAdminCatalog2 *This,__LONG32 lProcessID,BSTR *pbstrApplicationInstanceID);
-      HRESULT (WINAPI *ShutdownApplicationInstances)(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-      HRESULT (WINAPI *PauseApplicationInstances)(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-      HRESULT (WINAPI *ResumeApplicationInstances)(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-      HRESULT (WINAPI *RecycleApplicationInstances)(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID,__LONG32 lReasonCode);
-      HRESULT (WINAPI *AreApplicationInstancesPaused)(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID,VARIANT_BOOL *pVarBoolPaused);
-      HRESULT (WINAPI *DumpApplicationInstance)(ICOMAdminCatalog2 *This,BSTR bstrApplicationInstanceID,BSTR bstrDirectory,__LONG32 lMaxImages,BSTR *pbstrDumpFile);
-      HRESULT (WINAPI *get_IsApplicationInstanceDumpSupported)(ICOMAdminCatalog2 *This,VARIANT_BOOL *pVarBoolDumpSupported);
-      HRESULT (WINAPI *CreateServiceForApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR bstrServiceName,BSTR bstrStartType,BSTR bstrErrorControl,BSTR bstrDependencies,BSTR bstrRunAs,BSTR bstrPassword,VARIANT_BOOL bDesktopOk);
-      HRESULT (WINAPI *DeleteServiceForApplication)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName);
-      HRESULT (WINAPI *GetPartitionID)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionID);
-      HRESULT (WINAPI *GetPartitionName)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionName);
-      HRESULT (WINAPI *put_CurrentPartition)(ICOMAdminCatalog2 *This,BSTR bstrPartitionIDOrName);
-      HRESULT (WINAPI *get_CurrentPartitionID)(ICOMAdminCatalog2 *This,BSTR *pbstrPartitionID);
-      HRESULT (WINAPI *get_CurrentPartitionName)(ICOMAdminCatalog2 *This,BSTR *pbstrPartitionName);
-      HRESULT (WINAPI *get_GlobalPartitionID)(ICOMAdminCatalog2 *This,BSTR *pbstrGlobalPartitionID);
-      HRESULT (WINAPI *FlushPartitionCache)(ICOMAdminCatalog2 *This);
-      HRESULT (WINAPI *CopyApplications)(ICOMAdminCatalog2 *This,BSTR bstrSourcePartitionIDOrName,VARIANT *pVarApplicationID,BSTR bstrDestinationPartitionIDOrName);
-      HRESULT (WINAPI *CopyComponents)(ICOMAdminCatalog2 *This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName);
-      HRESULT (WINAPI *MoveComponents)(ICOMAdminCatalog2 *This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName);
-      HRESULT (WINAPI *AliasComponent)(ICOMAdminCatalog2 *This,BSTR bstrSrcApplicationIDOrName,BSTR bstrCLSIDOrProgID,BSTR bstrDestApplicationIDOrName,BSTR bstrNewProgId,BSTR bstrNewClsid);
-      HRESULT (WINAPI *IsSafeToDelete)(ICOMAdminCatalog2 *This,BSTR bstrDllName,COMAdminInUse *pCOMAdminInUse);
-      HRESULT (WINAPI *ImportUnconfiguredComponents)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-      HRESULT (WINAPI *PromoteUnconfiguredComponents)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-      HRESULT (WINAPI *ImportComponents)(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-      HRESULT (WINAPI *get_Is64BitCatalogServer)(ICOMAdminCatalog2 *This,VARIANT_BOOL *pbIs64Bit);
-      HRESULT (WINAPI *ExportPartition)(ICOMAdminCatalog2 *This,BSTR bstrPartitionIDOrName,BSTR bstrPartitionFileName,__LONG32 lOptions);
-      HRESULT (WINAPI *InstallPartition)(ICOMAdminCatalog2 *This,BSTR bstrFileName,BSTR bstrDestDirectory,__LONG32 lOptions,BSTR bstrUserID,BSTR bstrPassword,BSTR bstrRSN);
-      HRESULT (WINAPI *QueryApplicationFile2)(ICOMAdminCatalog2 *This,BSTR bstrApplicationFile,IDispatch **ppFilesForImport);
-      HRESULT (WINAPI *GetComponentVersionCount)(ICOMAdminCatalog2 *This,BSTR bstrCLSIDOrProgID,__LONG32 *plVersionCount);
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ICOMAdminCatalog2* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ICOMAdminCatalog2* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ICOMAdminCatalog2* This);
+
+    /*** IDispatch methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
+        ICOMAdminCatalog2* This,
+        UINT *pctinfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
+        ICOMAdminCatalog2* This,
+        UINT iTInfo,
+        LCID lcid,
+        ITypeInfo **ppTInfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
+        ICOMAdminCatalog2* This,
+        REFIID riid,
+        LPOLESTR *rgszNames,
+        UINT cNames,
+        LCID lcid,
+        DISPID *rgDispId);
+
+    HRESULT (STDMETHODCALLTYPE *Invoke)(
+        ICOMAdminCatalog2* This,
+        DISPID dispIdMember,
+        REFIID riid,
+        LCID lcid,
+        WORD wFlags,
+        DISPPARAMS *pDispParams,
+        VARIANT *pVarResult,
+        EXCEPINFO *pExcepInfo,
+        UINT *puArgErr);
+
+    /*** ICOMAdminCatalog methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetCollection)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrCollName,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *Connect)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrCatalogServerName,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *get_MajorVersion)(
+        ICOMAdminCatalog2* This,
+        LONG *plMajorVersion);
+
+    HRESULT (STDMETHODCALLTYPE *get_MinorVersion)(
+        ICOMAdminCatalog2* This,
+        LONG *plMinorVersion);
+
+    HRESULT (STDMETHODCALLTYPE *GetCollectionByQuery)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrCollName,
+        SAFEARRAY **ppsaVarQuery,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *ImportComponent)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrCLSIDOrProgID);
+
+    HRESULT (STDMETHODCALLTYPE *InstallComponent)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL);
+
+    HRESULT (STDMETHODCALLTYPE *ShutdownApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *ExportApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIDOrName,
+        BSTR bstrApplicationFile,
+        LONG lOptions);
+
+    HRESULT (STDMETHODCALLTYPE *InstallApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationFile,
+        BSTR bstrDestinationDirectory,
+        LONG lOptions,
+        BSTR bstrUserId,
+        BSTR bstrPassword,
+        BSTR bstrRSN);
+
+    HRESULT (STDMETHODCALLTYPE *StopRouter)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *RefreshRouter)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *StartRouter)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *Reserved1)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *Reserved2)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *InstallMultipleComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIDOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs);
+
+    HRESULT (STDMETHODCALLTYPE *GetMultipleComponentsInfo)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarClassNames,
+        SAFEARRAY **ppsaVarFileFlags,
+        SAFEARRAY **ppsaVarComponentFlags);
+
+    HRESULT (STDMETHODCALLTYPE *RefreshComponents)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *BackupREGDB)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrBackupFilePath);
+
+    HRESULT (STDMETHODCALLTYPE *RestoreREGDB)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrBackupFilePath);
+
+    HRESULT (STDMETHODCALLTYPE *QueryApplicationFile)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationFile,
+        BSTR *pbstrApplicationName,
+        BSTR *pbstrApplicationDescription,
+        VARIANT_BOOL *pbHasUsers,
+        VARIANT_BOOL *pbIsProxy,
+        SAFEARRAY **ppsaVarFileNames);
+
+    HRESULT (STDMETHODCALLTYPE *StartApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIdOrName);
+
+    HRESULT (STDMETHODCALLTYPE *ServiceCheck)(
+        ICOMAdminCatalog2* This,
+        LONG lService,
+        LONG *plStatus);
+
+    HRESULT (STDMETHODCALLTYPE *InstallMultipleEventClasses)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIdOrName,
+        SAFEARRAY **ppsaVarFileNames,
+        SAFEARRAY **ppsaVarCLSIDS);
+
+    HRESULT (STDMETHODCALLTYPE *InstallEventClass)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplIdOrName,
+        BSTR bstrDLL,
+        BSTR bstrTLB,
+        BSTR bstrPSDLL);
+
+    HRESULT (STDMETHODCALLTYPE *GetEventClassesForIID)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrIID,
+        SAFEARRAY **ppsaVarCLSIDs,
+        SAFEARRAY **ppsaVarProgIDs,
+        SAFEARRAY **ppsaVarDescriptions);
+
+    /*** ICOMAdminCatalog2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetCollectionByQuery2)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrCollectionName,
+        VARIANT *pVarQueryStrings,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *GetApplicationInstanceIDFromProcessID)(
+        ICOMAdminCatalog2* This,
+        LONG lProcessID,
+        BSTR *pbstrApplicationInstanceID);
+
+    HRESULT (STDMETHODCALLTYPE *ShutdownApplicationInstances)(
+        ICOMAdminCatalog2* This,
+        VARIANT *pVarApplicationInstanceID);
+
+    HRESULT (STDMETHODCALLTYPE *PauseApplicationInstances)(
+        ICOMAdminCatalog2* This,
+        VARIANT *pVarApplicationInstanceID);
+
+    HRESULT (STDMETHODCALLTYPE *ResumeApplicationInstances)(
+        ICOMAdminCatalog2* This,
+        VARIANT *pVarApplicationInstanceID);
+
+    HRESULT (STDMETHODCALLTYPE *RecycleApplicationInstances)(
+        ICOMAdminCatalog2* This,
+        VARIANT *pVarApplicationInstanceID,
+        LONG lReasonCode);
+
+    HRESULT (STDMETHODCALLTYPE *AreApplicationInstancesPaused)(
+        ICOMAdminCatalog2* This,
+        VARIANT *pVarApplicationInstanceID,
+        VARIANT_BOOL *pVarBoolPaused);
+
+    HRESULT (STDMETHODCALLTYPE *DumpApplicationInstance)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationInstanceID,
+        BSTR bstrDirectory,
+        LONG lMaxImages,
+        BSTR *pbstrDumpFile);
+
+    HRESULT (STDMETHODCALLTYPE *get_IsApplicationInstanceDumpSupported)(
+        ICOMAdminCatalog2* This,
+        VARIANT_BOOL *pVarBoolDumpSupported);
+
+    HRESULT (STDMETHODCALLTYPE *CreateServiceForApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        BSTR bstrServiceName,
+        BSTR bstrStartType,
+        BSTR bstrErrorControl,
+        BSTR bstrDependencies,
+        BSTR bstrRunAs,
+        BSTR bstrPassword,
+        VARIANT_BOOL bDesktopOk);
+
+    HRESULT (STDMETHODCALLTYPE *DeleteServiceForApplication)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *GetPartitionID)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        BSTR *pbstrPartitionID);
+
+    HRESULT (STDMETHODCALLTYPE *GetPartitionName)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        BSTR *pbstrPartitionName);
+
+    HRESULT (STDMETHODCALLTYPE *put_CurrentPartition)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrPartitionIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *get_CurrentPartitionID)(
+        ICOMAdminCatalog2* This,
+        BSTR *pbstrPartitionID);
+
+    HRESULT (STDMETHODCALLTYPE *get_CurrentPartitionName)(
+        ICOMAdminCatalog2* This,
+        BSTR *pbstrPartitionName);
+
+    HRESULT (STDMETHODCALLTYPE *get_GlobalPartitionID)(
+        ICOMAdminCatalog2* This,
+        BSTR *pbstrGlobalPartitionID);
+
+    HRESULT (STDMETHODCALLTYPE *FlushPartitionCache)(
+        ICOMAdminCatalog2* This);
+
+    HRESULT (STDMETHODCALLTYPE *CopyApplications)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrSourcePartitionIDOrName,
+        VARIANT *pVarApplicationID,
+        BSTR bstrDestinationPartitionIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *CopyComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrSourceApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        BSTR bstrDestinationApplicationIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *MoveComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrSourceApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        BSTR bstrDestinationApplicationIDOrName);
+
+    HRESULT (STDMETHODCALLTYPE *AliasComponent)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrSrcApplicationIDOrName,
+        BSTR bstrCLSIDOrProgID,
+        BSTR bstrDestApplicationIDOrName,
+        BSTR bstrNewProgId,
+        BSTR bstrNewClsid);
+
+    HRESULT (STDMETHODCALLTYPE *IsSafeToDelete)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrDllName,
+        COMAdminInUse *pCOMAdminInUse);
+
+    HRESULT (STDMETHODCALLTYPE *ImportUnconfiguredComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType);
+
+    HRESULT (STDMETHODCALLTYPE *PromoteUnconfiguredComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType);
+
+    HRESULT (STDMETHODCALLTYPE *ImportComponents)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationIDOrName,
+        VARIANT *pVarCLSIDOrProgID,
+        VARIANT *pVarComponentType);
+
+    HRESULT (STDMETHODCALLTYPE *get_Is64BitCatalogServer)(
+        ICOMAdminCatalog2* This,
+        VARIANT_BOOL *pbIs64Bit);
+
+    HRESULT (STDMETHODCALLTYPE *ExportPartition)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrPartitionIDOrName,
+        BSTR bstrPartitionFileName,
+        LONG lOptions);
+
+    HRESULT (STDMETHODCALLTYPE *InstallPartition)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrFileName,
+        BSTR bstrDestDirectory,
+        LONG lOptions,
+        BSTR bstrUserID,
+        BSTR bstrPassword,
+        BSTR bstrRSN);
+
+    HRESULT (STDMETHODCALLTYPE *QueryApplicationFile2)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrApplicationFile,
+        IDispatch **ppFilesForImport);
+
+    HRESULT (STDMETHODCALLTYPE *GetComponentVersionCount)(
+        ICOMAdminCatalog2* This,
+        BSTR bstrCLSIDOrProgID,
+        LONG *plVersionCount);
+
     END_INTERFACE
-  } ICOMAdminCatalog2Vtbl;
-  struct ICOMAdminCatalog2 {
-    CONST_VTBL struct ICOMAdminCatalog2Vtbl *lpVtbl;
-  };
+} ICOMAdminCatalog2Vtbl;
+interface ICOMAdminCatalog2 {
+    CONST_VTBL ICOMAdminCatalog2Vtbl* lpVtbl;
+};
+
 #ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
 #define ICOMAdminCatalog2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
 #define ICOMAdminCatalog2_AddRef(This) (This)->lpVtbl->AddRef(This)
 #define ICOMAdminCatalog2_Release(This) (This)->lpVtbl->Release(This)
+/*** IDispatch methods ***/
 #define ICOMAdminCatalog2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
 #define ICOMAdminCatalog2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
 #define ICOMAdminCatalog2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
 #define ICOMAdminCatalog2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
+/*** ICOMAdminCatalog methods ***/
 #define ICOMAdminCatalog2_GetCollection(This,bstrCollName,ppCatalogCollection) (This)->lpVtbl->GetCollection(This,bstrCollName,ppCatalogCollection)
 #define ICOMAdminCatalog2_Connect(This,bstrCatalogServerName,ppCatalogCollection) (This)->lpVtbl->Connect(This,bstrCatalogServerName,ppCatalogCollection)
 #define ICOMAdminCatalog2_get_MajorVersion(This,plMajorVersion) (This)->lpVtbl->get_MajorVersion(This,plMajorVersion)
@@ -403,6 +1582,7 @@ extern "C"{
 #define ICOMAdminCatalog2_InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS) (This)->lpVtbl->InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS)
 #define ICOMAdminCatalog2_InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL) (This)->lpVtbl->InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL)
 #define ICOMAdminCatalog2_GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions) (This)->lpVtbl->GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions)
+/*** ICOMAdminCatalog2 methods ***/
 #define ICOMAdminCatalog2_GetCollectionByQuery2(This,bstrCollectionName,pVarQueryStrings,ppCatalogCollection) (This)->lpVtbl->GetCollectionByQuery2(This,bstrCollectionName,pVarQueryStrings,ppCatalogCollection)
 #define ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID(This,lProcessID,pbstrApplicationInstanceID) (This)->lpVtbl->GetApplicationInstanceIDFromProcessID(This,lProcessID,pbstrApplicationInstanceID)
 #define ICOMAdminCatalog2_ShutdownApplicationInstances(This,pVarApplicationInstanceID) (This)->lpVtbl->ShutdownApplicationInstances(This,pVarApplicationInstanceID)
@@ -434,116 +1614,638 @@ extern "C"{
 #define ICOMAdminCatalog2_InstallPartition(This,bstrFileName,bstrDestDirectory,lOptions,bstrUserID,bstrPassword,bstrRSN) (This)->lpVtbl->InstallPartition(This,bstrFileName,bstrDestDirectory,lOptions,bstrUserID,bstrPassword,bstrRSN)
 #define ICOMAdminCatalog2_QueryApplicationFile2(This,bstrApplicationFile,ppFilesForImport) (This)->lpVtbl->QueryApplicationFile2(This,bstrApplicationFile,ppFilesForImport)
 #define ICOMAdminCatalog2_GetComponentVersionCount(This,bstrCLSIDOrProgID,plVersionCount) (This)->lpVtbl->GetComponentVersionCount(This,bstrCLSIDOrProgID,plVersionCount)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog2_QueryInterface(ICOMAdminCatalog2* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ICOMAdminCatalog2_AddRef(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ICOMAdminCatalog2_Release(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDispatch methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetTypeInfoCount(ICOMAdminCatalog2* This,UINT *pctinfo) {
+    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetTypeInfo(ICOMAdminCatalog2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
+    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetIDsOfNames(ICOMAdminCatalog2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
+    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_Invoke(ICOMAdminCatalog2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
+    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
+}
+/*** ICOMAdminCatalog methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetCollection(ICOMAdminCatalog2* This,BSTR bstrCollName,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollection(This,bstrCollName,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_Connect(ICOMAdminCatalog2* This,BSTR bstrCatalogServerName,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->Connect(This,bstrCatalogServerName,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_MajorVersion(ICOMAdminCatalog2* This,LONG *plMajorVersion) {
+    return This->lpVtbl->get_MajorVersion(This,plMajorVersion);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_MinorVersion(ICOMAdminCatalog2* This,LONG *plMinorVersion) {
+    return This->lpVtbl->get_MinorVersion(This,plMinorVersion);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetCollectionByQuery(ICOMAdminCatalog2* This,BSTR bstrCollName,SAFEARRAY **ppsaVarQuery,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollectionByQuery(This,bstrCollName,ppsaVarQuery,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ImportComponent(ICOMAdminCatalog2* This,BSTR bstrApplIDOrName,BSTR bstrCLSIDOrProgID) {
+    return This->lpVtbl->ImportComponent(This,bstrApplIDOrName,bstrCLSIDOrProgID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallComponent(ICOMAdminCatalog2* This,BSTR bstrApplIDOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) {
+    return This->lpVtbl->InstallComponent(This,bstrApplIDOrName,bstrDLL,bstrTLB,bstrPSDLL);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ShutdownApplication(ICOMAdminCatalog2* This,BSTR bstrApplIDOrName) {
+    return This->lpVtbl->ShutdownApplication(This,bstrApplIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ExportApplication(ICOMAdminCatalog2* This,BSTR bstrApplIDOrName,BSTR bstrApplicationFile,LONG lOptions) {
+    return This->lpVtbl->ExportApplication(This,bstrApplIDOrName,bstrApplicationFile,lOptions);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallApplication(ICOMAdminCatalog2* This,BSTR bstrApplicationFile,BSTR bstrDestinationDirectory,LONG lOptions,BSTR bstrUserId,BSTR bstrPassword,BSTR bstrRSN) {
+    return This->lpVtbl->InstallApplication(This,bstrApplicationFile,bstrDestinationDirectory,lOptions,bstrUserId,bstrPassword,bstrRSN);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_StopRouter(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->StopRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_RefreshRouter(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->RefreshRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_StartRouter(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->StartRouter(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_Reserved1(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->Reserved1(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_Reserved2(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->Reserved2(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallMultipleComponents(ICOMAdminCatalog2* This,BSTR bstrApplIDOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs) {
+    return This->lpVtbl->InstallMultipleComponents(This,bstrApplIDOrName,ppsaVarFileNames,ppsaVarCLSIDs);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetMultipleComponentsInfo(ICOMAdminCatalog2* This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarClassNames,SAFEARRAY **ppsaVarFileFlags,SAFEARRAY **ppsaVarComponentFlags) {
+    return This->lpVtbl->GetMultipleComponentsInfo(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDs,ppsaVarClassNames,ppsaVarFileFlags,ppsaVarComponentFlags);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_RefreshComponents(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->RefreshComponents(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_BackupREGDB(ICOMAdminCatalog2* This,BSTR bstrBackupFilePath) {
+    return This->lpVtbl->BackupREGDB(This,bstrBackupFilePath);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_RestoreREGDB(ICOMAdminCatalog2* This,BSTR bstrBackupFilePath) {
+    return This->lpVtbl->RestoreREGDB(This,bstrBackupFilePath);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_QueryApplicationFile(ICOMAdminCatalog2* This,BSTR bstrApplicationFile,BSTR *pbstrApplicationName,BSTR *pbstrApplicationDescription,VARIANT_BOOL *pbHasUsers,VARIANT_BOOL *pbIsProxy,SAFEARRAY **ppsaVarFileNames) {
+    return This->lpVtbl->QueryApplicationFile(This,bstrApplicationFile,pbstrApplicationName,pbstrApplicationDescription,pbHasUsers,pbIsProxy,ppsaVarFileNames);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_StartApplication(ICOMAdminCatalog2* This,BSTR bstrApplIdOrName) {
+    return This->lpVtbl->StartApplication(This,bstrApplIdOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ServiceCheck(ICOMAdminCatalog2* This,LONG lService,LONG *plStatus) {
+    return This->lpVtbl->ServiceCheck(This,lService,plStatus);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallMultipleEventClasses(ICOMAdminCatalog2* This,BSTR bstrApplIdOrName,SAFEARRAY **ppsaVarFileNames,SAFEARRAY **ppsaVarCLSIDS) {
+    return This->lpVtbl->InstallMultipleEventClasses(This,bstrApplIdOrName,ppsaVarFileNames,ppsaVarCLSIDS);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallEventClass(ICOMAdminCatalog2* This,BSTR bstrApplIdOrName,BSTR bstrDLL,BSTR bstrTLB,BSTR bstrPSDLL) {
+    return This->lpVtbl->InstallEventClass(This,bstrApplIdOrName,bstrDLL,bstrTLB,bstrPSDLL);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetEventClassesForIID(ICOMAdminCatalog2* This,BSTR bstrIID,SAFEARRAY **ppsaVarCLSIDs,SAFEARRAY **ppsaVarProgIDs,SAFEARRAY **ppsaVarDescriptions) {
+    return This->lpVtbl->GetEventClassesForIID(This,bstrIID,ppsaVarCLSIDs,ppsaVarProgIDs,ppsaVarDescriptions);
+}
+/*** ICOMAdminCatalog2 methods ***/
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetCollectionByQuery2(ICOMAdminCatalog2* This,BSTR bstrCollectionName,VARIANT *pVarQueryStrings,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollectionByQuery2(This,bstrCollectionName,pVarQueryStrings,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID(ICOMAdminCatalog2* This,LONG lProcessID,BSTR *pbstrApplicationInstanceID) {
+    return This->lpVtbl->GetApplicationInstanceIDFromProcessID(This,lProcessID,pbstrApplicationInstanceID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ShutdownApplicationInstances(ICOMAdminCatalog2* This,VARIANT *pVarApplicationInstanceID) {
+    return This->lpVtbl->ShutdownApplicationInstances(This,pVarApplicationInstanceID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_PauseApplicationInstances(ICOMAdminCatalog2* This,VARIANT *pVarApplicationInstanceID) {
+    return This->lpVtbl->PauseApplicationInstances(This,pVarApplicationInstanceID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ResumeApplicationInstances(ICOMAdminCatalog2* This,VARIANT *pVarApplicationInstanceID) {
+    return This->lpVtbl->ResumeApplicationInstances(This,pVarApplicationInstanceID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_RecycleApplicationInstances(ICOMAdminCatalog2* This,VARIANT *pVarApplicationInstanceID,LONG lReasonCode) {
+    return This->lpVtbl->RecycleApplicationInstances(This,pVarApplicationInstanceID,lReasonCode);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_AreApplicationInstancesPaused(ICOMAdminCatalog2* This,VARIANT *pVarApplicationInstanceID,VARIANT_BOOL *pVarBoolPaused) {
+    return This->lpVtbl->AreApplicationInstancesPaused(This,pVarApplicationInstanceID,pVarBoolPaused);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_DumpApplicationInstance(ICOMAdminCatalog2* This,BSTR bstrApplicationInstanceID,BSTR bstrDirectory,LONG lMaxImages,BSTR *pbstrDumpFile) {
+    return This->lpVtbl->DumpApplicationInstance(This,bstrApplicationInstanceID,bstrDirectory,lMaxImages,pbstrDumpFile);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported(ICOMAdminCatalog2* This,VARIANT_BOOL *pVarBoolDumpSupported) {
+    return This->lpVtbl->get_IsApplicationInstanceDumpSupported(This,pVarBoolDumpSupported);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_CreateServiceForApplication(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,BSTR bstrServiceName,BSTR bstrStartType,BSTR bstrErrorControl,BSTR bstrDependencies,BSTR bstrRunAs,BSTR bstrPassword,VARIANT_BOOL bDesktopOk) {
+    return This->lpVtbl->CreateServiceForApplication(This,bstrApplicationIDOrName,bstrServiceName,bstrStartType,bstrErrorControl,bstrDependencies,bstrRunAs,bstrPassword,bDesktopOk);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_DeleteServiceForApplication(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName) {
+    return This->lpVtbl->DeleteServiceForApplication(This,bstrApplicationIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetPartitionID(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionID) {
+    return This->lpVtbl->GetPartitionID(This,bstrApplicationIDOrName,pbstrPartitionID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetPartitionName(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionName) {
+    return This->lpVtbl->GetPartitionName(This,bstrApplicationIDOrName,pbstrPartitionName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_put_CurrentPartition(ICOMAdminCatalog2* This,BSTR bstrPartitionIDOrName) {
+    return This->lpVtbl->put_CurrentPartition(This,bstrPartitionIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_CurrentPartitionID(ICOMAdminCatalog2* This,BSTR *pbstrPartitionID) {
+    return This->lpVtbl->get_CurrentPartitionID(This,pbstrPartitionID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_CurrentPartitionName(ICOMAdminCatalog2* This,BSTR *pbstrPartitionName) {
+    return This->lpVtbl->get_CurrentPartitionName(This,pbstrPartitionName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_GlobalPartitionID(ICOMAdminCatalog2* This,BSTR *pbstrGlobalPartitionID) {
+    return This->lpVtbl->get_GlobalPartitionID(This,pbstrGlobalPartitionID);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_FlushPartitionCache(ICOMAdminCatalog2* This) {
+    return This->lpVtbl->FlushPartitionCache(This);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_CopyApplications(ICOMAdminCatalog2* This,BSTR bstrSourcePartitionIDOrName,VARIANT *pVarApplicationID,BSTR bstrDestinationPartitionIDOrName) {
+    return This->lpVtbl->CopyApplications(This,bstrSourcePartitionIDOrName,pVarApplicationID,bstrDestinationPartitionIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_CopyComponents(ICOMAdminCatalog2* This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName) {
+    return This->lpVtbl->CopyComponents(This,bstrSourceApplicationIDOrName,pVarCLSIDOrProgID,bstrDestinationApplicationIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_MoveComponents(ICOMAdminCatalog2* This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName) {
+    return This->lpVtbl->MoveComponents(This,bstrSourceApplicationIDOrName,pVarCLSIDOrProgID,bstrDestinationApplicationIDOrName);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_AliasComponent(ICOMAdminCatalog2* This,BSTR bstrSrcApplicationIDOrName,BSTR bstrCLSIDOrProgID,BSTR bstrDestApplicationIDOrName,BSTR bstrNewProgId,BSTR bstrNewClsid) {
+    return This->lpVtbl->AliasComponent(This,bstrSrcApplicationIDOrName,bstrCLSIDOrProgID,bstrDestApplicationIDOrName,bstrNewProgId,bstrNewClsid);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_IsSafeToDelete(ICOMAdminCatalog2* This,BSTR bstrDllName,COMAdminInUse *pCOMAdminInUse) {
+    return This->lpVtbl->IsSafeToDelete(This,bstrDllName,pCOMAdminInUse);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ImportUnconfiguredComponents(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) {
+    return This->lpVtbl->ImportUnconfiguredComponents(This,bstrApplicationIDOrName,pVarCLSIDOrProgID,pVarComponentType);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_PromoteUnconfiguredComponents(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) {
+    return This->lpVtbl->PromoteUnconfiguredComponents(This,bstrApplicationIDOrName,pVarCLSIDOrProgID,pVarComponentType);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ImportComponents(ICOMAdminCatalog2* This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType) {
+    return This->lpVtbl->ImportComponents(This,bstrApplicationIDOrName,pVarCLSIDOrProgID,pVarComponentType);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_get_Is64BitCatalogServer(ICOMAdminCatalog2* This,VARIANT_BOOL *pbIs64Bit) {
+    return This->lpVtbl->get_Is64BitCatalogServer(This,pbIs64Bit);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_ExportPartition(ICOMAdminCatalog2* This,BSTR bstrPartitionIDOrName,BSTR bstrPartitionFileName,LONG lOptions) {
+    return This->lpVtbl->ExportPartition(This,bstrPartitionIDOrName,bstrPartitionFileName,lOptions);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_InstallPartition(ICOMAdminCatalog2* This,BSTR bstrFileName,BSTR bstrDestDirectory,LONG lOptions,BSTR bstrUserID,BSTR bstrPassword,BSTR bstrRSN) {
+    return This->lpVtbl->InstallPartition(This,bstrFileName,bstrDestDirectory,lOptions,bstrUserID,bstrPassword,bstrRSN);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_QueryApplicationFile2(ICOMAdminCatalog2* This,BSTR bstrApplicationFile,IDispatch **ppFilesForImport) {
+    return This->lpVtbl->QueryApplicationFile2(This,bstrApplicationFile,ppFilesForImport);
+}
+static FORCEINLINE HRESULT ICOMAdminCatalog2_GetComponentVersionCount(ICOMAdminCatalog2* This,BSTR bstrCLSIDOrProgID,LONG *plVersionCount) {
+    return This->lpVtbl->GetComponentVersionCount(This,bstrCLSIDOrProgID,plVersionCount);
+}
 #endif
 #endif
-  HRESULT WINAPI ICOMAdminCatalog2_GetCollectionByQuery2_Proxy(ICOMAdminCatalog2 *This,BSTR bstrCollectionName,VARIANT *pVarQueryStrings,IDispatch **ppCatalogCollection);
-  void __RPC_STUB ICOMAdminCatalog2_GetCollectionByQuery2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID_Proxy(ICOMAdminCatalog2 *This,__LONG32 lProcessID,BSTR *pbstrApplicationInstanceID);
-  void __RPC_STUB ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_ShutdownApplicationInstances_Proxy(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-  void __RPC_STUB ICOMAdminCatalog2_ShutdownApplicationInstances_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_PauseApplicationInstances_Proxy(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-  void __RPC_STUB ICOMAdminCatalog2_PauseApplicationInstances_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_ResumeApplicationInstances_Proxy(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID);
-  void __RPC_STUB ICOMAdminCatalog2_ResumeApplicationInstances_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_RecycleApplicationInstances_Proxy(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID,__LONG32 lReasonCode);
-  void __RPC_STUB ICOMAdminCatalog2_RecycleApplicationInstances_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_AreApplicationInstancesPaused_Proxy(ICOMAdminCatalog2 *This,VARIANT *pVarApplicationInstanceID,VARIANT_BOOL *pVarBoolPaused);
-  void __RPC_STUB ICOMAdminCatalog2_AreApplicationInstancesPaused_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_DumpApplicationInstance_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationInstanceID,BSTR bstrDirectory,__LONG32 lMaxImages,BSTR *pbstrDumpFile);
-  void __RPC_STUB ICOMAdminCatalog2_DumpApplicationInstance_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported_Proxy(ICOMAdminCatalog2 *This,VARIANT_BOOL *pVarBoolDumpSupported);
-  void __RPC_STUB ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_CreateServiceForApplication_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR bstrServiceName,BSTR bstrStartType,BSTR bstrErrorControl,BSTR bstrDependencies,BSTR bstrRunAs,BSTR bstrPassword,VARIANT_BOOL bDesktopOk);
-  void __RPC_STUB ICOMAdminCatalog2_CreateServiceForApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_DeleteServiceForApplication_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName);
-  void __RPC_STUB ICOMAdminCatalog2_DeleteServiceForApplication_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_GetPartitionID_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionID);
-  void __RPC_STUB ICOMAdminCatalog2_GetPartitionID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_GetPartitionName_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,BSTR *pbstrPartitionName);
-  void __RPC_STUB ICOMAdminCatalog2_GetPartitionName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_put_CurrentPartition_Proxy(ICOMAdminCatalog2 *This,BSTR bstrPartitionIDOrName);
-  void __RPC_STUB ICOMAdminCatalog2_put_CurrentPartition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_get_CurrentPartitionID_Proxy(ICOMAdminCatalog2 *This,BSTR *pbstrPartitionID);
-  void __RPC_STUB ICOMAdminCatalog2_get_CurrentPartitionID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_get_CurrentPartitionName_Proxy(ICOMAdminCatalog2 *This,BSTR *pbstrPartitionName);
-  void __RPC_STUB ICOMAdminCatalog2_get_CurrentPartitionName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_get_GlobalPartitionID_Proxy(ICOMAdminCatalog2 *This,BSTR *pbstrGlobalPartitionID);
-  void __RPC_STUB ICOMAdminCatalog2_get_GlobalPartitionID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_FlushPartitionCache_Proxy(ICOMAdminCatalog2 *This);
-  void __RPC_STUB ICOMAdminCatalog2_FlushPartitionCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_CopyApplications_Proxy(ICOMAdminCatalog2 *This,BSTR bstrSourcePartitionIDOrName,VARIANT *pVarApplicationID,BSTR bstrDestinationPartitionIDOrName);
-  void __RPC_STUB ICOMAdminCatalog2_CopyApplications_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_CopyComponents_Proxy(ICOMAdminCatalog2 *This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName);
-  void __RPC_STUB ICOMAdminCatalog2_CopyComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_MoveComponents_Proxy(ICOMAdminCatalog2 *This,BSTR bstrSourceApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,BSTR bstrDestinationApplicationIDOrName);
-  void __RPC_STUB ICOMAdminCatalog2_MoveComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_AliasComponent_Proxy(ICOMAdminCatalog2 *This,BSTR bstrSrcApplicationIDOrName,BSTR bstrCLSIDOrProgID,BSTR bstrDestApplicationIDOrName,BSTR bstrNewProgId,BSTR bstrNewClsid);
-  void __RPC_STUB ICOMAdminCatalog2_AliasComponent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_IsSafeToDelete_Proxy(ICOMAdminCatalog2 *This,BSTR bstrDllName,COMAdminInUse *pCOMAdminInUse);
-  void __RPC_STUB ICOMAdminCatalog2_IsSafeToDelete_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_ImportUnconfiguredComponents_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-  void __RPC_STUB ICOMAdminCatalog2_ImportUnconfiguredComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_PromoteUnconfiguredComponents_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-  void __RPC_STUB ICOMAdminCatalog2_PromoteUnconfiguredComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_ImportComponents_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationIDOrName,VARIANT *pVarCLSIDOrProgID,VARIANT *pVarComponentType);
-  void __RPC_STUB ICOMAdminCatalog2_ImportComponents_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_get_Is64BitCatalogServer_Proxy(ICOMAdminCatalog2 *This,VARIANT_BOOL *pbIs64Bit);
-  void __RPC_STUB ICOMAdminCatalog2_get_Is64BitCatalogServer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_ExportPartition_Proxy(ICOMAdminCatalog2 *This,BSTR bstrPartitionIDOrName,BSTR bstrPartitionFileName,__LONG32 lOptions);
-  void __RPC_STUB ICOMAdminCatalog2_ExportPartition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_InstallPartition_Proxy(ICOMAdminCatalog2 *This,BSTR bstrFileName,BSTR bstrDestDirectory,__LONG32 lOptions,BSTR bstrUserID,BSTR bstrPassword,BSTR bstrRSN);
-  void __RPC_STUB ICOMAdminCatalog2_InstallPartition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_QueryApplicationFile2_Proxy(ICOMAdminCatalog2 *This,BSTR bstrApplicationFile,IDispatch **ppFilesForImport);
-  void __RPC_STUB ICOMAdminCatalog2_QueryApplicationFile2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICOMAdminCatalog2_GetComponentVersionCount_Proxy(ICOMAdminCatalog2 *This,BSTR bstrCLSIDOrProgID,__LONG32 *plVersionCount);
-  void __RPC_STUB ICOMAdminCatalog2_GetComponentVersionCount_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
+
 #endif
 
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_GetCollectionByQuery2_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrCollectionName,
+    VARIANT *pVarQueryStrings,
+    IDispatch **ppCatalogCollection);
+void __RPC_STUB ICOMAdminCatalog2_GetCollectionByQuery2_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID_Proxy(
+    ICOMAdminCatalog2* This,
+    LONG lProcessID,
+    BSTR *pbstrApplicationInstanceID);
+void __RPC_STUB ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_ShutdownApplicationInstances_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT *pVarApplicationInstanceID);
+void __RPC_STUB ICOMAdminCatalog2_ShutdownApplicationInstances_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_PauseApplicationInstances_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT *pVarApplicationInstanceID);
+void __RPC_STUB ICOMAdminCatalog2_PauseApplicationInstances_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_ResumeApplicationInstances_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT *pVarApplicationInstanceID);
+void __RPC_STUB ICOMAdminCatalog2_ResumeApplicationInstances_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_RecycleApplicationInstances_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT *pVarApplicationInstanceID,
+    LONG lReasonCode);
+void __RPC_STUB ICOMAdminCatalog2_RecycleApplicationInstances_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_AreApplicationInstancesPaused_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT *pVarApplicationInstanceID,
+    VARIANT_BOOL *pVarBoolPaused);
+void __RPC_STUB ICOMAdminCatalog2_AreApplicationInstancesPaused_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_DumpApplicationInstance_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationInstanceID,
+    BSTR bstrDirectory,
+    LONG lMaxImages,
+    BSTR *pbstrDumpFile);
+void __RPC_STUB ICOMAdminCatalog2_DumpApplicationInstance_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT_BOOL *pVarBoolDumpSupported);
+void __RPC_STUB ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_CreateServiceForApplication_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    BSTR bstrServiceName,
+    BSTR bstrStartType,
+    BSTR bstrErrorControl,
+    BSTR bstrDependencies,
+    BSTR bstrRunAs,
+    BSTR bstrPassword,
+    VARIANT_BOOL bDesktopOk);
+void __RPC_STUB ICOMAdminCatalog2_CreateServiceForApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_DeleteServiceForApplication_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName);
+void __RPC_STUB ICOMAdminCatalog2_DeleteServiceForApplication_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_GetPartitionID_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    BSTR *pbstrPartitionID);
+void __RPC_STUB ICOMAdminCatalog2_GetPartitionID_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_GetPartitionName_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    BSTR *pbstrPartitionName);
+void __RPC_STUB ICOMAdminCatalog2_GetPartitionName_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_put_CurrentPartition_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrPartitionIDOrName);
+void __RPC_STUB ICOMAdminCatalog2_put_CurrentPartition_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_get_CurrentPartitionID_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR *pbstrPartitionID);
+void __RPC_STUB ICOMAdminCatalog2_get_CurrentPartitionID_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_get_CurrentPartitionName_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR *pbstrPartitionName);
+void __RPC_STUB ICOMAdminCatalog2_get_CurrentPartitionName_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_get_GlobalPartitionID_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR *pbstrGlobalPartitionID);
+void __RPC_STUB ICOMAdminCatalog2_get_GlobalPartitionID_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_FlushPartitionCache_Proxy(
+    ICOMAdminCatalog2* This);
+void __RPC_STUB ICOMAdminCatalog2_FlushPartitionCache_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_CopyApplications_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrSourcePartitionIDOrName,
+    VARIANT *pVarApplicationID,
+    BSTR bstrDestinationPartitionIDOrName);
+void __RPC_STUB ICOMAdminCatalog2_CopyApplications_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_CopyComponents_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrSourceApplicationIDOrName,
+    VARIANT *pVarCLSIDOrProgID,
+    BSTR bstrDestinationApplicationIDOrName);
+void __RPC_STUB ICOMAdminCatalog2_CopyComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_MoveComponents_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrSourceApplicationIDOrName,
+    VARIANT *pVarCLSIDOrProgID,
+    BSTR bstrDestinationApplicationIDOrName);
+void __RPC_STUB ICOMAdminCatalog2_MoveComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_AliasComponent_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrSrcApplicationIDOrName,
+    BSTR bstrCLSIDOrProgID,
+    BSTR bstrDestApplicationIDOrName,
+    BSTR bstrNewProgId,
+    BSTR bstrNewClsid);
+void __RPC_STUB ICOMAdminCatalog2_AliasComponent_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_IsSafeToDelete_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrDllName,
+    COMAdminInUse *pCOMAdminInUse);
+void __RPC_STUB ICOMAdminCatalog2_IsSafeToDelete_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_ImportUnconfiguredComponents_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    VARIANT *pVarCLSIDOrProgID,
+    VARIANT *pVarComponentType);
+void __RPC_STUB ICOMAdminCatalog2_ImportUnconfiguredComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_PromoteUnconfiguredComponents_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    VARIANT *pVarCLSIDOrProgID,
+    VARIANT *pVarComponentType);
+void __RPC_STUB ICOMAdminCatalog2_PromoteUnconfiguredComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_ImportComponents_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationIDOrName,
+    VARIANT *pVarCLSIDOrProgID,
+    VARIANT *pVarComponentType);
+void __RPC_STUB ICOMAdminCatalog2_ImportComponents_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_get_Is64BitCatalogServer_Proxy(
+    ICOMAdminCatalog2* This,
+    VARIANT_BOOL *pbIs64Bit);
+void __RPC_STUB ICOMAdminCatalog2_get_Is64BitCatalogServer_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_ExportPartition_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrPartitionIDOrName,
+    BSTR bstrPartitionFileName,
+    LONG lOptions);
+void __RPC_STUB ICOMAdminCatalog2_ExportPartition_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_InstallPartition_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrFileName,
+    BSTR bstrDestDirectory,
+    LONG lOptions,
+    BSTR bstrUserID,
+    BSTR bstrPassword,
+    BSTR bstrRSN);
+void __RPC_STUB ICOMAdminCatalog2_InstallPartition_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_QueryApplicationFile2_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrApplicationFile,
+    IDispatch **ppFilesForImport);
+void __RPC_STUB ICOMAdminCatalog2_QueryApplicationFile2_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICOMAdminCatalog2_GetComponentVersionCount_Proxy(
+    ICOMAdminCatalog2* This,
+    BSTR bstrCLSIDOrProgID,
+    LONG *plVersionCount);
+void __RPC_STUB ICOMAdminCatalog2_GetComponentVersionCount_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __ICOMAdminCatalog2_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * ICatalogObject interface
+ */
 #ifndef __ICatalogObject_INTERFACE_DEFINED__
 #define __ICatalogObject_INTERFACE_DEFINED__
-  EXTERN_C const IID IID_ICatalogObject;
+
+DEFINE_GUID(IID_ICatalogObject, 0x6eb22871, 0x8a19, 0x11d0, 0x81,0xb6, 0x00,0xa0,0xc9,0x23,0x1c,0x29);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-  struct ICatalogObject : public IDispatch {
-  public:
-    virtual HRESULT WINAPI get_Value(BSTR bstrPropName,VARIANT *pvarRetVal) = 0;
-    virtual HRESULT WINAPI put_Value(BSTR bstrPropName,VARIANT val) = 0;
-    virtual HRESULT WINAPI get_Key(VARIANT *pvarRetVal) = 0;
-    virtual HRESULT WINAPI get_Name(VARIANT *pvarRetVal) = 0;
-    virtual HRESULT WINAPI IsPropertyReadOnly(BSTR bstrPropName,VARIANT_BOOL *pbRetVal) = 0;
-    virtual HRESULT WINAPI get_Valid(VARIANT_BOOL *pbRetVal) = 0;
-    virtual HRESULT WINAPI IsPropertyWriteOnly(BSTR bstrPropName,VARIANT_BOOL *pbRetVal) = 0;
-  };
+MIDL_INTERFACE("6eb22871-8a19-11d0-81b6-00a0c9231c29")
+ICatalogObject : public IDispatch
+{
+    virtual HRESULT STDMETHODCALLTYPE get_Value(
+        BSTR bstrPropName,
+        VARIANT *pvarRetVal) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE put_Value(
+        BSTR bstrPropName,
+        VARIANT val) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Key(
+        VARIANT *pvarRetVal) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Name(
+        VARIANT *pvarRetVal) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE IsPropertyReadOnly(
+        BSTR bstrPropName,
+        VARIANT_BOOL *pbRetVal) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Valid(
+        VARIANT_BOOL *pbRetVal) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE IsPropertyWriteOnly(
+        BSTR bstrPropName,
+        VARIANT_BOOL *pbRetVal) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ICatalogObject, 0x6eb22871, 0x8a19, 0x11d0, 0x81,0xb6, 0x00,0xa0,0xc9,0x23,0x1c,0x29)
+#endif
 #else
-  typedef struct ICatalogObjectVtbl {
+typedef struct ICatalogObjectVtbl {
     BEGIN_INTERFACE
-      HRESULT (WINAPI *QueryInterface)(ICatalogObject *This,REFIID riid,void **ppvObject);
-      ULONG (WINAPI *AddRef)(ICatalogObject *This);
-      ULONG (WINAPI *Release)(ICatalogObject *This);
-      HRESULT (WINAPI *GetTypeInfoCount)(ICatalogObject *This,UINT *pctinfo);
-      HRESULT (WINAPI *GetTypeInfo)(ICatalogObject *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
-      HRESULT (WINAPI *GetIDsOfNames)(ICatalogObject *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
-      HRESULT (WINAPI *Invoke)(ICatalogObject *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
-      HRESULT (WINAPI *get_Value)(ICatalogObject *This,BSTR bstrPropName,VARIANT *pvarRetVal);
-      HRESULT (WINAPI *put_Value)(ICatalogObject *This,BSTR bstrPropName,VARIANT val);
-      HRESULT (WINAPI *get_Key)(ICatalogObject *This,VARIANT *pvarRetVal);
-      HRESULT (WINAPI *get_Name)(ICatalogObject *This,VARIANT *pvarRetVal);
-      HRESULT (WINAPI *IsPropertyReadOnly)(ICatalogObject *This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal);
-      HRESULT (WINAPI *get_Valid)(ICatalogObject *This,VARIANT_BOOL *pbRetVal);
-      HRESULT (WINAPI *IsPropertyWriteOnly)(ICatalogObject *This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal);
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ICatalogObject* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ICatalogObject* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ICatalogObject* This);
+
+    /*** IDispatch methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
+        ICatalogObject* This,
+        UINT *pctinfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
+        ICatalogObject* This,
+        UINT iTInfo,
+        LCID lcid,
+        ITypeInfo **ppTInfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
+        ICatalogObject* This,
+        REFIID riid,
+        LPOLESTR *rgszNames,
+        UINT cNames,
+        LCID lcid,
+        DISPID *rgDispId);
+
+    HRESULT (STDMETHODCALLTYPE *Invoke)(
+        ICatalogObject* This,
+        DISPID dispIdMember,
+        REFIID riid,
+        LCID lcid,
+        WORD wFlags,
+        DISPPARAMS *pDispParams,
+        VARIANT *pVarResult,
+        EXCEPINFO *pExcepInfo,
+        UINT *puArgErr);
+
+    /*** ICatalogObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *get_Value)(
+        ICatalogObject* This,
+        BSTR bstrPropName,
+        VARIANT *pvarRetVal);
+
+    HRESULT (STDMETHODCALLTYPE *put_Value)(
+        ICatalogObject* This,
+        BSTR bstrPropName,
+        VARIANT val);
+
+    HRESULT (STDMETHODCALLTYPE *get_Key)(
+        ICatalogObject* This,
+        VARIANT *pvarRetVal);
+
+    HRESULT (STDMETHODCALLTYPE *get_Name)(
+        ICatalogObject* This,
+        VARIANT *pvarRetVal);
+
+    HRESULT (STDMETHODCALLTYPE *IsPropertyReadOnly)(
+        ICatalogObject* This,
+        BSTR bstrPropName,
+        VARIANT_BOOL *pbRetVal);
+
+    HRESULT (STDMETHODCALLTYPE *get_Valid)(
+        ICatalogObject* This,
+        VARIANT_BOOL *pbRetVal);
+
+    HRESULT (STDMETHODCALLTYPE *IsPropertyWriteOnly)(
+        ICatalogObject* This,
+        BSTR bstrPropName,
+        VARIANT_BOOL *pbRetVal);
+
     END_INTERFACE
-  } ICatalogObjectVtbl;
-  struct ICatalogObject {
-    CONST_VTBL struct ICatalogObjectVtbl *lpVtbl;
-  };
+} ICatalogObjectVtbl;
+interface ICatalogObject {
+    CONST_VTBL ICatalogObjectVtbl* lpVtbl;
+};
+
 #ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
 #define ICatalogObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
 #define ICatalogObject_AddRef(This) (This)->lpVtbl->AddRef(This)
 #define ICatalogObject_Release(This) (This)->lpVtbl->Release(This)
+/*** IDispatch methods ***/
 #define ICatalogObject_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
 #define ICatalogObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
 #define ICatalogObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
 #define ICatalogObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
+/*** ICatalogObject methods ***/
 #define ICatalogObject_get_Value(This,bstrPropName,pvarRetVal) (This)->lpVtbl->get_Value(This,bstrPropName,pvarRetVal)
 #define ICatalogObject_put_Value(This,bstrPropName,val) (This)->lpVtbl->put_Value(This,bstrPropName,val)
 #define ICatalogObject_get_Key(This,pvarRetVal) (This)->lpVtbl->get_Key(This,pvarRetVal)
@@ -551,86 +2253,319 @@ extern "C"{
 #define ICatalogObject_IsPropertyReadOnly(This,bstrPropName,pbRetVal) (This)->lpVtbl->IsPropertyReadOnly(This,bstrPropName,pbRetVal)
 #define ICatalogObject_get_Valid(This,pbRetVal) (This)->lpVtbl->get_Valid(This,pbRetVal)
 #define ICatalogObject_IsPropertyWriteOnly(This,bstrPropName,pbRetVal) (This)->lpVtbl->IsPropertyWriteOnly(This,bstrPropName,pbRetVal)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ICatalogObject_QueryInterface(ICatalogObject* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ICatalogObject_AddRef(ICatalogObject* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ICatalogObject_Release(ICatalogObject* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDispatch methods ***/
+static FORCEINLINE HRESULT ICatalogObject_GetTypeInfoCount(ICatalogObject* This,UINT *pctinfo) {
+    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
+}
+static FORCEINLINE HRESULT ICatalogObject_GetTypeInfo(ICatalogObject* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
+    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
+}
+static FORCEINLINE HRESULT ICatalogObject_GetIDsOfNames(ICatalogObject* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
+    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
+}
+static FORCEINLINE HRESULT ICatalogObject_Invoke(ICatalogObject* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
+    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
+}
+/*** ICatalogObject methods ***/
+static FORCEINLINE HRESULT ICatalogObject_get_Value(ICatalogObject* This,BSTR bstrPropName,VARIANT *pvarRetVal) {
+    return This->lpVtbl->get_Value(This,bstrPropName,pvarRetVal);
+}
+static FORCEINLINE HRESULT ICatalogObject_put_Value(ICatalogObject* This,BSTR bstrPropName,VARIANT val) {
+    return This->lpVtbl->put_Value(This,bstrPropName,val);
+}
+static FORCEINLINE HRESULT ICatalogObject_get_Key(ICatalogObject* This,VARIANT *pvarRetVal) {
+    return This->lpVtbl->get_Key(This,pvarRetVal);
+}
+static FORCEINLINE HRESULT ICatalogObject_get_Name(ICatalogObject* This,VARIANT *pvarRetVal) {
+    return This->lpVtbl->get_Name(This,pvarRetVal);
+}
+static FORCEINLINE HRESULT ICatalogObject_IsPropertyReadOnly(ICatalogObject* This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal) {
+    return This->lpVtbl->IsPropertyReadOnly(This,bstrPropName,pbRetVal);
+}
+static FORCEINLINE HRESULT ICatalogObject_get_Valid(ICatalogObject* This,VARIANT_BOOL *pbRetVal) {
+    return This->lpVtbl->get_Valid(This,pbRetVal);
+}
+static FORCEINLINE HRESULT ICatalogObject_IsPropertyWriteOnly(ICatalogObject* This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal) {
+    return This->lpVtbl->IsPropertyWriteOnly(This,bstrPropName,pbRetVal);
+}
 #endif
 #endif
-  HRESULT WINAPI ICatalogObject_get_Value_Proxy(ICatalogObject *This,BSTR bstrPropName,VARIANT *pvarRetVal);
-  void __RPC_STUB ICatalogObject_get_Value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_put_Value_Proxy(ICatalogObject *This,BSTR bstrPropName,VARIANT val);
-  void __RPC_STUB ICatalogObject_put_Value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_get_Key_Proxy(ICatalogObject *This,VARIANT *pvarRetVal);
-  void __RPC_STUB ICatalogObject_get_Key_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_get_Name_Proxy(ICatalogObject *This,VARIANT *pvarRetVal);
-  void __RPC_STUB ICatalogObject_get_Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_IsPropertyReadOnly_Proxy(ICatalogObject *This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal);
-  void __RPC_STUB ICatalogObject_IsPropertyReadOnly_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_get_Valid_Proxy(ICatalogObject *This,VARIANT_BOOL *pbRetVal);
-  void __RPC_STUB ICatalogObject_get_Valid_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogObject_IsPropertyWriteOnly_Proxy(ICatalogObject *This,BSTR bstrPropName,VARIANT_BOOL *pbRetVal);
-  void __RPC_STUB ICatalogObject_IsPropertyWriteOnly_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
+
 #endif
 
+HRESULT STDMETHODCALLTYPE ICatalogObject_get_Value_Proxy(
+    ICatalogObject* This,
+    BSTR bstrPropName,
+    VARIANT *pvarRetVal);
+void __RPC_STUB ICatalogObject_get_Value_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_put_Value_Proxy(
+    ICatalogObject* This,
+    BSTR bstrPropName,
+    VARIANT val);
+void __RPC_STUB ICatalogObject_put_Value_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_get_Key_Proxy(
+    ICatalogObject* This,
+    VARIANT *pvarRetVal);
+void __RPC_STUB ICatalogObject_get_Key_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_get_Name_Proxy(
+    ICatalogObject* This,
+    VARIANT *pvarRetVal);
+void __RPC_STUB ICatalogObject_get_Name_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_IsPropertyReadOnly_Proxy(
+    ICatalogObject* This,
+    BSTR bstrPropName,
+    VARIANT_BOOL *pbRetVal);
+void __RPC_STUB ICatalogObject_IsPropertyReadOnly_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_get_Valid_Proxy(
+    ICatalogObject* This,
+    VARIANT_BOOL *pbRetVal);
+void __RPC_STUB ICatalogObject_get_Valid_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogObject_IsPropertyWriteOnly_Proxy(
+    ICatalogObject* This,
+    BSTR bstrPropName,
+    VARIANT_BOOL *pbRetVal);
+void __RPC_STUB ICatalogObject_IsPropertyWriteOnly_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __ICatalogObject_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * ICatalogCollection interface
+ */
 #ifndef __ICatalogCollection_INTERFACE_DEFINED__
 #define __ICatalogCollection_INTERFACE_DEFINED__
-  EXTERN_C const IID IID_ICatalogCollection;
+
+DEFINE_GUID(IID_ICatalogCollection, 0x6eb22872, 0x8a19, 0x11d0, 0x81,0xb6, 0x00,0xa0,0xc9,0x23,0x1c,0x29);
 #if defined(__cplusplus) && !defined(CINTERFACE)
-  struct ICatalogCollection : public IDispatch {
-  public:
-    virtual HRESULT WINAPI get__NewEnum(IUnknown **ppEnumVariant) = 0;
-    virtual HRESULT WINAPI get_Item(__LONG32 lIndex,IDispatch **ppCatalogObject) = 0;
-    virtual HRESULT WINAPI get_Count(__LONG32 *plObjectCount) = 0;
-    virtual HRESULT WINAPI Remove(__LONG32 lIndex) = 0;
-    virtual HRESULT WINAPI Add(IDispatch **ppCatalogObject) = 0;
-    virtual HRESULT WINAPI Populate(void) = 0;
-    virtual HRESULT WINAPI SaveChanges(__LONG32 *pcChanges) = 0;
-    virtual HRESULT WINAPI GetCollection(BSTR bstrCollName,VARIANT varObjectKey,IDispatch **ppCatalogCollection) = 0;
-    virtual HRESULT WINAPI get_Name(VARIANT *pVarNamel) = 0;
-    virtual HRESULT WINAPI get_AddEnabled(VARIANT_BOOL *pVarBool) = 0;
-    virtual HRESULT WINAPI get_RemoveEnabled(VARIANT_BOOL *pVarBool) = 0;
-    virtual HRESULT WINAPI GetUtilInterface(IDispatch **ppIDispatch) = 0;
-    virtual HRESULT WINAPI get_DataStoreMajorVersion(__LONG32 *plMajorVersion) = 0;
-    virtual HRESULT WINAPI get_DataStoreMinorVersion(__LONG32 *plMinorVersionl) = 0;
-    virtual HRESULT WINAPI PopulateByKey(SAFEARRAY *psaKeys) = 0;
-    virtual HRESULT WINAPI PopulateByQuery(BSTR bstrQueryString,__LONG32 lQueryType) = 0;
-  };
+MIDL_INTERFACE("6eb22872-8a19-11d0-81b6-00a0c9231c29")
+ICatalogCollection : public IDispatch
+{
+    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
+        IUnknown **ppEnumVariant) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Item(
+        LONG lIndex,
+        IDispatch **ppCatalogObject) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Count(
+        LONG *plObjectCount) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Remove(
+        LONG lIndex) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Add(
+        IDispatch **ppCatalogObject) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE Populate(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SaveChanges(
+        LONG *pcChanges) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetCollection(
+        BSTR bstrCollName,
+        VARIANT varObjectKey,
+        IDispatch **ppCatalogCollection) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_Name(
+        VARIANT *pVarNamel) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_AddEnabled(
+        VARIANT_BOOL *pVarBool) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_RemoveEnabled(
+        VARIANT_BOOL *pVarBool) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetUtilInterface(
+        IDispatch **ppIDispatch) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_DataStoreMajorVersion(
+        LONG *plMajorVersion) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE get_DataStoreMinorVersion(
+        LONG *plMinorVersionl) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE PopulateByKey(
+        SAFEARRAY *psaKeys) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE PopulateByQuery(
+        BSTR bstrQueryString,
+        LONG lQueryType) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(ICatalogCollection, 0x6eb22872, 0x8a19, 0x11d0, 0x81,0xb6, 0x00,0xa0,0xc9,0x23,0x1c,0x29)
+#endif
 #else
-  typedef struct ICatalogCollectionVtbl {
+typedef struct ICatalogCollectionVtbl {
     BEGIN_INTERFACE
-      HRESULT (WINAPI *QueryInterface)(ICatalogCollection *This,REFIID riid,void **ppvObject);
-      ULONG (WINAPI *AddRef)(ICatalogCollection *This);
-      ULONG (WINAPI *Release)(ICatalogCollection *This);
-      HRESULT (WINAPI *GetTypeInfoCount)(ICatalogCollection *This,UINT *pctinfo);
-      HRESULT (WINAPI *GetTypeInfo)(ICatalogCollection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
-      HRESULT (WINAPI *GetIDsOfNames)(ICatalogCollection *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
-      HRESULT (WINAPI *Invoke)(ICatalogCollection *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
-      HRESULT (WINAPI *get__NewEnum)(ICatalogCollection *This,IUnknown **ppEnumVariant);
-      HRESULT (WINAPI *get_Item)(ICatalogCollection *This,__LONG32 lIndex,IDispatch **ppCatalogObject);
-      HRESULT (WINAPI *get_Count)(ICatalogCollection *This,__LONG32 *plObjectCount);
-      HRESULT (WINAPI *Remove)(ICatalogCollection *This,__LONG32 lIndex);
-      HRESULT (WINAPI *Add)(ICatalogCollection *This,IDispatch **ppCatalogObject);
-      HRESULT (WINAPI *Populate)(ICatalogCollection *This);
-      HRESULT (WINAPI *SaveChanges)(ICatalogCollection *This,__LONG32 *pcChanges);
-      HRESULT (WINAPI *GetCollection)(ICatalogCollection *This,BSTR bstrCollName,VARIANT varObjectKey,IDispatch **ppCatalogCollection);
-      HRESULT (WINAPI *get_Name)(ICatalogCollection *This,VARIANT *pVarNamel);
-      HRESULT (WINAPI *get_AddEnabled)(ICatalogCollection *This,VARIANT_BOOL *pVarBool);
-      HRESULT (WINAPI *get_RemoveEnabled)(ICatalogCollection *This,VARIANT_BOOL *pVarBool);
-      HRESULT (WINAPI *GetUtilInterface)(ICatalogCollection *This,IDispatch **ppIDispatch);
-      HRESULT (WINAPI *get_DataStoreMajorVersion)(ICatalogCollection *This,__LONG32 *plMajorVersion);
-      HRESULT (WINAPI *get_DataStoreMinorVersion)(ICatalogCollection *This,__LONG32 *plMinorVersionl);
-      HRESULT (WINAPI *PopulateByKey)(ICatalogCollection *This,SAFEARRAY *psaKeys);
-      HRESULT (WINAPI *PopulateByQuery)(ICatalogCollection *This,BSTR bstrQueryString,__LONG32 lQueryType);
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        ICatalogCollection* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        ICatalogCollection* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        ICatalogCollection* This);
+
+    /*** IDispatch methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
+        ICatalogCollection* This,
+        UINT *pctinfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
+        ICatalogCollection* This,
+        UINT iTInfo,
+        LCID lcid,
+        ITypeInfo **ppTInfo);
+
+    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
+        ICatalogCollection* This,
+        REFIID riid,
+        LPOLESTR *rgszNames,
+        UINT cNames,
+        LCID lcid,
+        DISPID *rgDispId);
+
+    HRESULT (STDMETHODCALLTYPE *Invoke)(
+        ICatalogCollection* This,
+        DISPID dispIdMember,
+        REFIID riid,
+        LCID lcid,
+        WORD wFlags,
+        DISPPARAMS *pDispParams,
+        VARIANT *pVarResult,
+        EXCEPINFO *pExcepInfo,
+        UINT *puArgErr);
+
+    /*** ICatalogCollection methods ***/
+    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
+        ICatalogCollection* This,
+        IUnknown **ppEnumVariant);
+
+    HRESULT (STDMETHODCALLTYPE *get_Item)(
+        ICatalogCollection* This,
+        LONG lIndex,
+        IDispatch **ppCatalogObject);
+
+    HRESULT (STDMETHODCALLTYPE *get_Count)(
+        ICatalogCollection* This,
+        LONG *plObjectCount);
+
+    HRESULT (STDMETHODCALLTYPE *Remove)(
+        ICatalogCollection* This,
+        LONG lIndex);
+
+    HRESULT (STDMETHODCALLTYPE *Add)(
+        ICatalogCollection* This,
+        IDispatch **ppCatalogObject);
+
+    HRESULT (STDMETHODCALLTYPE *Populate)(
+        ICatalogCollection* This);
+
+    HRESULT (STDMETHODCALLTYPE *SaveChanges)(
+        ICatalogCollection* This,
+        LONG *pcChanges);
+
+    HRESULT (STDMETHODCALLTYPE *GetCollection)(
+        ICatalogCollection* This,
+        BSTR bstrCollName,
+        VARIANT varObjectKey,
+        IDispatch **ppCatalogCollection);
+
+    HRESULT (STDMETHODCALLTYPE *get_Name)(
+        ICatalogCollection* This,
+        VARIANT *pVarNamel);
+
+    HRESULT (STDMETHODCALLTYPE *get_AddEnabled)(
+        ICatalogCollection* This,
+        VARIANT_BOOL *pVarBool);
+
+    HRESULT (STDMETHODCALLTYPE *get_RemoveEnabled)(
+        ICatalogCollection* This,
+        VARIANT_BOOL *pVarBool);
+
+    HRESULT (STDMETHODCALLTYPE *GetUtilInterface)(
+        ICatalogCollection* This,
+        IDispatch **ppIDispatch);
+
+    HRESULT (STDMETHODCALLTYPE *get_DataStoreMajorVersion)(
+        ICatalogCollection* This,
+        LONG *plMajorVersion);
+
+    HRESULT (STDMETHODCALLTYPE *get_DataStoreMinorVersion)(
+        ICatalogCollection* This,
+        LONG *plMinorVersionl);
+
+    HRESULT (STDMETHODCALLTYPE *PopulateByKey)(
+        ICatalogCollection* This,
+        SAFEARRAY *psaKeys);
+
+    HRESULT (STDMETHODCALLTYPE *PopulateByQuery)(
+        ICatalogCollection* This,
+        BSTR bstrQueryString,
+        LONG lQueryType);
+
     END_INTERFACE
-  } ICatalogCollectionVtbl;
-  struct ICatalogCollection {
-    CONST_VTBL struct ICatalogCollectionVtbl *lpVtbl;
-  };
+} ICatalogCollectionVtbl;
+interface ICatalogCollection {
+    CONST_VTBL ICatalogCollectionVtbl* lpVtbl;
+};
+
 #ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
 #define ICatalogCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
 #define ICatalogCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
 #define ICatalogCollection_Release(This) (This)->lpVtbl->Release(This)
+/*** IDispatch methods ***/
 #define ICatalogCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
 #define ICatalogCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
 #define ICatalogCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
 #define ICatalogCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
+/*** ICatalogCollection methods ***/
 #define ICatalogCollection_get__NewEnum(This,ppEnumVariant) (This)->lpVtbl->get__NewEnum(This,ppEnumVariant)
 #define ICatalogCollection_get_Item(This,lIndex,ppCatalogObject) (This)->lpVtbl->get_Item(This,lIndex,ppCatalogObject)
 #define ICatalogCollection_get_Count(This,plObjectCount) (This)->lpVtbl->get_Count(This,plObjectCount)
@@ -647,230 +2582,314 @@ extern "C"{
 #define ICatalogCollection_get_DataStoreMinorVersion(This,plMinorVersionl) (This)->lpVtbl->get_DataStoreMinorVersion(This,plMinorVersionl)
 #define ICatalogCollection_PopulateByKey(This,psaKeys) (This)->lpVtbl->PopulateByKey(This,psaKeys)
 #define ICatalogCollection_PopulateByQuery(This,bstrQueryString,lQueryType) (This)->lpVtbl->PopulateByQuery(This,bstrQueryString,lQueryType)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT ICatalogCollection_QueryInterface(ICatalogCollection* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG ICatalogCollection_AddRef(ICatalogCollection* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG ICatalogCollection_Release(ICatalogCollection* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDispatch methods ***/
+static FORCEINLINE HRESULT ICatalogCollection_GetTypeInfoCount(ICatalogCollection* This,UINT *pctinfo) {
+    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
+}
+static FORCEINLINE HRESULT ICatalogCollection_GetTypeInfo(ICatalogCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
+    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
+}
+static FORCEINLINE HRESULT ICatalogCollection_GetIDsOfNames(ICatalogCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
+    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
+}
+static FORCEINLINE HRESULT ICatalogCollection_Invoke(ICatalogCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
+    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
+}
+/*** ICatalogCollection methods ***/
+static FORCEINLINE HRESULT ICatalogCollection_get__NewEnum(ICatalogCollection* This,IUnknown **ppEnumVariant) {
+    return This->lpVtbl->get__NewEnum(This,ppEnumVariant);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_Item(ICatalogCollection* This,LONG lIndex,IDispatch **ppCatalogObject) {
+    return This->lpVtbl->get_Item(This,lIndex,ppCatalogObject);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_Count(ICatalogCollection* This,LONG *plObjectCount) {
+    return This->lpVtbl->get_Count(This,plObjectCount);
+}
+static FORCEINLINE HRESULT ICatalogCollection_Remove(ICatalogCollection* This,LONG lIndex) {
+    return This->lpVtbl->Remove(This,lIndex);
+}
+static FORCEINLINE HRESULT ICatalogCollection_Add(ICatalogCollection* This,IDispatch **ppCatalogObject) {
+    return This->lpVtbl->Add(This,ppCatalogObject);
+}
+static FORCEINLINE HRESULT ICatalogCollection_Populate(ICatalogCollection* This) {
+    return This->lpVtbl->Populate(This);
+}
+static FORCEINLINE HRESULT ICatalogCollection_SaveChanges(ICatalogCollection* This,LONG *pcChanges) {
+    return This->lpVtbl->SaveChanges(This,pcChanges);
+}
+static FORCEINLINE HRESULT ICatalogCollection_GetCollection(ICatalogCollection* This,BSTR bstrCollName,VARIANT varObjectKey,IDispatch **ppCatalogCollection) {
+    return This->lpVtbl->GetCollection(This,bstrCollName,varObjectKey,ppCatalogCollection);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_Name(ICatalogCollection* This,VARIANT *pVarNamel) {
+    return This->lpVtbl->get_Name(This,pVarNamel);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_AddEnabled(ICatalogCollection* This,VARIANT_BOOL *pVarBool) {
+    return This->lpVtbl->get_AddEnabled(This,pVarBool);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_RemoveEnabled(ICatalogCollection* This,VARIANT_BOOL *pVarBool) {
+    return This->lpVtbl->get_RemoveEnabled(This,pVarBool);
+}
+static FORCEINLINE HRESULT ICatalogCollection_GetUtilInterface(ICatalogCollection* This,IDispatch **ppIDispatch) {
+    return This->lpVtbl->GetUtilInterface(This,ppIDispatch);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_DataStoreMajorVersion(ICatalogCollection* This,LONG *plMajorVersion) {
+    return This->lpVtbl->get_DataStoreMajorVersion(This,plMajorVersion);
+}
+static FORCEINLINE HRESULT ICatalogCollection_get_DataStoreMinorVersion(ICatalogCollection* This,LONG *plMinorVersionl) {
+    return This->lpVtbl->get_DataStoreMinorVersion(This,plMinorVersionl);
+}
+static FORCEINLINE HRESULT ICatalogCollection_PopulateByKey(ICatalogCollection* This,SAFEARRAY *psaKeys) {
+    return This->lpVtbl->PopulateByKey(This,psaKeys);
+}
+static FORCEINLINE HRESULT ICatalogCollection_PopulateByQuery(ICatalogCollection* This,BSTR bstrQueryString,LONG lQueryType) {
+    return This->lpVtbl->PopulateByQuery(This,bstrQueryString,lQueryType);
+}
 #endif
 #endif
-  HRESULT WINAPI ICatalogCollection_get__NewEnum_Proxy(ICatalogCollection *This,IUnknown **ppEnumVariant);
-  void __RPC_STUB ICatalogCollection_get__NewEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_Item_Proxy(ICatalogCollection *This,__LONG32 lIndex,IDispatch **ppCatalogObject);
-  void __RPC_STUB ICatalogCollection_get_Item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_Count_Proxy(ICatalogCollection *This,__LONG32 *plObjectCount);
-  void __RPC_STUB ICatalogCollection_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_Remove_Proxy(ICatalogCollection *This,__LONG32 lIndex);
-  void __RPC_STUB ICatalogCollection_Remove_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_Add_Proxy(ICatalogCollection *This,IDispatch **ppCatalogObject);
-  void __RPC_STUB ICatalogCollection_Add_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_Populate_Proxy(ICatalogCollection *This);
-  void __RPC_STUB ICatalogCollection_Populate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_SaveChanges_Proxy(ICatalogCollection *This,__LONG32 *pcChanges);
-  void __RPC_STUB ICatalogCollection_SaveChanges_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_GetCollection_Proxy(ICatalogCollection *This,BSTR bstrCollName,VARIANT varObjectKey,IDispatch **ppCatalogCollection);
-  void __RPC_STUB ICatalogCollection_GetCollection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_Name_Proxy(ICatalogCollection *This,VARIANT *pVarNamel);
-  void __RPC_STUB ICatalogCollection_get_Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_AddEnabled_Proxy(ICatalogCollection *This,VARIANT_BOOL *pVarBool);
-  void __RPC_STUB ICatalogCollection_get_AddEnabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_RemoveEnabled_Proxy(ICatalogCollection *This,VARIANT_BOOL *pVarBool);
-  void __RPC_STUB ICatalogCollection_get_RemoveEnabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_GetUtilInterface_Proxy(ICatalogCollection *This,IDispatch **ppIDispatch);
-  void __RPC_STUB ICatalogCollection_GetUtilInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_DataStoreMajorVersion_Proxy(ICatalogCollection *This,__LONG32 *plMajorVersion);
-  void __RPC_STUB ICatalogCollection_get_DataStoreMajorVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_get_DataStoreMinorVersion_Proxy(ICatalogCollection *This,__LONG32 *plMinorVersionl);
-  void __RPC_STUB ICatalogCollection_get_DataStoreMinorVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_PopulateByKey_Proxy(ICatalogCollection *This,SAFEARRAY *psaKeys);
-  void __RPC_STUB ICatalogCollection_PopulateByKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
-  HRESULT WINAPI ICatalogCollection_PopulateByQuery_Proxy(ICatalogCollection *This,BSTR bstrQueryString,__LONG32 lQueryType);
-  void __RPC_STUB ICatalogCollection_PopulateByQuery_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
+
 #endif
 
-#ifndef __COMAdmin_LIBRARY_DEFINED__
-#define __COMAdmin_LIBRARY_DEFINED__
-  typedef enum COMAdminComponentType {
-    COMAdmin32BitComponent = 0x1,COMAdmin64BitComponent = 0x2
-  } COMAdminComponentType;
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get__NewEnum_Proxy(
+    ICatalogCollection* This,
+    IUnknown **ppEnumVariant);
+void __RPC_STUB ICatalogCollection_get__NewEnum_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_Item_Proxy(
+    ICatalogCollection* This,
+    LONG lIndex,
+    IDispatch **ppCatalogObject);
+void __RPC_STUB ICatalogCollection_get_Item_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_Count_Proxy(
+    ICatalogCollection* This,
+    LONG *plObjectCount);
+void __RPC_STUB ICatalogCollection_get_Count_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_Remove_Proxy(
+    ICatalogCollection* This,
+    LONG lIndex);
+void __RPC_STUB ICatalogCollection_Remove_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_Add_Proxy(
+    ICatalogCollection* This,
+    IDispatch **ppCatalogObject);
+void __RPC_STUB ICatalogCollection_Add_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_Populate_Proxy(
+    ICatalogCollection* This);
+void __RPC_STUB ICatalogCollection_Populate_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_SaveChanges_Proxy(
+    ICatalogCollection* This,
+    LONG *pcChanges);
+void __RPC_STUB ICatalogCollection_SaveChanges_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_GetCollection_Proxy(
+    ICatalogCollection* This,
+    BSTR bstrCollName,
+    VARIANT varObjectKey,
+    IDispatch **ppCatalogCollection);
+void __RPC_STUB ICatalogCollection_GetCollection_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_Name_Proxy(
+    ICatalogCollection* This,
+    VARIANT *pVarNamel);
+void __RPC_STUB ICatalogCollection_get_Name_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_AddEnabled_Proxy(
+    ICatalogCollection* This,
+    VARIANT_BOOL *pVarBool);
+void __RPC_STUB ICatalogCollection_get_AddEnabled_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_RemoveEnabled_Proxy(
+    ICatalogCollection* This,
+    VARIANT_BOOL *pVarBool);
+void __RPC_STUB ICatalogCollection_get_RemoveEnabled_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_GetUtilInterface_Proxy(
+    ICatalogCollection* This,
+    IDispatch **ppIDispatch);
+void __RPC_STUB ICatalogCollection_GetUtilInterface_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_DataStoreMajorVersion_Proxy(
+    ICatalogCollection* This,
+    LONG *plMajorVersion);
+void __RPC_STUB ICatalogCollection_get_DataStoreMajorVersion_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_get_DataStoreMinorVersion_Proxy(
+    ICatalogCollection* This,
+    LONG *plMinorVersionl);
+void __RPC_STUB ICatalogCollection_get_DataStoreMinorVersion_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_PopulateByKey_Proxy(
+    ICatalogCollection* This,
+    SAFEARRAY *psaKeys);
+void __RPC_STUB ICatalogCollection_PopulateByKey_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE ICatalogCollection_PopulateByQuery_Proxy(
+    ICatalogCollection* This,
+    BSTR bstrQueryString,
+    LONG lQueryType);
+void __RPC_STUB ICatalogCollection_PopulateByQuery_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
 
-  typedef enum COMAdminApplicationInstallOptions {
-    COMAdminInstallNoUsers = 0,COMAdminInstallUsers = 1,COMAdminInstallForceOverwriteOfFiles = 2
-  } COMAdminApplicationInstallOptions;
+#endif  /* __ICatalogCollection_INTERFACE_DEFINED__ */
 
-  typedef enum COMAdminApplicationExportOptions {
-    COMAdminExportNoUsers = 0,COMAdminExportUsers = 1,COMAdminExportApplicationProxy = 2,COMAdminExportForceOverwriteOfFiles = 4,
-    COMAdminExportIn10Format = 16
-  } COMAdminApplicationExportOptions;
 
-  typedef enum COMAdminThreadingModels {
-    COMAdminThreadingModelApartment = 0,COMAdminThreadingModelFree = 1,COMAdminThreadingModelMain = 2,COMAdminThreadingModelBoth = 3,
-    COMAdminThreadingModelNeutral = 4,COMAdminThreadingModelNotSpecified = 5
-  } COMAdminThreadingModels;
+DEFINE_GUID(LIBID_COMAdmin, 0xf618c513, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35);
 
-  typedef enum COMAdminTransactionOptions {
-    COMAdminTransactionIgnored = 0,COMAdminTransactionNone = 1,COMAdminTransactionSupported = 2,COMAdminTransactionRequired = 3,
-    COMAdminTransactionRequiresNew = 4
-  } COMAdminTransactionOptions;
+/*****************************************************************************
+ * COMAdminCatalog coclass
+ */
 
-  typedef enum COMAdminTxIsolationLevelOptions {
-    COMAdminTxIsolationLevelAny = 0,COMAdminTxIsolationLevelReadUnCommitted,
-    COMAdminTxIsolationLevelReadCommitted,COMAdminTxIsolationLevelRepeatableRead,
-    COMAdminTxIsolationLevelSerializable
-  } COMAdminTxIsolationLevelOptions;
+DEFINE_GUID(CLSID_COMAdminCatalog, 0xf618c514, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35);
 
-  typedef enum COMAdminSynchronizationOptions {
-    COMAdminSynchronizationIgnored = 0,COMAdminSynchronizationNone = 1,COMAdminSynchronizationSupported = 2,COMAdminSynchronizationRequired = 3,
-    COMAdminSynchronizationRequiresNew = 4
-  } COMAdminSynchronizationOptions;
-
-  typedef enum COMAdminActivationOptions {
-    COMAdminActivationInproc = 0,COMAdminActivationLocal = 1
-  } COMAdminActivationOptions;
-
-  typedef enum COMAdminAccessChecksLevelOptions {
-    COMAdminAccessChecksApplicationLevel = 0,COMAdminAccessChecksApplicationComponentLevel = 1
-  } COMAdminAccessChecksLevelOptions;
-
-  typedef enum COMAdminAuthenticationLevelOptions {
-    COMAdminAuthenticationDefault = 0,COMAdminAuthenticationNone = 1,COMAdminAuthenticationConnect = 2,COMAdminAuthenticationCall = 3,
-    COMAdminAuthenticationPacket = 4,COMAdminAuthenticationIntegrity = 5,COMAdminAuthenticationPrivacy = 6
-  } COMAdminAuthenticationLevelOptions;
-
-  typedef enum COMAdminImpersonationLevelOptions {
-    COMAdminImpersonationAnonymous = 1,COMAdminImpersonationIdentify = 2,COMAdminImpersonationImpersonate = 3,COMAdminImpersonationDelegate = 4
-  } COMAdminImpersonationLevelOptions;
-
-  typedef enum COMAdminAuthenticationCapabilitiesOptions {
-    COMAdminAuthenticationCapabilitiesNone = 0,COMAdminAuthenticationCapabilitiesSecureReference = 0x2,
-    COMAdminAuthenticationCapabilitiesStaticCloaking = 0x20,COMAdminAuthenticationCapabilitiesDynamicCloaking = 0x40
-  } COMAdminAuthenticationCapabilitiesOptions;
-
-  typedef enum COMAdminOS {
-    COMAdminOSNotInitialized = 0,COMAdminOSWindows3_1 = 1,COMAdminOSWindows9x = 2,COMAdminOSWindows2000 = 3,
-    COMAdminOSWindows2000AdvancedServer = 4,COMAdminOSWindows2000Unknown = 5,COMAdminOSUnknown = 6,COMAdminOSWindowsXPPersonal = 11,
-    COMAdminOSWindowsXPProfessional = 12,COMAdminOSWindowsNETStandardServer = 13,COMAdminOSWindowsNETEnterpriseServer = 14,
-    COMAdminOSWindowsNETDatacenterServer = 15,COMAdminOSWindowsNETWebServer = 16,COMAdminOSWindowsLonghornPersonal = 17,
-    COMAdminOSWindowsLonghornProfessional = 18,COMAdminOSWindowsLonghornStandardServer = 19,COMAdminOSWindowsLonghornEnterpriseServer = 20,
-    COMAdminOSWindowsLonghornDatacenterServer = 21,COMAdminOSWindowsLonghornWebServer = 22
-  } COMAdminOS;
-
-  typedef enum COMAdminServiceOptions {
-    COMAdminServiceLoadBalanceRouter = 1
-  } COMAdminServiceOptions;
-
-  typedef enum COMAdminServiceStatusOptions {
-    COMAdminServiceStopped = 0,COMAdminServiceStartPending,COMAdminServiceStopPending,
-    COMAdminServiceRunning,COMAdminServiceContinuePending,COMAdminServicePausePending,
-    COMAdminServicePaused,COMAdminServiceUnknownState
-  } COMAdminServiceStatusOptions;
-
-  typedef enum COMAdminQCMessageAuthenticateOptions {
-    COMAdminQCMessageAuthenticateSecureApps = 0,COMAdminQCMessageAuthenticateOff = 1,COMAdminQCMessageAuthenticateOn = 2
-  } COMAdminQCMessageAuthenticateOptions;
-
-  typedef enum COMAdminFileFlags {
-    COMAdminFileFlagLoadable = 0x1,COMAdminFileFlagCOM = 0x2,COMAdminFileFlagContainsPS = 0x4,COMAdminFileFlagContainsComp = 0x8,
-    COMAdminFileFlagContainsTLB = 0x10,COMAdminFileFlagSelfReg = 0x20,COMAdminFileFlagSelfUnReg = 0x40,COMAdminFileFlagUnloadableDLL = 0x80,
-    COMAdminFileFlagDoesNotExist = 0x100,COMAdminFileFlagAlreadyInstalled = 0x200,COMAdminFileFlagBadTLB = 0x400,
-    COMAdminFileFlagGetClassObjFailed = 0x800,COMAdminFileFlagClassNotAvailable = 0x1000,COMAdminFileFlagRegistrar = 0x2000,
-    COMAdminFileFlagNoRegistrar = 0x4000,COMAdminFileFlagDLLRegsvrFailed = 0x8000,COMAdminFileFlagRegTLBFailed = 0x10000,
-    COMAdminFileFlagRegistrarFailed = 0x20000,COMAdminFileFlagError = 0x40000
-  } COMAdminFileFlags;
-
-  typedef enum COMAdminComponentFlags {
-    COMAdminCompFlagTypeInfoFound = 0x1,COMAdminCompFlagCOMPlusPropertiesFound = 0x2,COMAdminCompFlagProxyFound = 0x4,
-    COMAdminCompFlagInterfacesFound = 0x8,COMAdminCompFlagAlreadyInstalled = 0x10,COMAdminCompFlagNotInApplication = 0x20
-  } COMAdminComponentFlags;
+#ifdef __cplusplus
+class DECLSPEC_UUID("f618c514-dfb8-11d1-a2cf-00805fc79235") COMAdminCatalog;
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(COMAdminCatalog, 0xf618c514, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35)
+#endif
+#endif
+
+/*****************************************************************************
+ * COMAdminCatalogObject coclass
+ */
+
+DEFINE_GUID(CLSID_COMAdminCatalogObject, 0xf618c515, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35);
+
+#ifdef __cplusplus
+class DECLSPEC_UUID("f618c515-dfb8-11d1-a2cf-00805fc79235") COMAdminCatalogObject;
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(COMAdminCatalogObject, 0xf618c515, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35)
+#endif
+#endif
+
+/*****************************************************************************
+ * COMAdminCatalogCollection coclass
+ */
+
+DEFINE_GUID(CLSID_COMAdminCatalogCollection, 0xf618c516, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35);
+
+#ifdef __cplusplus
+class DECLSPEC_UUID("f618c516-dfb8-11d1-a2cf-00805fc79235") COMAdminCatalogCollection;
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(COMAdminCatalogCollection, 0xf618c516, 0xdfb8, 0x11d1, 0xa2,0xcf, 0x00,0x80,0x5f,0xc7,0x92,0x35)
+#endif
+#endif
 
 #define COMAdminCollectionRoot ("Root")
+
 #define COMAdminCollectionApplications ("Applications")
+
 #define COMAdminCollectionComponents ("Components")
+
 #define COMAdminCollectionComputerList ("ComputerList")
+
 #define COMAdminCollectionApplicationCluster ("ApplicationCluster")
+
 #define COMAdminCollectionLocalComputer ("LocalComputer")
+
 #define COMAdminCollectionInprocServers ("InprocServers")
+
 #define COMAdminCollectionRelatedCollectionInfo ("RelatedCollectionInfo")
+
 #define COMAdminCollectionPropertyInfo ("PropertyInfo")
+
 #define COMAdminCollectionRoles ("Roles")
+
 #define COMAdminCollectionErrorInfo ("ErrorInfo")
+
 #define COMAdminCollectionInterfacesForComponent ("InterfacesForComponent")
+
 #define COMAdminCollectionRolesForComponent ("RolesForComponent")
+
 #define COMAdminCollectionMethodsForInterface ("MethodsForInterface")
+
 #define COMAdminCollectionRolesForInterface ("RolesForInterface")
+
 #define COMAdminCollectionRolesForMethod ("RolesForMethod")
+
 #define COMAdminCollectionUsersInRole ("UsersInRole")
+
 #define COMAdminCollectionDCOMProtocols ("DCOMProtocols")
+
 #define COMAdminCollectionPartitions ("Partitions")
 
-  typedef enum COMAdminErrorCodes {
-    COMAdminErrObjectErrors = (HRESULT)0x80110401,COMAdminErrObjectInvalid = (HRESULT)0x80110402,COMAdminErrKeyMissing = (HRESULT)0x80110403,
-    COMAdminErrAlreadyInstalled = (HRESULT)0x80110404,COMAdminErrAppFileWriteFail = (HRESULT)0x80110407,
-    COMAdminErrAppFileReadFail = (HRESULT)0x80110408,COMAdminErrAppFileVersion = (HRESULT)0x80110409,COMAdminErrBadPath = (HRESULT)0x8011040a,
-    COMAdminErrApplicationExists = (HRESULT)0x8011040b,COMAdminErrRoleExists = (HRESULT)0x8011040c,COMAdminErrCantCopyFile = (HRESULT)0x8011040d,
-    COMAdminErrNoUser = (HRESULT)0x8011040f,COMAdminErrInvalidUserids = (HRESULT)0x80110410,COMAdminErrNoRegistryCLSID = (HRESULT)0x80110411,
-    COMAdminErrBadRegistryProgID = (HRESULT)0x80110412,COMAdminErrAuthenticationLevel = (HRESULT)0x80110413,
-    COMAdminErrUserPasswdNotValid = (HRESULT)0x80110414,COMAdminErrCLSIDOrIIDMismatch = (HRESULT)0x80110418,
-    COMAdminErrRemoteInterface = (HRESULT)0x80110419,COMAdminErrDllRegisterServer = (HRESULT)0x8011041a,
-    COMAdminErrNoServerShare = (HRESULT)0x8011041b,COMAdminErrDllLoadFailed = (HRESULT)0x8011041d,COMAdminErrBadRegistryLibID = (HRESULT)0x8011041e,
-    COMAdminErrAppDirNotFound = (HRESULT)0x8011041f,COMAdminErrRegistrarFailed = (HRESULT)0x80110423,
-    COMAdminErrCompFileDoesNotExist = (HRESULT)0x80110424,COMAdminErrCompFileLoadDLLFail = (HRESULT)0x80110425,
-    COMAdminErrCompFileGetClassObj = (HRESULT)0x80110426,COMAdminErrCompFileClassNotAvail = (HRESULT)0x80110427,
-    COMAdminErrCompFileBadTLB = (HRESULT)0x80110428,COMAdminErrCompFileNotInstallable = (HRESULT)0x80110429,
-    COMAdminErrNotChangeable = (HRESULT)0x8011042a,COMAdminErrNotDeletable = (HRESULT)0x8011042b,COMAdminErrSession = (HRESULT)0x8011042c,
-    COMAdminErrCompMoveLocked = (HRESULT)0x8011042d,COMAdminErrCompMoveBadDest = (HRESULT)0x8011042e,COMAdminErrRegisterTLB = (HRESULT)0x80110430,
-    COMAdminErrSystemApp = (HRESULT)0x80110433,COMAdminErrCompFileNoRegistrar = (HRESULT)0x80110434,
-    COMAdminErrCoReqCompInstalled = (HRESULT)0x80110435,COMAdminErrServiceNotInstalled = (HRESULT)0x80110436,
-    COMAdminErrPropertySaveFailed = (HRESULT)0x80110437,COMAdminErrObjectExists = (HRESULT)0x80110438,
-    COMAdminErrComponentExists = (HRESULT)0x80110439,COMAdminErrRegFileCorrupt = (HRESULT)0x8011043b,
-    COMAdminErrPropertyOverflow = (HRESULT)0x8011043c,COMAdminErrNotInRegistry = (HRESULT)0x8011043e,
-    COMAdminErrObjectNotPoolable = (HRESULT)0x8011043f,COMAdminErrApplidMatchesClsid = (HRESULT)0x80110446,
-    COMAdminErrRoleDoesNotExist = (HRESULT)0x80110447,COMAdminErrStartAppNeedsComponents = (HRESULT)0x80110448,
-    COMAdminErrRequiresDifferentPlatform = (HRESULT)0x80110449,COMAdminErrQueuingServiceNotAvailable = (HRESULT)0x80110602,
-    COMAdminErrObjectParentMissing = (HRESULT)0x80110808,COMAdminErrObjectDoesNotExist = (HRESULT)0x80110809,
-    COMAdminErrCanNotExportAppProxy = (HRESULT)0x8011044a,COMAdminErrCanNotStartApp = (HRESULT)0x8011044b,
-    COMAdminErrCanNotExportSystemApp = (HRESULT)0x8011044c,COMAdminErrCanNotSubscribeToComponent = (HRESULT)0x8011044d,
-    COMAdminErrAppNotRunning = (HRESULT)0x8011080a,COMAdminErrEventClassCannotBeSubscriber = (HRESULT)0x8011044e,
-    COMAdminErrLibAppProxyIncompatible = (HRESULT)0x8011044f,COMAdminErrBasePartitionOnly = (HRESULT)0x80110450,
-    COMAdminErrDuplicatePartitionName = (HRESULT)0x80110457,COMAdminErrPartitionInUse = (HRESULT)0x80110459,
-    COMAdminErrImportedComponentsNotAllowed = (HRESULT)0x8011045b,COMAdminErrRegdbNotInitialized = (HRESULT)0x80110472,
-    COMAdminErrRegdbNotOpen = (HRESULT)0x80110473,COMAdminErrRegdbSystemErr = (HRESULT)0x80110474,
-    COMAdminErrRegdbAlreadyRunning = (HRESULT)0x80110475,COMAdminErrMigVersionNotSupported = (HRESULT)0x80110480,
-    COMAdminErrMigSchemaNotFound = (HRESULT)0x80110481,COMAdminErrCatBitnessMismatch = (HRESULT)0x80110482,
-    COMAdminErrCatUnacceptableBitness = (HRESULT)0x80110483,COMAdminErrCatWrongAppBitnessBitness = (HRESULT)0x80110484,
-    COMAdminErrCatPauseResumeNotSupported = (HRESULT)0x80110485,COMAdminErrCatServerFault = (HRESULT)0x80110486,
-    COMAdminErrCantRecycleLibraryApps = (HRESULT)0x8011080f,COMAdminErrCantRecycleServiceApps = (HRESULT)0x80110811,
-    COMAdminErrProcessAlreadyRecycled = (HRESULT)0x80110812,COMAdminErrPausedProcessMayNotBeRecycled = (HRESULT)0x80110813,
-    COMAdminErrInvalidPartition = (HRESULT)0x8011080b,COMAdminErrPartitionMsiOnly = (HRESULT)0x80110819,
-    COMAdminErrStartAppDisabled = (HRESULT)0x80110451,COMAdminErrCompMoveSource = (HRESULT)0x8011081c,
-    COMAdminErrCompMoveDest = (HRESULT)0x8011081d,COMAdminErrCompMovePrivate = (HRESULT)0x8011081e,
-    COMAdminErrCannotCopyEventClass = (HRESULT)0x80110820
-  };
-
-  EXTERN_C const IID LIBID_COMAdmin;
-  EXTERN_C const CLSID CLSID_COMAdminCatalog;
-#ifdef __cplusplus
-  class COMAdminCatalog;
-#endif
-  EXTERN_C const CLSID CLSID_COMAdminCatalogObject;
-#ifdef __cplusplus
-  class COMAdminCatalogObject;
-#endif
-  EXTERN_C const CLSID CLSID_COMAdminCatalogCollection;
-#ifdef __cplusplus
-  class COMAdminCatalogCollection;
-#endif
 #endif
+/* Begin additional prototypes for all interfaces */
 
-  ULONG __RPC_API BSTR_UserSize(ULONG *,ULONG,BSTR *);
-  unsigned char *__RPC_API BSTR_UserMarshal(ULONG *,unsigned char *,BSTR *);
-  unsigned char *__RPC_API BSTR_UserUnmarshal(ULONG *,unsigned char *,BSTR *);
-  void __RPC_API BSTR_UserFree(ULONG *,BSTR *);
-  ULONG __RPC_API LPSAFEARRAY_UserSize(ULONG *,ULONG,LPSAFEARRAY *);
-  unsigned char *__RPC_API LPSAFEARRAY_UserMarshal(ULONG *,unsigned char *,LPSAFEARRAY *);
-  unsigned char *__RPC_API LPSAFEARRAY_UserUnmarshal(ULONG *,unsigned char *,LPSAFEARRAY *);
-  void __RPC_API LPSAFEARRAY_UserFree(ULONG *,LPSAFEARRAY *);
-  ULONG __RPC_API VARIANT_UserSize(ULONG *,ULONG,VARIANT *);
-  unsigned char *__RPC_API VARIANT_UserMarshal(ULONG *,unsigned char *,VARIANT *);
-  unsigned char *__RPC_API VARIANT_UserUnmarshal(ULONG *,unsigned char *,VARIANT *);
-  void __RPC_API VARIANT_UserFree(ULONG *,VARIANT *);
+ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
+unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
+unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
+void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
+ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
+unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
+unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
+void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);
+
+/* End additional prototypes */
 
 #ifdef __cplusplus
 }
 #endif
-#endif
+
+#endif /* __comadmin_h__ */
-- 
2.1.0

